#
# Autogenerated by Frugal Compiler (3.7.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from frugal.util import make_hashable
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol


class ApplicationType(int):
    IOS = 16
    IOS_RC = 17
    IOS_BETA = 18
    IOS_ALPHA = 19
    ANDROID = 32
    ANDROID_RC = 33
    ANDROID_BETA = 34
    ANDROID_ALPHA = 35
    WAP = 48
    WAP_RC = 49
    WAP_BETA = 50
    WAP_ALPHA = 51
    BOT = 64
    BOT_RC = 65
    BOT_BETA = 66
    BOT_ALPHA = 67
    WEB = 80
    WEB_RC = 81
    WEB_BETA = 82
    WEB_ALPHA = 83
    DESKTOPWIN = 96
    DESKTOPWIN_RC = 97
    DESKTOPWIN_BETA = 98
    DESKTOPWIN_ALPHA = 99
    DESKTOPMAC = 112
    DESKTOPMAC_RC = 113
    DESKTOPMAC_BETA = 114
    DESKTOPMAC_ALPHA = 115
    CHANNELGW = 128
    CHANNELGW_RC = 129
    CHANNELGW_BETA = 130
    CHANNELGW_ALPHA = 131
    CHANNELCP = 144
    CHANNELCP_RC = 145
    CHANNELCP_BETA = 146
    CHANNELCP_ALPHA = 147
    WINPHONE = 160
    WINPHONE_RC = 161
    WINPHONE_BETA = 162
    WINPHONE_ALPHA = 163
    BLACKBERRY = 176
    BLACKBERRY_RC = 177
    BLACKBERRY_BETA = 178
    BLACKBERRY_ALPHA = 179
    WINMETRO = 192
    WINMETRO_RC = 193
    WINMETRO_BETA = 194
    WINMETRO_ALPHA = 195
    S40 = 208
    S40_RC = 209
    S40_BETA = 210
    S40_ALPHA = 211
    CHRONO = 224
    CHRONO_RC = 225
    CHRONO_BETA = 226
    CHRONO_ALPHA = 227
    TIZEN = 256
    TIZEN_RC = 257
    TIZEN_BETA = 258
    TIZEN_ALPHA = 259
    VIRTUAL = 272
    FIREFOXOS = 288
    FIREFOXOS_RC = 289
    FIREFOXOS_BETA = 290
    FIREFOXOS_ALPHA = 291
    IOSIPAD = 304
    IOSIPAD_RC = 305
    IOSIPAD_BETA = 306
    IOSIPAD_ALPHA = 307
    BIZIOS = 320
    BIZIOS_RC = 321
    BIZIOS_BETA = 322
    BIZIOS_ALPHA = 323
    BIZANDROID = 336
    BIZANDROID_RC = 337
    BIZANDROID_BETA = 338
    BIZANDROID_ALPHA = 339
    BIZBOT = 352
    BIZBOT_RC = 353
    BIZBOT_BETA = 354
    BIZBOT_ALPHA = 355
    CHROMEOS = 368
    CHROMEOS_RC = 369
    CHROMEOS_BETA = 370
    CHROMEOS_ALPHA = 371
    ANDROIDLITE = 384
    ANDROIDLITE_RC = 385
    ANDROIDLITE_BETA = 386
    ANDROIDLITE_ALPHA = 387
    WIN10 = 400
    WIN10_RC = 401
    WIN10_BETA = 402
    WIN10_ALPHA = 403
    BIZWEB = 416
    BIZWEB_RC = 417
    BIZWEB_BETA = 418
    BIZWEB_ALPHA = 419
    DUMMYPRIMARY = 432
    DUMMYPRIMARY_RC = 433
    DUMMYPRIMARY_BETA = 434
    DUMMYPRIMARY_ALPHA = 435
    SQUARE = 448
    SQUARE_RC = 449
    SQUARE_BETA = 450
    SQUARE_ALPHA = 451
    INTERNAL = 464
    INTERNAL_RC = 465
    INTERNAL_BETA = 466
    INTERNAL_ALPHA = 467
    CLOVAFRIENDS = 480
    CLOVAFRIENDS_RC = 481
    CLOVAFRIENDS_BETA = 482
    CLOVAFRIENDS_ALPHA = 483

    _VALUES_TO_NAMES = {
        16: "IOS",
        17: "IOS_RC",
        18: "IOS_BETA",
        19: "IOS_ALPHA",
        32: "ANDROID",
        33: "ANDROID_RC",
        34: "ANDROID_BETA",
        35: "ANDROID_ALPHA",
        48: "WAP",
        49: "WAP_RC",
        50: "WAP_BETA",
        51: "WAP_ALPHA",
        64: "BOT",
        65: "BOT_RC",
        66: "BOT_BETA",
        67: "BOT_ALPHA",
        80: "WEB",
        81: "WEB_RC",
        82: "WEB_BETA",
        83: "WEB_ALPHA",
        96: "DESKTOPWIN",
        97: "DESKTOPWIN_RC",
        98: "DESKTOPWIN_BETA",
        99: "DESKTOPWIN_ALPHA",
        112: "DESKTOPMAC",
        113: "DESKTOPMAC_RC",
        114: "DESKTOPMAC_BETA",
        115: "DESKTOPMAC_ALPHA",
        128: "CHANNELGW",
        129: "CHANNELGW_RC",
        130: "CHANNELGW_BETA",
        131: "CHANNELGW_ALPHA",
        144: "CHANNELCP",
        145: "CHANNELCP_RC",
        146: "CHANNELCP_BETA",
        147: "CHANNELCP_ALPHA",
        160: "WINPHONE",
        161: "WINPHONE_RC",
        162: "WINPHONE_BETA",
        163: "WINPHONE_ALPHA",
        176: "BLACKBERRY",
        177: "BLACKBERRY_RC",
        178: "BLACKBERRY_BETA",
        179: "BLACKBERRY_ALPHA",
        192: "WINMETRO",
        193: "WINMETRO_RC",
        194: "WINMETRO_BETA",
        195: "WINMETRO_ALPHA",
        208: "S40",
        209: "S40_RC",
        210: "S40_BETA",
        211: "S40_ALPHA",
        224: "CHRONO",
        225: "CHRONO_RC",
        226: "CHRONO_BETA",
        227: "CHRONO_ALPHA",
        256: "TIZEN",
        257: "TIZEN_RC",
        258: "TIZEN_BETA",
        259: "TIZEN_ALPHA",
        272: "VIRTUAL",
        288: "FIREFOXOS",
        289: "FIREFOXOS_RC",
        290: "FIREFOXOS_BETA",
        291: "FIREFOXOS_ALPHA",
        304: "IOSIPAD",
        305: "IOSIPAD_RC",
        306: "IOSIPAD_BETA",
        307: "IOSIPAD_ALPHA",
        320: "BIZIOS",
        321: "BIZIOS_RC",
        322: "BIZIOS_BETA",
        323: "BIZIOS_ALPHA",
        336: "BIZANDROID",
        337: "BIZANDROID_RC",
        338: "BIZANDROID_BETA",
        339: "BIZANDROID_ALPHA",
        352: "BIZBOT",
        353: "BIZBOT_RC",
        354: "BIZBOT_BETA",
        355: "BIZBOT_ALPHA",
        368: "CHROMEOS",
        369: "CHROMEOS_RC",
        370: "CHROMEOS_BETA",
        371: "CHROMEOS_ALPHA",
        384: "ANDROIDLITE",
        385: "ANDROIDLITE_RC",
        386: "ANDROIDLITE_BETA",
        387: "ANDROIDLITE_ALPHA",
        400: "WIN10",
        401: "WIN10_RC",
        402: "WIN10_BETA",
        403: "WIN10_ALPHA",
        416: "BIZWEB",
        417: "BIZWEB_RC",
        418: "BIZWEB_BETA",
        419: "BIZWEB_ALPHA",
        432: "DUMMYPRIMARY",
        433: "DUMMYPRIMARY_RC",
        434: "DUMMYPRIMARY_BETA",
        435: "DUMMYPRIMARY_ALPHA",
        448: "SQUARE",
        449: "SQUARE_RC",
        450: "SQUARE_BETA",
        451: "SQUARE_ALPHA",
        464: "INTERNAL",
        465: "INTERNAL_RC",
        466: "INTERNAL_BETA",
        467: "INTERNAL_ALPHA",
        480: "CLOVAFRIENDS",
        481: "CLOVAFRIENDS_RC",
        482: "CLOVAFRIENDS_BETA",
        483: "CLOVAFRIENDS_ALPHA",
    }

    _NAMES_TO_VALUES = {
        "IOS": 16,
        "IOS_RC": 17,
        "IOS_BETA": 18,
        "IOS_ALPHA": 19,
        "ANDROID": 32,
        "ANDROID_RC": 33,
        "ANDROID_BETA": 34,
        "ANDROID_ALPHA": 35,
        "WAP": 48,
        "WAP_RC": 49,
        "WAP_BETA": 50,
        "WAP_ALPHA": 51,
        "BOT": 64,
        "BOT_RC": 65,
        "BOT_BETA": 66,
        "BOT_ALPHA": 67,
        "WEB": 80,
        "WEB_RC": 81,
        "WEB_BETA": 82,
        "WEB_ALPHA": 83,
        "DESKTOPWIN": 96,
        "DESKTOPWIN_RC": 97,
        "DESKTOPWIN_BETA": 98,
        "DESKTOPWIN_ALPHA": 99,
        "DESKTOPMAC": 112,
        "DESKTOPMAC_RC": 113,
        "DESKTOPMAC_BETA": 114,
        "DESKTOPMAC_ALPHA": 115,
        "CHANNELGW": 128,
        "CHANNELGW_RC": 129,
        "CHANNELGW_BETA": 130,
        "CHANNELGW_ALPHA": 131,
        "CHANNELCP": 144,
        "CHANNELCP_RC": 145,
        "CHANNELCP_BETA": 146,
        "CHANNELCP_ALPHA": 147,
        "WINPHONE": 160,
        "WINPHONE_RC": 161,
        "WINPHONE_BETA": 162,
        "WINPHONE_ALPHA": 163,
        "BLACKBERRY": 176,
        "BLACKBERRY_RC": 177,
        "BLACKBERRY_BETA": 178,
        "BLACKBERRY_ALPHA": 179,
        "WINMETRO": 192,
        "WINMETRO_RC": 193,
        "WINMETRO_BETA": 194,
        "WINMETRO_ALPHA": 195,
        "S40": 208,
        "S40_RC": 209,
        "S40_BETA": 210,
        "S40_ALPHA": 211,
        "CHRONO": 224,
        "CHRONO_RC": 225,
        "CHRONO_BETA": 226,
        "CHRONO_ALPHA": 227,
        "TIZEN": 256,
        "TIZEN_RC": 257,
        "TIZEN_BETA": 258,
        "TIZEN_ALPHA": 259,
        "VIRTUAL": 272,
        "FIREFOXOS": 288,
        "FIREFOXOS_RC": 289,
        "FIREFOXOS_BETA": 290,
        "FIREFOXOS_ALPHA": 291,
        "IOSIPAD": 304,
        "IOSIPAD_RC": 305,
        "IOSIPAD_BETA": 306,
        "IOSIPAD_ALPHA": 307,
        "BIZIOS": 320,
        "BIZIOS_RC": 321,
        "BIZIOS_BETA": 322,
        "BIZIOS_ALPHA": 323,
        "BIZANDROID": 336,
        "BIZANDROID_RC": 337,
        "BIZANDROID_BETA": 338,
        "BIZANDROID_ALPHA": 339,
        "BIZBOT": 352,
        "BIZBOT_RC": 353,
        "BIZBOT_BETA": 354,
        "BIZBOT_ALPHA": 355,
        "CHROMEOS": 368,
        "CHROMEOS_RC": 369,
        "CHROMEOS_BETA": 370,
        "CHROMEOS_ALPHA": 371,
        "ANDROIDLITE": 384,
        "ANDROIDLITE_RC": 385,
        "ANDROIDLITE_BETA": 386,
        "ANDROIDLITE_ALPHA": 387,
        "WIN10": 400,
        "WIN10_RC": 401,
        "WIN10_BETA": 402,
        "WIN10_ALPHA": 403,
        "BIZWEB": 416,
        "BIZWEB_RC": 417,
        "BIZWEB_BETA": 418,
        "BIZWEB_ALPHA": 419,
        "DUMMYPRIMARY": 432,
        "DUMMYPRIMARY_RC": 433,
        "DUMMYPRIMARY_BETA": 434,
        "DUMMYPRIMARY_ALPHA": 435,
        "SQUARE": 448,
        "SQUARE_RC": 449,
        "SQUARE_BETA": 450,
        "SQUARE_ALPHA": 451,
        "INTERNAL": 464,
        "INTERNAL_RC": 465,
        "INTERNAL_BETA": 466,
        "INTERNAL_ALPHA": 467,
        "CLOVAFRIENDS": 480,
        "CLOVAFRIENDS_RC": 481,
        "CLOVAFRIENDS_BETA": 482,
        "CLOVAFRIENDS_ALPHA": 483,
    }

class ExtendedProfileAttribute(int):

    _VALUES_TO_NAMES = {
    }

    _NAMES_TO_VALUES = {
    }

class PrivacyLevelType(int):
    PUBLIC = 0
    PRIVATE = 1

    _VALUES_TO_NAMES = {
        0: "PUBLIC",
        1: "PRIVATE",
    }

    _NAMES_TO_VALUES = {
        "PUBLIC": 0,
        "PRIVATE": 1,
    }

class PaidCallerIdStatus(int):
    NOT_SPECIFIED = 0
    VALID = 1
    VERIFICATION_REQUIRED = 2
    NOT_PERMITTED = 3
    LIMIT_EXCEEDED = 4
    LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 5

    _VALUES_TO_NAMES = {
        0: "NOT_SPECIFIED",
        1: "VALID",
        2: "VERIFICATION_REQUIRED",
        3: "NOT_PERMITTED",
        4: "LIMIT_EXCEEDED",
        5: "LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED",
    }

    _NAMES_TO_VALUES = {
        "NOT_SPECIFIED": 0,
        "VALID": 1,
        "VERIFICATION_REQUIRED": 2,
        "NOT_PERMITTED": 3,
        "LIMIT_EXCEEDED": 4,
        "LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED": 5,
    }

class PaidCallProductType(int):
    COIN = 0
    CREDIT = 1
    MONTHLY = 2

    _VALUES_TO_NAMES = {
        0: "COIN",
        1: "CREDIT",
        2: "MONTHLY",
    }

    _NAMES_TO_VALUES = {
        "COIN": 0,
        "CREDIT": 1,
        "MONTHLY": 2,
    }

class PaidCallType(int):
    OUT = 0
    IN = 1
    TOLLFREE = 2
    RECORD = 3
    AD = 4
    CS = 5

    _VALUES_TO_NAMES = {
        0: "OUT",
        1: "IN",
        2: "TOLLFREE",
        3: "RECORD",
        4: "AD",
        5: "CS",
    }

    _NAMES_TO_VALUES = {
        "OUT": 0,
        "IN": 1,
        "TOLLFREE": 2,
        "RECORD": 3,
        "AD": 4,
        "CS": 5,
    }

class BotType(int):
    RESERVED = 0
    OFFICIAL = 1
    LINE_AT_0 = 2
    LINE_AT = 3

    _VALUES_TO_NAMES = {
        0: "RESERVED",
        1: "OFFICIAL",
        2: "LINE_AT_0",
        3: "LINE_AT",
    }

    _NAMES_TO_VALUES = {
        "RESERVED": 0,
        "OFFICIAL": 1,
        "LINE_AT_0": 2,
        "LINE_AT": 3,
    }

class BuddyOnAirLabel(int):
    ON_AIR = 0
    LIVE = 1

    _VALUES_TO_NAMES = {
        0: "ON_AIR",
        1: "LIVE",
    }

    _NAMES_TO_VALUES = {
        "ON_AIR": 0,
        "LIVE": 1,
    }

class BuddyBannerLinkType(int):
    BUDDY_BANNER_LINK_HIDDEN = 0
    BUDDY_BANNER_LINK_MID = 1
    BUDDY_BANNER_LINK_URL = 2

    _VALUES_TO_NAMES = {
        0: "BUDDY_BANNER_LINK_HIDDEN",
        1: "BUDDY_BANNER_LINK_MID",
        2: "BUDDY_BANNER_LINK_URL",
    }

    _NAMES_TO_VALUES = {
        "BUDDY_BANNER_LINK_HIDDEN": 0,
        "BUDDY_BANNER_LINK_MID": 1,
        "BUDDY_BANNER_LINK_URL": 2,
    }

class BuddyOnAirType(int):
    NORMAL = 0
    LIVE = 1
    VOIP = 2

    _VALUES_TO_NAMES = {
        0: "NORMAL",
        1: "LIVE",
        2: "VOIP",
    }

    _NAMES_TO_VALUES = {
        "NORMAL": 0,
        "LIVE": 1,
        "VOIP": 2,
    }

class Diff(int):
    ADDED = 0
    UPDATED = 1
    REMOVED = 2

    _VALUES_TO_NAMES = {
        0: "ADDED",
        1: "UPDATED",
        2: "REMOVED",
    }

    _NAMES_TO_VALUES = {
        "ADDED": 0,
        "UPDATED": 1,
        "REMOVED": 2,
    }

class ReportType(int):
    ADVERTISING = 1
    GENDER_HARASSMENT = 2
    HARASSMENT = 3
    OTHER = 4

    _VALUES_TO_NAMES = {
        1: "ADVERTISING",
        2: "GENDER_HARASSMENT",
        3: "HARASSMENT",
        4: "OTHER",
    }

    _NAMES_TO_VALUES = {
        "ADVERTISING": 1,
        "GENDER_HARASSMENT": 2,
        "HARASSMENT": 3,
        "OTHER": 4,
    }

class SyncTriggerReason(int):
    OTHER = 0
    REVISION_GAP_TOO_LARGE = 1
    OPERATION_EXPIRED = 2

    _VALUES_TO_NAMES = {
        0: "OTHER",
        1: "REVISION_GAP_TOO_LARGE",
        2: "OPERATION_EXPIRED",
    }

    _NAMES_TO_VALUES = {
        "OTHER": 0,
        "REVISION_GAP_TOO_LARGE": 1,
        "OPERATION_EXPIRED": 2,
    }

class ReportCategory(int):
    PUSH_NORMAL_PLAIN = 0
    PUSH_NORMAL_E2EE = 1
    PUSH_VOIP_PLAIN = 2
    PUSH_VOIP_E2EE = 3

    _VALUES_TO_NAMES = {
        0: "PUSH_NORMAL_PLAIN",
        1: "PUSH_NORMAL_E2EE",
        2: "PUSH_VOIP_PLAIN",
        3: "PUSH_VOIP_E2EE",
    }

    _NAMES_TO_VALUES = {
        "PUSH_NORMAL_PLAIN": 0,
        "PUSH_NORMAL_E2EE": 1,
        "PUSH_VOIP_PLAIN": 2,
        "PUSH_VOIP_E2EE": 3,
    }

class BuddyResultState(int):
    ACCEPTED = 1
    SUCCEEDED = 2
    FAILED = 3
    CANCELLED = 4
    NOTIFY_FAILED = 5
    STORING = 11
    UPLOADING = 21
    NOTIFYING = 31
    REMOVING_SUBSCRIPTION = 41
    UNREGISTERING_ACCOUNT = 42
    NOTIFYING_LEAVE_CHAT = 43

    _VALUES_TO_NAMES = {
        1: "ACCEPTED",
        2: "SUCCEEDED",
        3: "FAILED",
        4: "CANCELLED",
        5: "NOTIFY_FAILED",
        11: "STORING",
        21: "UPLOADING",
        31: "NOTIFYING",
        41: "REMOVING_SUBSCRIPTION",
        42: "UNREGISTERING_ACCOUNT",
        43: "NOTIFYING_LEAVE_CHAT",
    }

    _NAMES_TO_VALUES = {
        "ACCEPTED": 1,
        "SUCCEEDED": 2,
        "FAILED": 3,
        "CANCELLED": 4,
        "NOTIFY_FAILED": 5,
        "STORING": 11,
        "UPLOADING": 21,
        "NOTIFYING": 31,
        "REMOVING_SUBSCRIPTION": 41,
        "UNREGISTERING_ACCOUNT": 42,
        "NOTIFYING_LEAVE_CHAT": 43,
    }

class BuddySearchRequestSource(int):
    NA = 0
    FRIEND_VIEW = 1
    OFFICIAL_ACCOUNT_VIEW = 2

    _VALUES_TO_NAMES = {
        0: "NA",
        1: "FRIEND_VIEW",
        2: "OFFICIAL_ACCOUNT_VIEW",
    }

    _NAMES_TO_VALUES = {
        "NA": 0,
        "FRIEND_VIEW": 1,
        "OFFICIAL_ACCOUNT_VIEW": 2,
    }

class CarrierCode(int):
    NOT_SPECIFIED = 0
    JP_DOCOMO = 1
    JP_AU = 2
    JP_SOFTBANK = 3
    JP_DOCOMO_LINE = 4
    KR_SKT = 17
    KR_KT = 18
    KR_LGT = 19

    _VALUES_TO_NAMES = {
        0: "NOT_SPECIFIED",
        1: "JP_DOCOMO",
        2: "JP_AU",
        3: "JP_SOFTBANK",
        4: "JP_DOCOMO_LINE",
        17: "KR_SKT",
        18: "KR_KT",
        19: "KR_LGT",
    }

    _NAMES_TO_VALUES = {
        "NOT_SPECIFIED": 0,
        "JP_DOCOMO": 1,
        "JP_AU": 2,
        "JP_SOFTBANK": 3,
        "JP_DOCOMO_LINE": 4,
        "KR_SKT": 17,
        "KR_KT": 18,
        "KR_LGT": 19,
    }

class ChannelConfiguration(int):
    MESSAGE = 0
    MESSAGE_NOTIFICATION = 1
    NOTIFICATION_CENTER = 2

    _VALUES_TO_NAMES = {
        0: "MESSAGE",
        1: "MESSAGE_NOTIFICATION",
        2: "NOTIFICATION_CENTER",
    }

    _NAMES_TO_VALUES = {
        "MESSAGE": 0,
        "MESSAGE_NOTIFICATION": 1,
        "NOTIFICATION_CENTER": 2,
    }

class ChannelPermission(int):
    PROFILE = 0
    FRIENDS = 1
    GROUP = 2

    _VALUES_TO_NAMES = {
        0: "PROFILE",
        1: "FRIENDS",
        2: "GROUP",
    }

    _NAMES_TO_VALUES = {
        "PROFILE": 0,
        "FRIENDS": 1,
        "GROUP": 2,
    }

class ChannelFeatureLicense(int):
    BLE_LCS_API_USABLE = 26
    PROHIBIT_MINIMIZE_CHANNEL_BROWSER = 27
    ALLOW_IOS_WEBKIT = 28

    _VALUES_TO_NAMES = {
        26: "BLE_LCS_API_USABLE",
        27: "PROHIBIT_MINIMIZE_CHANNEL_BROWSER",
        28: "ALLOW_IOS_WEBKIT",
    }

    _NAMES_TO_VALUES = {
        "BLE_LCS_API_USABLE": 26,
        "PROHIBIT_MINIMIZE_CHANNEL_BROWSER": 27,
        "ALLOW_IOS_WEBKIT": 28,
    }

class ChannelErrorCode(int):
    ILLEGAL_ARGUMENT = 0
    INTERNAL_ERROR = 1
    CONNECTION_ERROR = 2
    AUTHENTICATIONI_FAILED = 3
    NEED_PERMISSION_APPROVAL = 4
    COIN_NOT_USABLE = 5
    WEBVIEW_NOT_ALLOWED = 6

    _VALUES_TO_NAMES = {
        0: "ILLEGAL_ARGUMENT",
        1: "INTERNAL_ERROR",
        2: "CONNECTION_ERROR",
        3: "AUTHENTICATIONI_FAILED",
        4: "NEED_PERMISSION_APPROVAL",
        5: "COIN_NOT_USABLE",
        6: "WEBVIEW_NOT_ALLOWED",
    }

    _NAMES_TO_VALUES = {
        "ILLEGAL_ARGUMENT": 0,
        "INTERNAL_ERROR": 1,
        "CONNECTION_ERROR": 2,
        "AUTHENTICATIONI_FAILED": 3,
        "NEED_PERMISSION_APPROVAL": 4,
        "COIN_NOT_USABLE": 5,
        "WEBVIEW_NOT_ALLOWED": 6,
    }

class ChannelSyncType(int):
    SYNC = 0
    REMOVE = 1
    REMOVE_ALL = 2

    _VALUES_TO_NAMES = {
        0: "SYNC",
        1: "REMOVE",
        2: "REMOVE_ALL",
    }

    _NAMES_TO_VALUES = {
        "SYNC": 0,
        "REMOVE": 1,
        "REMOVE_ALL": 2,
    }

class LoginType(int):
    ID_CREDENTIAL = 0
    QRCODE = 1
    ID_CREDENTIAL_WITH_E2EE = 2

    _VALUES_TO_NAMES = {
        0: "ID_CREDENTIAL",
        1: "QRCODE",
        2: "ID_CREDENTIAL_WITH_E2EE",
    }

    _NAMES_TO_VALUES = {
        "ID_CREDENTIAL": 0,
        "QRCODE": 1,
        "ID_CREDENTIAL_WITH_E2EE": 2,
    }

class ContactAttribute(int):
    CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL = 1
    CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL = 2
    CONTACT_ATTRIBUTE_CAPABLE_MY_HOME = 16
    CONTACT_ATTRIBUTE_CAPABLE_BUDDY = 32

    _VALUES_TO_NAMES = {
        1: "CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL",
        2: "CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL",
        16: "CONTACT_ATTRIBUTE_CAPABLE_MY_HOME",
        32: "CONTACT_ATTRIBUTE_CAPABLE_BUDDY",
    }

    _NAMES_TO_VALUES = {
        "CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL": 1,
        "CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL": 2,
        "CONTACT_ATTRIBUTE_CAPABLE_MY_HOME": 16,
        "CONTACT_ATTRIBUTE_CAPABLE_BUDDY": 32,
    }

class ContactCategory(int):
    NORMAL = 0
    RECOMMEND = 1

    _VALUES_TO_NAMES = {
        0: "NORMAL",
        1: "RECOMMEND",
    }

    _NAMES_TO_VALUES = {
        "NORMAL": 0,
        "RECOMMEND": 1,
    }

class ContactRelation(int):
    ONEWAY = 0
    BOTH = 1
    NOT_REGISTERED = 2

    _VALUES_TO_NAMES = {
        0: "ONEWAY",
        1: "BOTH",
        2: "NOT_REGISTERED",
    }

    _NAMES_TO_VALUES = {
        "ONEWAY": 0,
        "BOTH": 1,
        "NOT_REGISTERED": 2,
    }

class AsymmetricKeyAlgorithm(int):
    ASYMMETRIC_KEY_ALGORITHM_RSA = 1
    ASYMMETRIC_KEY_ALGORITHM_ECDH = 2

    _VALUES_TO_NAMES = {
        1: "ASYMMETRIC_KEY_ALGORITHM_RSA",
        2: "ASYMMETRIC_KEY_ALGORITHM_ECDH",
    }

    _NAMES_TO_VALUES = {
        "ASYMMETRIC_KEY_ALGORITHM_RSA": 1,
        "ASYMMETRIC_KEY_ALGORITHM_ECDH": 2,
    }

class ContactSetting(int):
    CONTACT_SETTING_NOTIFICATION_DISABLE = 1
    CONTACT_SETTING_DISPLAY_NAME_OVERRIDE = 2
    CONTACT_SETTING_CONTACT_HIDE = 4
    CONTACT_SETTING_FAVORITE = 8
    CONTACT_SETTING_DELETE = 16

    _VALUES_TO_NAMES = {
        1: "CONTACT_SETTING_NOTIFICATION_DISABLE",
        2: "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE",
        4: "CONTACT_SETTING_CONTACT_HIDE",
        8: "CONTACT_SETTING_FAVORITE",
        16: "CONTACT_SETTING_DELETE",
    }

    _NAMES_TO_VALUES = {
        "CONTACT_SETTING_NOTIFICATION_DISABLE": 1,
        "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE": 2,
        "CONTACT_SETTING_CONTACT_HIDE": 4,
        "CONTACT_SETTING_FAVORITE": 8,
        "CONTACT_SETTING_DELETE": 16,
    }

class ContactStatus(int):
    UNSPECIFIED = 0
    FRIEND = 1
    FRIEND_BLOCKED = 2
    RECOMMEND = 3
    RECOMMEND_BLOCKED = 4
    DELETED = 5
    DELETED_BLOCKED = 6

    _VALUES_TO_NAMES = {
        0: "UNSPECIFIED",
        1: "FRIEND",
        2: "FRIEND_BLOCKED",
        3: "RECOMMEND",
        4: "RECOMMEND_BLOCKED",
        5: "DELETED",
        6: "DELETED_BLOCKED",
    }

    _NAMES_TO_VALUES = {
        "UNSPECIFIED": 0,
        "FRIEND": 1,
        "FRIEND_BLOCKED": 2,
        "RECOMMEND": 3,
        "RECOMMEND_BLOCKED": 4,
        "DELETED": 5,
        "DELETED_BLOCKED": 6,
    }

class ContactType(int):
    MID = 0
    PHONE = 1
    EMAIL = 2
    USERID = 3
    PROXIMITY = 4
    GROUP = 5
    USER = 6
    QRCODE = 7
    PROMOTION_BOT = 8
    CONTACT_MESSAGE = 9
    FRIEND_REQUEST = 10
    REPAIR = 128
    FACEBOOK = 2305
    SINA = 2306
    RENREN = 2307
    FEIXIN = 2308
    BBM = 2309
    BEACON = 11

    _VALUES_TO_NAMES = {
        0: "MID",
        1: "PHONE",
        2: "EMAIL",
        3: "USERID",
        4: "PROXIMITY",
        5: "GROUP",
        6: "USER",
        7: "QRCODE",
        8: "PROMOTION_BOT",
        9: "CONTACT_MESSAGE",
        10: "FRIEND_REQUEST",
        128: "REPAIR",
        2305: "FACEBOOK",
        2306: "SINA",
        2307: "RENREN",
        2308: "FEIXIN",
        2309: "BBM",
        11: "BEACON",
    }

    _NAMES_TO_VALUES = {
        "MID": 0,
        "PHONE": 1,
        "EMAIL": 2,
        "USERID": 3,
        "PROXIMITY": 4,
        "GROUP": 5,
        "USER": 6,
        "QRCODE": 7,
        "PROMOTION_BOT": 8,
        "CONTACT_MESSAGE": 9,
        "FRIEND_REQUEST": 10,
        "REPAIR": 128,
        "FACEBOOK": 2305,
        "SINA": 2306,
        "RENREN": 2307,
        "FEIXIN": 2308,
        "BBM": 2309,
        "BEACON": 11,
    }

class GroupPreferenceAttribute(int):
    INVITATION_TICKET = 1
    FAVORITE_TIMESTAMP = 2

    _VALUES_TO_NAMES = {
        1: "INVITATION_TICKET",
        2: "FAVORITE_TIMESTAMP",
    }

    _NAMES_TO_VALUES = {
        "INVITATION_TICKET": 1,
        "FAVORITE_TIMESTAMP": 2,
    }

class ContentType(int):
    NONE = 0
    IMAGE = 1
    VIDEO = 2
    AUDIO = 3
    HTML = 4
    PDF = 5
    CALL = 6
    STICKER = 7
    PRESENCE = 8
    GIFT = 9
    GROUPBOARD = 10
    APPLINK = 11
    LINK = 12
    CONTACT = 13
    FILE = 14
    LOCATION = 15
    POSTNOTIFICATION = 16
    RICH = 17
    CHATEVENT = 18
    MUSIC = 19
    PAYMENT = 20
    EXTIMAGE = 21

    _VALUES_TO_NAMES = {
        0: "NONE",
        1: "IMAGE",
        2: "VIDEO",
        3: "AUDIO",
        4: "HTML",
        5: "PDF",
        6: "CALL",
        7: "STICKER",
        8: "PRESENCE",
        9: "GIFT",
        10: "GROUPBOARD",
        11: "APPLINK",
        12: "LINK",
        13: "CONTACT",
        14: "FILE",
        15: "LOCATION",
        16: "POSTNOTIFICATION",
        17: "RICH",
        18: "CHATEVENT",
        19: "MUSIC",
        20: "PAYMENT",
        21: "EXTIMAGE",
    }

    _NAMES_TO_VALUES = {
        "NONE": 0,
        "IMAGE": 1,
        "VIDEO": 2,
        "AUDIO": 3,
        "HTML": 4,
        "PDF": 5,
        "CALL": 6,
        "STICKER": 7,
        "PRESENCE": 8,
        "GIFT": 9,
        "GROUPBOARD": 10,
        "APPLINK": 11,
        "LINK": 12,
        "CONTACT": 13,
        "FILE": 14,
        "LOCATION": 15,
        "POSTNOTIFICATION": 16,
        "RICH": 17,
        "CHATEVENT": 18,
        "MUSIC": 19,
        "PAYMENT": 20,
        "EXTIMAGE": 21,
    }

class MessageRelationType(int):
    FORWARD = 0
    AUTO_REPLY = 1
    SUBORDINATE = 2

    _VALUES_TO_NAMES = {
        0: "FORWARD",
        1: "AUTO_REPLY",
        2: "SUBORDINATE",
    }

    _NAMES_TO_VALUES = {
        "FORWARD": 0,
        "AUTO_REPLY": 1,
        "SUBORDINATE": 2,
    }

class CustomMode(int):
    PROMOTION_FRIENDS_INVITE = 1
    CAPABILITY_SERVER_SIDE_SMS = 2
    LINE_CLIENT_ANALYTICS_CONFIGURATION = 3

    _VALUES_TO_NAMES = {
        1: "PROMOTION_FRIENDS_INVITE",
        2: "CAPABILITY_SERVER_SIDE_SMS",
        3: "LINE_CLIENT_ANALYTICS_CONFIGURATION",
    }

    _NAMES_TO_VALUES = {
        "PROMOTION_FRIENDS_INVITE": 1,
        "CAPABILITY_SERVER_SIDE_SMS": 2,
        "LINE_CLIENT_ANALYTICS_CONFIGURATION": 3,
    }

class RoomAttribute(int):
    ALL = 255
    NOTIFICATION_SETTING = 1

    _VALUES_TO_NAMES = {
        255: "ALL",
        1: "NOTIFICATION_SETTING",
    }

    _NAMES_TO_VALUES = {
        "ALL": 255,
        "NOTIFICATION_SETTING": 1,
    }

class UserStatus(int):
    NORMAL = 0
    UNBOUND = 1
    UNREGISTERED = 2

    _VALUES_TO_NAMES = {
        0: "NORMAL",
        1: "UNBOUND",
        2: "UNREGISTERED",
    }

    _NAMES_TO_VALUES = {
        "NORMAL": 0,
        "UNBOUND": 1,
        "UNREGISTERED": 2,
    }

class EmailConfirmationStatus(int):
    NOT_SPECIFIED = 0
    NOT_YET = 1
    DONE = 3
    NEED_ENFORCED_INPUT = 4

    _VALUES_TO_NAMES = {
        0: "NOT_SPECIFIED",
        1: "NOT_YET",
        3: "DONE",
        4: "NEED_ENFORCED_INPUT",
    }

    _NAMES_TO_VALUES = {
        "NOT_SPECIFIED": 0,
        "NOT_YET": 1,
        "DONE": 3,
        "NEED_ENFORCED_INPUT": 4,
    }

class AccountMigrationPincodeType(int):
    NOT_APPLICABLE = 0
    NOT_SET = 1
    SET = 2
    NEED_ENFORCED_INPUT = 3

    _VALUES_TO_NAMES = {
        0: "NOT_APPLICABLE",
        1: "NOT_SET",
        2: "SET",
        3: "NEED_ENFORCED_INPUT",
    }

    _NAMES_TO_VALUES = {
        "NOT_APPLICABLE": 0,
        "NOT_SET": 1,
        "SET": 2,
        "NEED_ENFORCED_INPUT": 3,
    }

class AccountMigrationCheckType(int):
    SKIP = 0
    PINCODE = 1
    SECURITY_CENTER = 2

    _VALUES_TO_NAMES = {
        0: "SKIP",
        1: "PINCODE",
        2: "SECURITY_CENTER",
    }

    _NAMES_TO_VALUES = {
        "SKIP": 0,
        "PINCODE": 1,
        "SECURITY_CENTER": 2,
    }

class SecurityCenterSettingsType(int):
    NOT_APPLICABLE = 0
    NOT_SET = 1
    SET = 2
    NEED_ENFORCED_INPUT = 3

    _VALUES_TO_NAMES = {
        0: "NOT_APPLICABLE",
        1: "NOT_SET",
        2: "SET",
        3: "NEED_ENFORCED_INPUT",
    }

    _NAMES_TO_VALUES = {
        "NOT_APPLICABLE": 0,
        "NOT_SET": 1,
        "SET": 2,
        "NEED_ENFORCED_INPUT": 3,
    }

class EmailConfirmationType(int):
    SERVER_SIDE_EMAIL = 0
    CLIENT_SIDE_EMAIL = 1

    _VALUES_TO_NAMES = {
        0: "SERVER_SIDE_EMAIL",
        1: "CLIENT_SIDE_EMAIL",
    }

    _NAMES_TO_VALUES = {
        "SERVER_SIDE_EMAIL": 0,
        "CLIENT_SIDE_EMAIL": 1,
    }

class SquareChatAnnouncementType(int):
    TEXT_MESSAGE = 0

    _VALUES_TO_NAMES = {
        0: "TEXT_MESSAGE",
    }

    _NAMES_TO_VALUES = {
        "TEXT_MESSAGE": 0,
    }

class SquareChatAttribute(int):
    NAME = 2
    SQUARE_CHAT_IMAGE = 3
    STATE = 4

    _VALUES_TO_NAMES = {
        2: "NAME",
        3: "SQUARE_CHAT_IMAGE",
        4: "STATE",
    }

    _NAMES_TO_VALUES = {
        "NAME": 2,
        "SQUARE_CHAT_IMAGE": 3,
        "STATE": 4,
    }

class SquareMemberAttribute(int):
    DISPLAY_NAME = 1
    PROFILE_IMAGE = 2
    ABLE_TO_RECEIVE_MESSAGE = 3
    MEMBERSHIP_STATE = 5
    ROLE = 6
    PREFERENCE = 7

    _VALUES_TO_NAMES = {
        1: "DISPLAY_NAME",
        2: "PROFILE_IMAGE",
        3: "ABLE_TO_RECEIVE_MESSAGE",
        5: "MEMBERSHIP_STATE",
        6: "ROLE",
        7: "PREFERENCE",
    }

    _NAMES_TO_VALUES = {
        "DISPLAY_NAME": 1,
        "PROFILE_IMAGE": 2,
        "ABLE_TO_RECEIVE_MESSAGE": 3,
        "MEMBERSHIP_STATE": 5,
        "ROLE": 6,
        "PREFERENCE": 7,
    }

class SquareMemberRelationAttribute(int):
    BLOCKED = 1

    _VALUES_TO_NAMES = {
        1: "BLOCKED",
    }

    _NAMES_TO_VALUES = {
        "BLOCKED": 1,
    }

class SquarePreferenceAttribute(int):
    FAVORITE = 1
    NOTI_FOR_NEW_JOIN_REQUEST = 2

    _VALUES_TO_NAMES = {
        1: "FAVORITE",
        2: "NOTI_FOR_NEW_JOIN_REQUEST",
    }

    _NAMES_TO_VALUES = {
        "FAVORITE": 1,
        "NOTI_FOR_NEW_JOIN_REQUEST": 2,
    }

class SquareState(int):
    ALIVE = 0
    DELETED = 1
    SUSPENDED = 2

    _VALUES_TO_NAMES = {
        0: "ALIVE",
        1: "DELETED",
        2: "SUSPENDED",
    }

    _NAMES_TO_VALUES = {
        "ALIVE": 0,
        "DELETED": 1,
        "SUSPENDED": 2,
    }

class CommitMessageResultCode(int):
    DELIVERED = 0
    DELIVERY_SKIPPED = 1
    DELIVERY_RESTRICTED = 2

    _VALUES_TO_NAMES = {
        0: "DELIVERED",
        1: "DELIVERY_SKIPPED",
        2: "DELIVERY_RESTRICTED",
    }

    _NAMES_TO_VALUES = {
        "DELIVERED": 0,
        "DELIVERY_SKIPPED": 1,
        "DELIVERY_RESTRICTED": 2,
    }

class ErrorCode(int):
    ILLEGAL_ARGUMENT = 0
    AUTHENTICATION_FAILED = 1
    DB_FAILED = 2
    INVALID_STATE = 3
    EXCESSIVE_ACCESS = 4
    NOT_FOUND = 5
    INVALID_MID = 9
    NOT_A_MEMBER = 10
    INVALID_LENGTH = 6
    NOT_AVAILABLE_USER = 7
    NOT_AUTHORIZED_DEVICE = 8
    NOT_AUTHORIZED_SESSION = 14
    INCOMPATIBLE_APP_VERSION = 11
    NOT_READY = 12
    NOT_AVAILABLE_SESSION = 13
    SYSTEM_ERROR = 15
    NO_AVAILABLE_VERIFICATION_METHOD = 16
    NOT_AUTHENTICATED = 17
    INVALID_IDENTITY_CREDENTIAL = 18
    NOT_AVAILABLE_IDENTITY_IDENTIFIER = 19
    INTERNAL_ERROR = 20
    NO_SUCH_IDENTITY_IDENFIER = 21
    DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY = 22
    ILLEGAL_IDENTITY_CREDENTIAL = 23
    UNKNOWN_CHANNEL = 24
    NO_SUCH_MESSAGE_BOX = 25
    NOT_AVAILABLE_MESSAGE_BOX = 26
    CHANNEL_DOES_NOT_MATCH = 27
    NOT_YOUR_MESSAGE = 28
    MESSAGE_DEFINED_ERROR = 29
    USER_CANNOT_ACCEPT_PRESENTS = 30
    USER_NOT_STICKER_OWNER = 32
    MAINTENANCE_ERROR = 33
    ACCOUNT_NOT_MATCHED = 34
    ABUSE_BLOCK = 35
    NOT_FRIEND = 36
    NOT_ALLOWED_CALL = 37
    BLOCK_FRIEND = 38
    INCOMPATIBLE_VOIP_VERSION = 39
    INVALID_SNS_ACCESS_TOKEN = 40
    EXTERNAL_SERVICE_NOT_AVAILABLE = 41
    NOT_ALLOWED_ADD_CONTACT = 42
    NOT_CERTIFICATED = 43
    NOT_ALLOWED_SECONDARY_DEVICE = 44
    INVALID_PIN_CODE = 45
    NOT_FOUND_IDENTITY_CREDENTIAL = 46
    EXCEED_FILE_MAX_SIZE = 47
    EXCEED_DAILY_QUOTA = 48
    NOT_SUPPORT_SEND_FILE = 49
    MUST_UPGRADE = 50
    NOT_AVAILABLE_PIN_CODE_SESSION = 51
    EXPIRED_REVISION = 52
    NOT_YET_PHONE_NUMBER = 54
    BAD_CALL_NUMBER = 55
    UNAVAILABLE_CALL_NUMBER = 56
    NOT_SUPPORT_CALL_SERVICE = 57
    CONGESTION_CONTROL = 58
    NO_BALANCE = 59
    NOT_PERMITTED_CALLER_ID = 60
    NO_CALLER_ID_LIMIT_EXCEEDED = 61
    CALLER_ID_VERIFICATION_REQUIRED = 62
    NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 63
    MESSAGE_NOT_FOUND = 64
    INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT = 65
    ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED = 66
    ACCOUNT_MIGRATION_PINCODE_BLOCKED = 67
    INVALID_PASSWORD_FORMAT = 69
    FEATURE_RESTRICTED = 70
    MESSAGE_NOT_DESTRUCTIBLE = 71
    PAID_CALL_REDEEM_FAILED = 72
    PREVENTED_JOIN_BY_TICKET = 73
    SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT = 75
    SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY = 76
    SECURITY_CENTER_NOT_VERIFIED = 77
    SECURITY_CENTER_BLOCKED_BY_SETTING = 78
    SECURITY_CENTER_BLOCKED = 79
    TALK_PROXY_EXCEPTION = 80
    E2EE_INVALID_PROTOCOL = 81
    E2EE_RETRY_ENCRYPT = 82
    E2EE_UPDATE_SENDER_KEY = 83
    E2EE_UPDATE_RECEIVER_KEY = 84
    E2EE_INVALID_ARGUMENT = 85
    E2EE_INVALID_VERSION = 86
    E2EE_SENDER_DISABLED = 87
    E2EE_RECEIVER_DISABLED = 88
    E2EE_SENDER_NOT_ALLOWED = 89
    E2EE_RECEIVER_NOT_ALLOWED = 90
    E2EE_RESEND_FAIL = 91
    E2EE_RESEND_OK = 92
    HITOKOTO_BACKUP_NO_AVAILABLE_DATA = 93
    E2EE_UPDATE_PRIMARY_DEVICE = 94
    SUCCESS = 95
    CANCEL = 96
    E2EE_PRIMARY_NOT_SUPPORT = 97
    E2EE_RETRY_PLAIN = 98
    E2EE_RECREATE_GROUP_KEY = 99
    E2EE_GROUP_TOO_MANY_MEMBERS = 100
    SERVER_BUSY = 101
    NOT_ALLOWED_ADD_FOLLOW = 102
    INCOMING_FRIEND_REQUEST_LIMIT = 103
    OUTGOING_FRIEND_REQUEST_LIMIT = 104
    OUTGOING_FRIEND_REQUEST_QUOTA = 105
    DUPLICATED = 106
    BANNED = 107

    _VALUES_TO_NAMES = {
        0: "ILLEGAL_ARGUMENT",
        1: "AUTHENTICATION_FAILED",
        2: "DB_FAILED",
        3: "INVALID_STATE",
        4: "EXCESSIVE_ACCESS",
        5: "NOT_FOUND",
        9: "INVALID_MID",
        10: "NOT_A_MEMBER",
        6: "INVALID_LENGTH",
        7: "NOT_AVAILABLE_USER",
        8: "NOT_AUTHORIZED_DEVICE",
        14: "NOT_AUTHORIZED_SESSION",
        11: "INCOMPATIBLE_APP_VERSION",
        12: "NOT_READY",
        13: "NOT_AVAILABLE_SESSION",
        15: "SYSTEM_ERROR",
        16: "NO_AVAILABLE_VERIFICATION_METHOD",
        17: "NOT_AUTHENTICATED",
        18: "INVALID_IDENTITY_CREDENTIAL",
        19: "NOT_AVAILABLE_IDENTITY_IDENTIFIER",
        20: "INTERNAL_ERROR",
        21: "NO_SUCH_IDENTITY_IDENFIER",
        22: "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY",
        23: "ILLEGAL_IDENTITY_CREDENTIAL",
        24: "UNKNOWN_CHANNEL",
        25: "NO_SUCH_MESSAGE_BOX",
        26: "NOT_AVAILABLE_MESSAGE_BOX",
        27: "CHANNEL_DOES_NOT_MATCH",
        28: "NOT_YOUR_MESSAGE",
        29: "MESSAGE_DEFINED_ERROR",
        30: "USER_CANNOT_ACCEPT_PRESENTS",
        32: "USER_NOT_STICKER_OWNER",
        33: "MAINTENANCE_ERROR",
        34: "ACCOUNT_NOT_MATCHED",
        35: "ABUSE_BLOCK",
        36: "NOT_FRIEND",
        37: "NOT_ALLOWED_CALL",
        38: "BLOCK_FRIEND",
        39: "INCOMPATIBLE_VOIP_VERSION",
        40: "INVALID_SNS_ACCESS_TOKEN",
        41: "EXTERNAL_SERVICE_NOT_AVAILABLE",
        42: "NOT_ALLOWED_ADD_CONTACT",
        43: "NOT_CERTIFICATED",
        44: "NOT_ALLOWED_SECONDARY_DEVICE",
        45: "INVALID_PIN_CODE",
        46: "NOT_FOUND_IDENTITY_CREDENTIAL",
        47: "EXCEED_FILE_MAX_SIZE",
        48: "EXCEED_DAILY_QUOTA",
        49: "NOT_SUPPORT_SEND_FILE",
        50: "MUST_UPGRADE",
        51: "NOT_AVAILABLE_PIN_CODE_SESSION",
        52: "EXPIRED_REVISION",
        54: "NOT_YET_PHONE_NUMBER",
        55: "BAD_CALL_NUMBER",
        56: "UNAVAILABLE_CALL_NUMBER",
        57: "NOT_SUPPORT_CALL_SERVICE",
        58: "CONGESTION_CONTROL",
        59: "NO_BALANCE",
        60: "NOT_PERMITTED_CALLER_ID",
        61: "NO_CALLER_ID_LIMIT_EXCEEDED",
        62: "CALLER_ID_VERIFICATION_REQUIRED",
        63: "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED",
        64: "MESSAGE_NOT_FOUND",
        65: "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT",
        66: "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED",
        67: "ACCOUNT_MIGRATION_PINCODE_BLOCKED",
        69: "INVALID_PASSWORD_FORMAT",
        70: "FEATURE_RESTRICTED",
        71: "MESSAGE_NOT_DESTRUCTIBLE",
        72: "PAID_CALL_REDEEM_FAILED",
        73: "PREVENTED_JOIN_BY_TICKET",
        75: "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT",
        76: "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY",
        77: "SECURITY_CENTER_NOT_VERIFIED",
        78: "SECURITY_CENTER_BLOCKED_BY_SETTING",
        79: "SECURITY_CENTER_BLOCKED",
        80: "TALK_PROXY_EXCEPTION",
        81: "E2EE_INVALID_PROTOCOL",
        82: "E2EE_RETRY_ENCRYPT",
        83: "E2EE_UPDATE_SENDER_KEY",
        84: "E2EE_UPDATE_RECEIVER_KEY",
        85: "E2EE_INVALID_ARGUMENT",
        86: "E2EE_INVALID_VERSION",
        87: "E2EE_SENDER_DISABLED",
        88: "E2EE_RECEIVER_DISABLED",
        89: "E2EE_SENDER_NOT_ALLOWED",
        90: "E2EE_RECEIVER_NOT_ALLOWED",
        91: "E2EE_RESEND_FAIL",
        92: "E2EE_RESEND_OK",
        93: "HITOKOTO_BACKUP_NO_AVAILABLE_DATA",
        94: "E2EE_UPDATE_PRIMARY_DEVICE",
        95: "SUCCESS",
        96: "CANCEL",
        97: "E2EE_PRIMARY_NOT_SUPPORT",
        98: "E2EE_RETRY_PLAIN",
        99: "E2EE_RECREATE_GROUP_KEY",
        100: "E2EE_GROUP_TOO_MANY_MEMBERS",
        101: "SERVER_BUSY",
        102: "NOT_ALLOWED_ADD_FOLLOW",
        103: "INCOMING_FRIEND_REQUEST_LIMIT",
        104: "OUTGOING_FRIEND_REQUEST_LIMIT",
        105: "OUTGOING_FRIEND_REQUEST_QUOTA",
        106: "DUPLICATED",
        107: "BANNED",
    }

    _NAMES_TO_VALUES = {
        "ILLEGAL_ARGUMENT": 0,
        "AUTHENTICATION_FAILED": 1,
        "DB_FAILED": 2,
        "INVALID_STATE": 3,
        "EXCESSIVE_ACCESS": 4,
        "NOT_FOUND": 5,
        "INVALID_MID": 9,
        "NOT_A_MEMBER": 10,
        "INVALID_LENGTH": 6,
        "NOT_AVAILABLE_USER": 7,
        "NOT_AUTHORIZED_DEVICE": 8,
        "NOT_AUTHORIZED_SESSION": 14,
        "INCOMPATIBLE_APP_VERSION": 11,
        "NOT_READY": 12,
        "NOT_AVAILABLE_SESSION": 13,
        "SYSTEM_ERROR": 15,
        "NO_AVAILABLE_VERIFICATION_METHOD": 16,
        "NOT_AUTHENTICATED": 17,
        "INVALID_IDENTITY_CREDENTIAL": 18,
        "NOT_AVAILABLE_IDENTITY_IDENTIFIER": 19,
        "INTERNAL_ERROR": 20,
        "NO_SUCH_IDENTITY_IDENFIER": 21,
        "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY": 22,
        "ILLEGAL_IDENTITY_CREDENTIAL": 23,
        "UNKNOWN_CHANNEL": 24,
        "NO_SUCH_MESSAGE_BOX": 25,
        "NOT_AVAILABLE_MESSAGE_BOX": 26,
        "CHANNEL_DOES_NOT_MATCH": 27,
        "NOT_YOUR_MESSAGE": 28,
        "MESSAGE_DEFINED_ERROR": 29,
        "USER_CANNOT_ACCEPT_PRESENTS": 30,
        "USER_NOT_STICKER_OWNER": 32,
        "MAINTENANCE_ERROR": 33,
        "ACCOUNT_NOT_MATCHED": 34,
        "ABUSE_BLOCK": 35,
        "NOT_FRIEND": 36,
        "NOT_ALLOWED_CALL": 37,
        "BLOCK_FRIEND": 38,
        "INCOMPATIBLE_VOIP_VERSION": 39,
        "INVALID_SNS_ACCESS_TOKEN": 40,
        "EXTERNAL_SERVICE_NOT_AVAILABLE": 41,
        "NOT_ALLOWED_ADD_CONTACT": 42,
        "NOT_CERTIFICATED": 43,
        "NOT_ALLOWED_SECONDARY_DEVICE": 44,
        "INVALID_PIN_CODE": 45,
        "NOT_FOUND_IDENTITY_CREDENTIAL": 46,
        "EXCEED_FILE_MAX_SIZE": 47,
        "EXCEED_DAILY_QUOTA": 48,
        "NOT_SUPPORT_SEND_FILE": 49,
        "MUST_UPGRADE": 50,
        "NOT_AVAILABLE_PIN_CODE_SESSION": 51,
        "EXPIRED_REVISION": 52,
        "NOT_YET_PHONE_NUMBER": 54,
        "BAD_CALL_NUMBER": 55,
        "UNAVAILABLE_CALL_NUMBER": 56,
        "NOT_SUPPORT_CALL_SERVICE": 57,
        "CONGESTION_CONTROL": 58,
        "NO_BALANCE": 59,
        "NOT_PERMITTED_CALLER_ID": 60,
        "NO_CALLER_ID_LIMIT_EXCEEDED": 61,
        "CALLER_ID_VERIFICATION_REQUIRED": 62,
        "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED": 63,
        "MESSAGE_NOT_FOUND": 64,
        "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT": 65,
        "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED": 66,
        "ACCOUNT_MIGRATION_PINCODE_BLOCKED": 67,
        "INVALID_PASSWORD_FORMAT": 69,
        "FEATURE_RESTRICTED": 70,
        "MESSAGE_NOT_DESTRUCTIBLE": 71,
        "PAID_CALL_REDEEM_FAILED": 72,
        "PREVENTED_JOIN_BY_TICKET": 73,
        "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT": 75,
        "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY": 76,
        "SECURITY_CENTER_NOT_VERIFIED": 77,
        "SECURITY_CENTER_BLOCKED_BY_SETTING": 78,
        "SECURITY_CENTER_BLOCKED": 79,
        "TALK_PROXY_EXCEPTION": 80,
        "E2EE_INVALID_PROTOCOL": 81,
        "E2EE_RETRY_ENCRYPT": 82,
        "E2EE_UPDATE_SENDER_KEY": 83,
        "E2EE_UPDATE_RECEIVER_KEY": 84,
        "E2EE_INVALID_ARGUMENT": 85,
        "E2EE_INVALID_VERSION": 86,
        "E2EE_SENDER_DISABLED": 87,
        "E2EE_RECEIVER_DISABLED": 88,
        "E2EE_SENDER_NOT_ALLOWED": 89,
        "E2EE_RECEIVER_NOT_ALLOWED": 90,
        "E2EE_RESEND_FAIL": 91,
        "E2EE_RESEND_OK": 92,
        "HITOKOTO_BACKUP_NO_AVAILABLE_DATA": 93,
        "E2EE_UPDATE_PRIMARY_DEVICE": 94,
        "SUCCESS": 95,
        "CANCEL": 96,
        "E2EE_PRIMARY_NOT_SUPPORT": 97,
        "E2EE_RETRY_PLAIN": 98,
        "E2EE_RECREATE_GROUP_KEY": 99,
        "E2EE_GROUP_TOO_MANY_MEMBERS": 100,
        "SERVER_BUSY": 101,
        "NOT_ALLOWED_ADD_FOLLOW": 102,
        "INCOMING_FRIEND_REQUEST_LIMIT": 103,
        "OUTGOING_FRIEND_REQUEST_LIMIT": 104,
        "OUTGOING_FRIEND_REQUEST_QUOTA": 105,
        "DUPLICATED": 106,
        "BANNED": 107,
    }

class FeatureType(int):
    OBS_VIDEO = 1
    OBS_GENERAL = 2

    _VALUES_TO_NAMES = {
        1: "OBS_VIDEO",
        2: "OBS_GENERAL",
    }

    _NAMES_TO_VALUES = {
        "OBS_VIDEO": 1,
        "OBS_GENERAL": 2,
    }

class GroupAttribute(int):
    NAME = 1
    PICTURE_STATUS = 2
    ALL = 255
    PREVENTED_JOIN_BY_TICKET = 4
    NOTIFICATION_SETTING = 8

    _VALUES_TO_NAMES = {
        1: "NAME",
        2: "PICTURE_STATUS",
        255: "ALL",
        4: "PREVENTED_JOIN_BY_TICKET",
        8: "NOTIFICATION_SETTING",
    }

    _NAMES_TO_VALUES = {
        "NAME": 1,
        "PICTURE_STATUS": 2,
        "ALL": 255,
        "PREVENTED_JOIN_BY_TICKET": 4,
        "NOTIFICATION_SETTING": 8,
    }

class IdentityProvider(int):
    UNKNOWN = 0
    LINE = 1
    NAVER_KR = 2
    LINE_PHONE = 3

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "LINE",
        2: "NAVER_KR",
        3: "LINE_PHONE",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "LINE": 1,
        "NAVER_KR": 2,
        "LINE_PHONE": 3,
    }

class LoginResultType(int):
    SUCCESS = 1
    REQUIRE_QRCODE = 2
    REQUIRE_DEVICE_CONFIRM = 3
    REQUIRE_SMS_CONFIRM = 4

    _VALUES_TO_NAMES = {
        1: "SUCCESS",
        2: "REQUIRE_QRCODE",
        3: "REQUIRE_DEVICE_CONFIRM",
        4: "REQUIRE_SMS_CONFIRM",
    }

    _NAMES_TO_VALUES = {
        "SUCCESS": 1,
        "REQUIRE_QRCODE": 2,
        "REQUIRE_DEVICE_CONFIRM": 3,
        "REQUIRE_SMS_CONFIRM": 4,
    }

class MessageOperationType(int):
    SEND_MESSAGE = 1
    RECEIVE_MESSAGE = 2
    READ_MESSAGE = 3
    NOTIFIED_READ_MESSAGE = 4
    NOTIFIED_JOIN_CHAT = 5
    FAILED_SEND_MESSAGE = 6
    SEND_CONTENT = 7
    SEND_CONTENT_RECEIPT = 8
    SEND_CHAT_REMOVED = 9
    REMOVE_ALL_MESSAGES = 10

    _VALUES_TO_NAMES = {
        1: "SEND_MESSAGE",
        2: "RECEIVE_MESSAGE",
        3: "READ_MESSAGE",
        4: "NOTIFIED_READ_MESSAGE",
        5: "NOTIFIED_JOIN_CHAT",
        6: "FAILED_SEND_MESSAGE",
        7: "SEND_CONTENT",
        8: "SEND_CONTENT_RECEIPT",
        9: "SEND_CHAT_REMOVED",
        10: "REMOVE_ALL_MESSAGES",
    }

    _NAMES_TO_VALUES = {
        "SEND_MESSAGE": 1,
        "RECEIVE_MESSAGE": 2,
        "READ_MESSAGE": 3,
        "NOTIFIED_READ_MESSAGE": 4,
        "NOTIFIED_JOIN_CHAT": 5,
        "FAILED_SEND_MESSAGE": 6,
        "SEND_CONTENT": 7,
        "SEND_CONTENT_RECEIPT": 8,
        "SEND_CHAT_REMOVED": 9,
        "REMOVE_ALL_MESSAGES": 10,
    }

class MIDType(int):
    USER = 0
    ROOM = 1
    GROUP = 2
    SQUARE = 3
    SQUARE_CHAT = 4
    SQUARE_MEMBER = 5
    BOT = 6

    _VALUES_TO_NAMES = {
        0: "USER",
        1: "ROOM",
        2: "GROUP",
        3: "SQUARE",
        4: "SQUARE_CHAT",
        5: "SQUARE_MEMBER",
        6: "BOT",
    }

    _NAMES_TO_VALUES = {
        "USER": 0,
        "ROOM": 1,
        "GROUP": 2,
        "SQUARE": 3,
        "SQUARE_CHAT": 4,
        "SQUARE_MEMBER": 5,
        "BOT": 6,
    }

class ServiceCode(int):
    UNKNOWN = 0
    TALK = 1
    SQUARE = 2

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "TALK",
        2: "SQUARE",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "TALK": 1,
        "SQUARE": 2,
    }

class FriendRequestDirection(int):
    INCOMING = 1
    OUTGOING = 2

    _VALUES_TO_NAMES = {
        1: "INCOMING",
        2: "OUTGOING",
    }

    _NAMES_TO_VALUES = {
        "INCOMING": 1,
        "OUTGOING": 2,
    }

class FriendRequestMethod(int):
    TIMELINE = 1
    NEARBY = 2
    SQUARE = 3

    _VALUES_TO_NAMES = {
        1: "TIMELINE",
        2: "NEARBY",
        3: "SQUARE",
    }

    _NAMES_TO_VALUES = {
        "TIMELINE": 1,
        "NEARBY": 2,
        "SQUARE": 3,
    }

class FriendRequestStatus(int):
    NONE = 0
    AVAILABLE = 1
    ALREADY_REQUESTED = 2
    UNAVAILABLE = 3

    _VALUES_TO_NAMES = {
        0: "NONE",
        1: "AVAILABLE",
        2: "ALREADY_REQUESTED",
        3: "UNAVAILABLE",
    }

    _NAMES_TO_VALUES = {
        "NONE": 0,
        "AVAILABLE": 1,
        "ALREADY_REQUESTED": 2,
        "UNAVAILABLE": 3,
    }

class ModificationType(int):
    ADD = 0
    REMOVE = 1
    MODIFY = 2

    _VALUES_TO_NAMES = {
        0: "ADD",
        1: "REMOVE",
        2: "MODIFY",
    }

    _NAMES_TO_VALUES = {
        "ADD": 0,
        "REMOVE": 1,
        "MODIFY": 2,
    }

class NotificationItemFetchMode(int):
    ALL = 0
    APPEND = 1

    _VALUES_TO_NAMES = {
        0: "ALL",
        1: "APPEND",
    }

    _NAMES_TO_VALUES = {
        "ALL": 0,
        "APPEND": 1,
    }

class NotificationQueueType(int):
    GLOBAL = 1
    MESSAGE = 2
    PRIMARY = 3

    _VALUES_TO_NAMES = {
        1: "GLOBAL",
        2: "MESSAGE",
        3: "PRIMARY",
    }

    _NAMES_TO_VALUES = {
        "GLOBAL": 1,
        "MESSAGE": 2,
        "PRIMARY": 3,
    }

class GroupCallMediaType(int):
    AUDIO = 1
    VIDEO = 2

    _VALUES_TO_NAMES = {
        1: "AUDIO",
        2: "VIDEO",
    }

    _NAMES_TO_VALUES = {
        "AUDIO": 1,
        "VIDEO": 2,
    }

class PersonalInfo(int):
    EMAIL = 0
    PHONE = 1
    BIRTHDAY = 2
    RAW_BIRTHDAY = 3

    _VALUES_TO_NAMES = {
        0: "EMAIL",
        1: "PHONE",
        2: "BIRTHDAY",
        3: "RAW_BIRTHDAY",
    }

    _NAMES_TO_VALUES = {
        "EMAIL": 0,
        "PHONE": 1,
        "BIRTHDAY": 2,
        "RAW_BIRTHDAY": 3,
    }

class NotificationStatus(int):
    NOTIFICATION_ITEM_EXIST = 1
    TIMELINE_ITEM_EXIST = 2
    NOTE_GROUP_NEW_ITEM_EXIST = 4
    TIMELINE_BUDDYGROUP_CHANGED = 8
    NOTE_ONE_TO_ONE_NEW_ITEM_EXIST = 16
    ALBUM_ITEM_EXIST = 32
    TIMELINE_ITEM_DELETED = 64
    OTOGROUP_ITEM_EXIST = 128
    GROUPHOME_NEW_ITEM_EXIST = 256
    GROUPHOME_HIDDEN_ITEM_CHANGED = 512
    NOTIFICATION_ITEM_CHANGED = 1024
    BEAD_ITEM_HIDE = 2048
    BEAD_ITEM_SHOW = 4096

    _VALUES_TO_NAMES = {
        1: "NOTIFICATION_ITEM_EXIST",
        2: "TIMELINE_ITEM_EXIST",
        4: "NOTE_GROUP_NEW_ITEM_EXIST",
        8: "TIMELINE_BUDDYGROUP_CHANGED",
        16: "NOTE_ONE_TO_ONE_NEW_ITEM_EXIST",
        32: "ALBUM_ITEM_EXIST",
        64: "TIMELINE_ITEM_DELETED",
        128: "OTOGROUP_ITEM_EXIST",
        256: "GROUPHOME_NEW_ITEM_EXIST",
        512: "GROUPHOME_HIDDEN_ITEM_CHANGED",
        1024: "NOTIFICATION_ITEM_CHANGED",
        2048: "BEAD_ITEM_HIDE",
        4096: "BEAD_ITEM_SHOW",
    }

    _NAMES_TO_VALUES = {
        "NOTIFICATION_ITEM_EXIST": 1,
        "TIMELINE_ITEM_EXIST": 2,
        "NOTE_GROUP_NEW_ITEM_EXIST": 4,
        "TIMELINE_BUDDYGROUP_CHANGED": 8,
        "NOTE_ONE_TO_ONE_NEW_ITEM_EXIST": 16,
        "ALBUM_ITEM_EXIST": 32,
        "TIMELINE_ITEM_DELETED": 64,
        "OTOGROUP_ITEM_EXIST": 128,
        "GROUPHOME_NEW_ITEM_EXIST": 256,
        "GROUPHOME_HIDDEN_ITEM_CHANGED": 512,
        "NOTIFICATION_ITEM_CHANGED": 1024,
        "BEAD_ITEM_HIDE": 2048,
        "BEAD_ITEM_SHOW": 4096,
    }

class NotificationType(int):
    APPLE_APNS = 1
    GOOGLE_C2DM = 2
    NHN_NNI = 3
    SKT_AOM = 4
    MS_MPNS = 5
    RIM_BIS = 6
    GOOGLE_GCM = 7
    NOKIA_NNAPI = 8
    TIZEN = 9
    LINE_BOT = 17
    LINE_WAP = 18
    APPLE_APNS_VOIP = 19
    MS_WNS = 20
    GOOGLE_FCM = 21

    _VALUES_TO_NAMES = {
        1: "APPLE_APNS",
        2: "GOOGLE_C2DM",
        3: "NHN_NNI",
        4: "SKT_AOM",
        5: "MS_MPNS",
        6: "RIM_BIS",
        7: "GOOGLE_GCM",
        8: "NOKIA_NNAPI",
        9: "TIZEN",
        17: "LINE_BOT",
        18: "LINE_WAP",
        19: "APPLE_APNS_VOIP",
        20: "MS_WNS",
        21: "GOOGLE_FCM",
    }

    _NAMES_TO_VALUES = {
        "APPLE_APNS": 1,
        "GOOGLE_C2DM": 2,
        "NHN_NNI": 3,
        "SKT_AOM": 4,
        "MS_MPNS": 5,
        "RIM_BIS": 6,
        "GOOGLE_GCM": 7,
        "NOKIA_NNAPI": 8,
        "TIZEN": 9,
        "LINE_BOT": 17,
        "LINE_WAP": 18,
        "APPLE_APNS_VOIP": 19,
        "MS_WNS": 20,
        "GOOGLE_FCM": 21,
    }

class OpStatus(int):
    NORMAL = 0
    ALERT_DISABLED = 1
    ALWAYS = 2

    _VALUES_TO_NAMES = {
        0: "NORMAL",
        1: "ALERT_DISABLED",
        2: "ALWAYS",
    }

    _NAMES_TO_VALUES = {
        "NORMAL": 0,
        "ALERT_DISABLED": 1,
        "ALWAYS": 2,
    }

class OpType(int):
    END_OF_OPERATION = 0
    UPDATE_PROFILE = 1
    UPDATE_SETTINGS = 36
    NOTIFIED_UPDATE_PROFILE = 2
    REGISTER_USERID = 3
    ADD_CONTACT = 4
    NOTIFIED_ADD_CONTACT = 5
    BLOCK_CONTACT = 6
    UNBLOCK_CONTACT = 7
    NOTIFIED_RECOMMEND_CONTACT = 8
    CREATE_GROUP = 9
    UPDATE_GROUP = 10
    NOTIFIED_UPDATE_GROUP = 11
    INVITE_INTO_GROUP = 12
    NOTIFIED_INVITE_INTO_GROUP = 13
    CANCEL_INVITATION_GROUP = 31
    NOTIFIED_CANCEL_INVITATION_GROUP = 32
    LEAVE_GROUP = 14
    NOTIFIED_LEAVE_GROUP = 15
    ACCEPT_GROUP_INVITATION = 16
    NOTIFIED_ACCEPT_GROUP_INVITATION = 17
    REJECT_GROUP_INVITATION = 34
    NOTIFIED_REJECT_GROUP_INVITATION = 35
    KICKOUT_FROM_GROUP = 18
    NOTIFIED_KICKOUT_FROM_GROUP = 19
    CREATE_ROOM = 20
    INVITE_INTO_ROOM = 21
    NOTIFIED_INVITE_INTO_ROOM = 22
    LEAVE_ROOM = 23
    NOTIFIED_LEAVE_ROOM = 24
    SEND_MESSAGE = 25
    RECEIVE_MESSAGE = 26
    SEND_MESSAGE_RECEIPT = 27
    RECEIVE_MESSAGE_RECEIPT = 28
    SEND_CONTENT_RECEIPT = 29
    RECEIVE_ANNOUNCEMENT = 30
    NOTIFIED_UNREGISTER_USER = 33
    INVITE_VIA_EMAIL = 38
    NOTIFIED_REGISTER_USER = 37
    NOTIFIED_REQUEST_RECOVERY = 39
    SEND_CHAT_CHECKED = 40
    SEND_CHAT_REMOVED = 41
    NOTIFIED_FORCE_SYNC = 42
    SEND_CONTENT = 43
    SEND_MESSAGE_MYHOME = 44
    NOTIFIED_UPDATE_CONTENT_PREVIEW = 45
    REMOVE_ALL_MESSAGES = 46
    NOTIFIED_UPDATE_PURCHASES = 47
    DUMMY = 48
    UPDATE_CONTACT = 49
    NOTIFIED_RECEIVED_CALL = 50
    CANCEL_CALL = 51
    NOTIFIED_REDIRECT = 52
    NOTIFIED_CHANNEL_SYNC = 53
    FAILED_SEND_MESSAGE = 54
    NOTIFIED_READ_MESSAGE = 55
    FAILED_EMAIL_CONFIRMATION = 56
    NOTIFIED_CHAT_CONTENT = 58
    NOTIFIED_PUSH_NOTICENTER_ITEM = 59
    NOTIFIED_JOIN_CHAT = 60
    NOTIFIED_LEAVE_CHAT = 61
    NOTIFIED_TYPING = 62
    FRIEND_REQUEST_ACCEPTED = 63
    DESTROY_MESSAGE = 64
    NOTIFIED_DESTROY_MESSAGE = 65
    UPDATE_PUBLICKEYCHAIN = 66
    NOTIFIED_UPDATE_PUBLICKEYCHAIN = 67
    NOTIFIED_BLOCK_CONTACT = 68
    NOTIFIED_UNBLOCK_CONTACT = 69
    UPDATE_GROUPPREFERENCE = 70
    NOTIFIED_PAYMENT_EVENT = 71
    REGISTER_E2EE_PUBLICKEY = 72
    NOTIFIED_E2EE_KEY_EXCHANGE_REQ = 73
    NOTIFIED_E2EE_KEY_EXCHANGE_RESP = 74
    NOTIFIED_E2EE_MESSAGE_RESEND_REQ = 75
    NOTIFIED_E2EE_MESSAGE_RESEND_RESP = 76
    NOTIFIED_E2EE_KEY_UPDATE = 77
    NOTIFIED_BUDDY_UPDATE_PROFILE = 78
    NOTIFIED_UPDATE_LINEAT_TABS = 79
    UPDATE_ROOM = 80
    NOTIFIED_BEACON_DETECTED = 81
    UPDATE_EXTENDED_PROFILE = 82
    ADD_FOLLOW = 83
    NOTIFIED_ADD_FOLLOW = 84
    DELETE_FOLLOW = 85
    NOTIFIED_DELETE_FOLLOW = 86
    UPDATE_TIMELINE_SETTINGS = 87
    NOTIFIED_FRIEND_REQUEST = 88
    UPDATE_RINGBACK_TONE = 89
    NOTIFIED_POSTBACK = 90
    RECEIVE_READ_WATERMARK = 91
    NOTIFIED_MESSAGE_DELIVERED = 92
    NOTIFIED_UPDATE_CHAT_BAR = 93
    NOTIFIED_CHATAPP_INSTALLED = 94
    NOTIFIED_CHATAPP_UPDATED = 95
    NOTIFIED_CHATAPP_NEW_MARK = 96
    NOTIFIED_CHATAPP_DELETED = 97
    NOTIFIED_CHATAPP_SYNC = 98
    NOTIFIED_UPDATE_MESSAGE = 99

    _VALUES_TO_NAMES = {
        0: "END_OF_OPERATION",
        1: "UPDATE_PROFILE",
        36: "UPDATE_SETTINGS",
        2: "NOTIFIED_UPDATE_PROFILE",
        3: "REGISTER_USERID",
        4: "ADD_CONTACT",
        5: "NOTIFIED_ADD_CONTACT",
        6: "BLOCK_CONTACT",
        7: "UNBLOCK_CONTACT",
        8: "NOTIFIED_RECOMMEND_CONTACT",
        9: "CREATE_GROUP",
        10: "UPDATE_GROUP",
        11: "NOTIFIED_UPDATE_GROUP",
        12: "INVITE_INTO_GROUP",
        13: "NOTIFIED_INVITE_INTO_GROUP",
        31: "CANCEL_INVITATION_GROUP",
        32: "NOTIFIED_CANCEL_INVITATION_GROUP",
        14: "LEAVE_GROUP",
        15: "NOTIFIED_LEAVE_GROUP",
        16: "ACCEPT_GROUP_INVITATION",
        17: "NOTIFIED_ACCEPT_GROUP_INVITATION",
        34: "REJECT_GROUP_INVITATION",
        35: "NOTIFIED_REJECT_GROUP_INVITATION",
        18: "KICKOUT_FROM_GROUP",
        19: "NOTIFIED_KICKOUT_FROM_GROUP",
        20: "CREATE_ROOM",
        21: "INVITE_INTO_ROOM",
        22: "NOTIFIED_INVITE_INTO_ROOM",
        23: "LEAVE_ROOM",
        24: "NOTIFIED_LEAVE_ROOM",
        25: "SEND_MESSAGE",
        26: "RECEIVE_MESSAGE",
        27: "SEND_MESSAGE_RECEIPT",
        28: "RECEIVE_MESSAGE_RECEIPT",
        29: "SEND_CONTENT_RECEIPT",
        30: "RECEIVE_ANNOUNCEMENT",
        33: "NOTIFIED_UNREGISTER_USER",
        38: "INVITE_VIA_EMAIL",
        37: "NOTIFIED_REGISTER_USER",
        39: "NOTIFIED_REQUEST_RECOVERY",
        40: "SEND_CHAT_CHECKED",
        41: "SEND_CHAT_REMOVED",
        42: "NOTIFIED_FORCE_SYNC",
        43: "SEND_CONTENT",
        44: "SEND_MESSAGE_MYHOME",
        45: "NOTIFIED_UPDATE_CONTENT_PREVIEW",
        46: "REMOVE_ALL_MESSAGES",
        47: "NOTIFIED_UPDATE_PURCHASES",
        48: "DUMMY",
        49: "UPDATE_CONTACT",
        50: "NOTIFIED_RECEIVED_CALL",
        51: "CANCEL_CALL",
        52: "NOTIFIED_REDIRECT",
        53: "NOTIFIED_CHANNEL_SYNC",
        54: "FAILED_SEND_MESSAGE",
        55: "NOTIFIED_READ_MESSAGE",
        56: "FAILED_EMAIL_CONFIRMATION",
        58: "NOTIFIED_CHAT_CONTENT",
        59: "NOTIFIED_PUSH_NOTICENTER_ITEM",
        60: "NOTIFIED_JOIN_CHAT",
        61: "NOTIFIED_LEAVE_CHAT",
        62: "NOTIFIED_TYPING",
        63: "FRIEND_REQUEST_ACCEPTED",
        64: "DESTROY_MESSAGE",
        65: "NOTIFIED_DESTROY_MESSAGE",
        66: "UPDATE_PUBLICKEYCHAIN",
        67: "NOTIFIED_UPDATE_PUBLICKEYCHAIN",
        68: "NOTIFIED_BLOCK_CONTACT",
        69: "NOTIFIED_UNBLOCK_CONTACT",
        70: "UPDATE_GROUPPREFERENCE",
        71: "NOTIFIED_PAYMENT_EVENT",
        72: "REGISTER_E2EE_PUBLICKEY",
        73: "NOTIFIED_E2EE_KEY_EXCHANGE_REQ",
        74: "NOTIFIED_E2EE_KEY_EXCHANGE_RESP",
        75: "NOTIFIED_E2EE_MESSAGE_RESEND_REQ",
        76: "NOTIFIED_E2EE_MESSAGE_RESEND_RESP",
        77: "NOTIFIED_E2EE_KEY_UPDATE",
        78: "NOTIFIED_BUDDY_UPDATE_PROFILE",
        79: "NOTIFIED_UPDATE_LINEAT_TABS",
        80: "UPDATE_ROOM",
        81: "NOTIFIED_BEACON_DETECTED",
        82: "UPDATE_EXTENDED_PROFILE",
        83: "ADD_FOLLOW",
        84: "NOTIFIED_ADD_FOLLOW",
        85: "DELETE_FOLLOW",
        86: "NOTIFIED_DELETE_FOLLOW",
        87: "UPDATE_TIMELINE_SETTINGS",
        88: "NOTIFIED_FRIEND_REQUEST",
        89: "UPDATE_RINGBACK_TONE",
        90: "NOTIFIED_POSTBACK",
        91: "RECEIVE_READ_WATERMARK",
        92: "NOTIFIED_MESSAGE_DELIVERED",
        93: "NOTIFIED_UPDATE_CHAT_BAR",
        94: "NOTIFIED_CHATAPP_INSTALLED",
        95: "NOTIFIED_CHATAPP_UPDATED",
        96: "NOTIFIED_CHATAPP_NEW_MARK",
        97: "NOTIFIED_CHATAPP_DELETED",
        98: "NOTIFIED_CHATAPP_SYNC",
        99: "NOTIFIED_UPDATE_MESSAGE",
    }

    _NAMES_TO_VALUES = {
        "END_OF_OPERATION": 0,
        "UPDATE_PROFILE": 1,
        "UPDATE_SETTINGS": 36,
        "NOTIFIED_UPDATE_PROFILE": 2,
        "REGISTER_USERID": 3,
        "ADD_CONTACT": 4,
        "NOTIFIED_ADD_CONTACT": 5,
        "BLOCK_CONTACT": 6,
        "UNBLOCK_CONTACT": 7,
        "NOTIFIED_RECOMMEND_CONTACT": 8,
        "CREATE_GROUP": 9,
        "UPDATE_GROUP": 10,
        "NOTIFIED_UPDATE_GROUP": 11,
        "INVITE_INTO_GROUP": 12,
        "NOTIFIED_INVITE_INTO_GROUP": 13,
        "CANCEL_INVITATION_GROUP": 31,
        "NOTIFIED_CANCEL_INVITATION_GROUP": 32,
        "LEAVE_GROUP": 14,
        "NOTIFIED_LEAVE_GROUP": 15,
        "ACCEPT_GROUP_INVITATION": 16,
        "NOTIFIED_ACCEPT_GROUP_INVITATION": 17,
        "REJECT_GROUP_INVITATION": 34,
        "NOTIFIED_REJECT_GROUP_INVITATION": 35,
        "KICKOUT_FROM_GROUP": 18,
        "NOTIFIED_KICKOUT_FROM_GROUP": 19,
        "CREATE_ROOM": 20,
        "INVITE_INTO_ROOM": 21,
        "NOTIFIED_INVITE_INTO_ROOM": 22,
        "LEAVE_ROOM": 23,
        "NOTIFIED_LEAVE_ROOM": 24,
        "SEND_MESSAGE": 25,
        "RECEIVE_MESSAGE": 26,
        "SEND_MESSAGE_RECEIPT": 27,
        "RECEIVE_MESSAGE_RECEIPT": 28,
        "SEND_CONTENT_RECEIPT": 29,
        "RECEIVE_ANNOUNCEMENT": 30,
        "NOTIFIED_UNREGISTER_USER": 33,
        "INVITE_VIA_EMAIL": 38,
        "NOTIFIED_REGISTER_USER": 37,
        "NOTIFIED_REQUEST_RECOVERY": 39,
        "SEND_CHAT_CHECKED": 40,
        "SEND_CHAT_REMOVED": 41,
        "NOTIFIED_FORCE_SYNC": 42,
        "SEND_CONTENT": 43,
        "SEND_MESSAGE_MYHOME": 44,
        "NOTIFIED_UPDATE_CONTENT_PREVIEW": 45,
        "REMOVE_ALL_MESSAGES": 46,
        "NOTIFIED_UPDATE_PURCHASES": 47,
        "DUMMY": 48,
        "UPDATE_CONTACT": 49,
        "NOTIFIED_RECEIVED_CALL": 50,
        "CANCEL_CALL": 51,
        "NOTIFIED_REDIRECT": 52,
        "NOTIFIED_CHANNEL_SYNC": 53,
        "FAILED_SEND_MESSAGE": 54,
        "NOTIFIED_READ_MESSAGE": 55,
        "FAILED_EMAIL_CONFIRMATION": 56,
        "NOTIFIED_CHAT_CONTENT": 58,
        "NOTIFIED_PUSH_NOTICENTER_ITEM": 59,
        "NOTIFIED_JOIN_CHAT": 60,
        "NOTIFIED_LEAVE_CHAT": 61,
        "NOTIFIED_TYPING": 62,
        "FRIEND_REQUEST_ACCEPTED": 63,
        "DESTROY_MESSAGE": 64,
        "NOTIFIED_DESTROY_MESSAGE": 65,
        "UPDATE_PUBLICKEYCHAIN": 66,
        "NOTIFIED_UPDATE_PUBLICKEYCHAIN": 67,
        "NOTIFIED_BLOCK_CONTACT": 68,
        "NOTIFIED_UNBLOCK_CONTACT": 69,
        "UPDATE_GROUPPREFERENCE": 70,
        "NOTIFIED_PAYMENT_EVENT": 71,
        "REGISTER_E2EE_PUBLICKEY": 72,
        "NOTIFIED_E2EE_KEY_EXCHANGE_REQ": 73,
        "NOTIFIED_E2EE_KEY_EXCHANGE_RESP": 74,
        "NOTIFIED_E2EE_MESSAGE_RESEND_REQ": 75,
        "NOTIFIED_E2EE_MESSAGE_RESEND_RESP": 76,
        "NOTIFIED_E2EE_KEY_UPDATE": 77,
        "NOTIFIED_BUDDY_UPDATE_PROFILE": 78,
        "NOTIFIED_UPDATE_LINEAT_TABS": 79,
        "UPDATE_ROOM": 80,
        "NOTIFIED_BEACON_DETECTED": 81,
        "UPDATE_EXTENDED_PROFILE": 82,
        "ADD_FOLLOW": 83,
        "NOTIFIED_ADD_FOLLOW": 84,
        "DELETE_FOLLOW": 85,
        "NOTIFIED_DELETE_FOLLOW": 86,
        "UPDATE_TIMELINE_SETTINGS": 87,
        "NOTIFIED_FRIEND_REQUEST": 88,
        "UPDATE_RINGBACK_TONE": 89,
        "NOTIFIED_POSTBACK": 90,
        "RECEIVE_READ_WATERMARK": 91,
        "NOTIFIED_MESSAGE_DELIVERED": 92,
        "NOTIFIED_UPDATE_CHAT_BAR": 93,
        "NOTIFIED_CHATAPP_INSTALLED": 94,
        "NOTIFIED_CHATAPP_UPDATED": 95,
        "NOTIFIED_CHATAPP_NEW_MARK": 96,
        "NOTIFIED_CHATAPP_DELETED": 97,
        "NOTIFIED_CHATAPP_SYNC": 98,
        "NOTIFIED_UPDATE_MESSAGE": 99,
    }

class PayloadType(int):
    PAYLOAD_BUY = 101
    PAYLOAD_CS = 111
    PAYLOAD_BONUS = 121
    PAYLOAD_EVENT = 131

    _VALUES_TO_NAMES = {
        101: "PAYLOAD_BUY",
        111: "PAYLOAD_CS",
        121: "PAYLOAD_BONUS",
        131: "PAYLOAD_EVENT",
    }

    _NAMES_TO_VALUES = {
        "PAYLOAD_BUY": 101,
        "PAYLOAD_CS": 111,
        "PAYLOAD_BONUS": 121,
        "PAYLOAD_EVENT": 131,
    }

class PaymentPgType(int):
    PAYMENT_PG_NONE = 0
    PAYMENT_PG_AU = 1
    PAYMENT_PG_AL = 2

    _VALUES_TO_NAMES = {
        0: "PAYMENT_PG_NONE",
        1: "PAYMENT_PG_AU",
        2: "PAYMENT_PG_AL",
    }

    _NAMES_TO_VALUES = {
        "PAYMENT_PG_NONE": 0,
        "PAYMENT_PG_AU": 1,
        "PAYMENT_PG_AL": 2,
    }

class PaymentType(int):
    PAYMENT_APPLE = 1
    PAYMENT_GOOGLE = 2

    _VALUES_TO_NAMES = {
        1: "PAYMENT_APPLE",
        2: "PAYMENT_GOOGLE",
    }

    _NAMES_TO_VALUES = {
        "PAYMENT_APPLE": 1,
        "PAYMENT_GOOGLE": 2,
    }

class ProductBannerLinkType(int):
    BANNER_LINK_NONE = 0
    BANNER_LINK_ITEM = 1
    BANNER_LINK_URL = 2
    BANNER_LINK_CATEGORY = 3

    _VALUES_TO_NAMES = {
        0: "BANNER_LINK_NONE",
        1: "BANNER_LINK_ITEM",
        2: "BANNER_LINK_URL",
        3: "BANNER_LINK_CATEGORY",
    }

    _NAMES_TO_VALUES = {
        "BANNER_LINK_NONE": 0,
        "BANNER_LINK_ITEM": 1,
        "BANNER_LINK_URL": 2,
        "BANNER_LINK_CATEGORY": 3,
    }

class ProductEventType(int):
    NO_EVENT = 0
    CARRIER_ANY = 65537
    BUDDY_ANY = 131073
    INSTALL_IOS = 196609
    INSTALL_ANDROID = 196610
    MISSION_ANY = 262145
    MUSTBUY_ANY = 327681

    _VALUES_TO_NAMES = {
        0: "NO_EVENT",
        65537: "CARRIER_ANY",
        131073: "BUDDY_ANY",
        196609: "INSTALL_IOS",
        196610: "INSTALL_ANDROID",
        262145: "MISSION_ANY",
        327681: "MUSTBUY_ANY",
    }

    _NAMES_TO_VALUES = {
        "NO_EVENT": 0,
        "CARRIER_ANY": 65537,
        "BUDDY_ANY": 131073,
        "INSTALL_IOS": 196609,
        "INSTALL_ANDROID": 196610,
        "MISSION_ANY": 262145,
        "MUSTBUY_ANY": 327681,
    }

class StickerResourceType(int):
    STATIC = 1
    ANIMATION = 2
    SOUND = 3
    ANIMATION_SOUND = 4
    POPUP = 5
    POPUP_SOUND = 6

    _VALUES_TO_NAMES = {
        1: "STATIC",
        2: "ANIMATION",
        3: "SOUND",
        4: "ANIMATION_SOUND",
        5: "POPUP",
        6: "POPUP_SOUND",
    }

    _NAMES_TO_VALUES = {
        "STATIC": 1,
        "ANIMATION": 2,
        "SOUND": 3,
        "ANIMATION_SOUND": 4,
        "POPUP": 5,
        "POPUP_SOUND": 6,
    }

class PlaceSearchProvider(int):
    GOOGLE = 0
    BAIDU = 1

    _VALUES_TO_NAMES = {
        0: "GOOGLE",
        1: "BAIDU",
    }

    _NAMES_TO_VALUES = {
        "GOOGLE": 0,
        "BAIDU": 1,
    }

class PointErrorCode(int):
    REQUEST_DUPLICATION = 3001
    INVALID_PARAMETER = 3002
    NOT_ENOUGH_BALANCE = 3003
    AUTHENTICATION_FAIL = 3004
    API_ACCESS_FORBIDDEN = 3005
    MEMBER_ACCOUNT_NOT_FOUND = 3006
    SERVICE_ACCOUNT_NOT_FOUND = 3007
    TRANSACTION_NOT_FOUND = 3008
    ALREADY_REVERSED_TRANSACTION = 3009
    MESSAGE_NOT_READABLE = 3010
    HTTP_REQUEST_METHOD_NOT_SUPPORTED = 3011
    HTTP_MEDIA_TYPE_NOT_SUPPORTED = 3012
    NOT_ALLOWED_TO_DEPOSIT = 3013
    NOT_ALLOWED_TO_PAY = 3014
    TRANSACTION_ACCESS_FORBIDDEN = 3015
    INVALID_SERVICE_CONFIGURATION = 4001
    DCS_COMMUNICATION_FAIL = 5004
    UPDATE_BALANCE_FAIL = 5007
    SYSTEM_ERROR = 5999
    SYSTEM_MAINTENANCE = 5888

    _VALUES_TO_NAMES = {
        3001: "REQUEST_DUPLICATION",
        3002: "INVALID_PARAMETER",
        3003: "NOT_ENOUGH_BALANCE",
        3004: "AUTHENTICATION_FAIL",
        3005: "API_ACCESS_FORBIDDEN",
        3006: "MEMBER_ACCOUNT_NOT_FOUND",
        3007: "SERVICE_ACCOUNT_NOT_FOUND",
        3008: "TRANSACTION_NOT_FOUND",
        3009: "ALREADY_REVERSED_TRANSACTION",
        3010: "MESSAGE_NOT_READABLE",
        3011: "HTTP_REQUEST_METHOD_NOT_SUPPORTED",
        3012: "HTTP_MEDIA_TYPE_NOT_SUPPORTED",
        3013: "NOT_ALLOWED_TO_DEPOSIT",
        3014: "NOT_ALLOWED_TO_PAY",
        3015: "TRANSACTION_ACCESS_FORBIDDEN",
        4001: "INVALID_SERVICE_CONFIGURATION",
        5004: "DCS_COMMUNICATION_FAIL",
        5007: "UPDATE_BALANCE_FAIL",
        5999: "SYSTEM_ERROR",
        5888: "SYSTEM_MAINTENANCE",
    }

    _NAMES_TO_VALUES = {
        "REQUEST_DUPLICATION": 3001,
        "INVALID_PARAMETER": 3002,
        "NOT_ENOUGH_BALANCE": 3003,
        "AUTHENTICATION_FAIL": 3004,
        "API_ACCESS_FORBIDDEN": 3005,
        "MEMBER_ACCOUNT_NOT_FOUND": 3006,
        "SERVICE_ACCOUNT_NOT_FOUND": 3007,
        "TRANSACTION_NOT_FOUND": 3008,
        "ALREADY_REVERSED_TRANSACTION": 3009,
        "MESSAGE_NOT_READABLE": 3010,
        "HTTP_REQUEST_METHOD_NOT_SUPPORTED": 3011,
        "HTTP_MEDIA_TYPE_NOT_SUPPORTED": 3012,
        "NOT_ALLOWED_TO_DEPOSIT": 3013,
        "NOT_ALLOWED_TO_PAY": 3014,
        "TRANSACTION_ACCESS_FORBIDDEN": 3015,
        "INVALID_SERVICE_CONFIGURATION": 4001,
        "DCS_COMMUNICATION_FAIL": 5004,
        "UPDATE_BALANCE_FAIL": 5007,
        "SYSTEM_ERROR": 5999,
        "SYSTEM_MAINTENANCE": 5888,
    }

class ProfileAttribute(int):
    ALL = 511
    EMAIL = 1
    DISPLAY_NAME = 2
    PHONETIC_NAME = 4
    PICTURE = 8
    STATUS_MESSAGE = 16
    ALLOW_SEARCH_BY_USERID = 32
    ALLOW_SEARCH_BY_EMAIL = 64
    BUDDY_STATUS = 128
    MUSIC_PROFILE = 256

    _VALUES_TO_NAMES = {
        511: "ALL",
        1: "EMAIL",
        2: "DISPLAY_NAME",
        4: "PHONETIC_NAME",
        8: "PICTURE",
        16: "STATUS_MESSAGE",
        32: "ALLOW_SEARCH_BY_USERID",
        64: "ALLOW_SEARCH_BY_EMAIL",
        128: "BUDDY_STATUS",
        256: "MUSIC_PROFILE",
    }

    _NAMES_TO_VALUES = {
        "ALL": 511,
        "EMAIL": 1,
        "DISPLAY_NAME": 2,
        "PHONETIC_NAME": 4,
        "PICTURE": 8,
        "STATUS_MESSAGE": 16,
        "ALLOW_SEARCH_BY_USERID": 32,
        "ALLOW_SEARCH_BY_EMAIL": 64,
        "BUDDY_STATUS": 128,
        "MUSIC_PROFILE": 256,
    }

class PublicType(int):
    HIDDEN = 0
    PUBLIC = 1000

    _VALUES_TO_NAMES = {
        0: "HIDDEN",
        1000: "PUBLIC",
    }

    _NAMES_TO_VALUES = {
        "HIDDEN": 0,
        "PUBLIC": 1000,
    }

class RedirectType(int):
    NONE = 0
    EXPIRE_SECOND = 1

    _VALUES_TO_NAMES = {
        0: "NONE",
        1: "EXPIRE_SECOND",
    }

    _NAMES_TO_VALUES = {
        "NONE": 0,
        "EXPIRE_SECOND": 1,
    }

class RegistrationType(int):
    PHONE = 0
    EMAIL_WAP = 1
    FACEBOOK = 2305
    SINA = 2306
    RENREN = 2307
    FEIXIN = 2308

    _VALUES_TO_NAMES = {
        0: "PHONE",
        1: "EMAIL_WAP",
        2305: "FACEBOOK",
        2306: "SINA",
        2307: "RENREN",
        2308: "FEIXIN",
    }

    _NAMES_TO_VALUES = {
        "PHONE": 0,
        "EMAIL_WAP": 1,
        "FACEBOOK": 2305,
        "SINA": 2306,
        "RENREN": 2307,
        "FEIXIN": 2308,
    }

class ChatRoomAnnouncementType(int):
    MESSAGE = 0
    NOTE = 1

    _VALUES_TO_NAMES = {
        0: "MESSAGE",
        1: "NOTE",
    }

    _NAMES_TO_VALUES = {
        "MESSAGE": 0,
        "NOTE": 1,
    }

class SettingsAttribute(int):
    ALL = 2147483647
    NOTIFICATION_ENABLE = 1
    NOTIFICATION_MUTE_EXPIRATION = 2
    NOTIFICATION_NEW_MESSAGE = 4
    NOTIFICATION_GROUP_INVITATION = 8
    NOTIFICATION_SHOW_MESSAGE = 16
    NOTIFICATION_INCOMING_CALL = 32
    NOTIFICATION_SOUND_MESSAGE = 256
    NOTIFICATION_SOUND_GROUP = 512
    NOTIFICATION_DISABLED_WITH_SUB = 65536
    NOTIFICATION_PAYMENT = 131072
    PRIVACY_SYNC_CONTACTS = 64
    PRIVACY_SEARCH_BY_PHONE_NUMBER = 128
    PRIVACY_SEARCH_BY_USERID = 8192
    PRIVACY_SEARCH_BY_EMAIL = 16384
    PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 2097152
    PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 8388608
    PRIVACY_ALLOW_FRIEND_REQUEST = 1073741824
    PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 33554432
    PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 67108864
    PRIVACY_AGREE_USE_PAIDCALL = 134217728
    CONTACT_MY_TICKET = 1024
    IDENTITY_PROVIDER = 2048
    IDENTITY_IDENTIFIER = 4096
    SNS_ACCOUNT = 524288
    PHONE_REGISTRATION = 1048576
    PREFERENCE_LOCALE = 32768
    CUSTOM_MODE = 4194304
    EMAIL_CONFIRMATION_STATUS = 16777216
    ACCOUNT_MIGRATION_PINCODE = 268435456
    ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 536870912
    SECURITY_CENTER_SETTINGS = 262144

    _VALUES_TO_NAMES = {
        2147483647: "ALL",
        1: "NOTIFICATION_ENABLE",
        2: "NOTIFICATION_MUTE_EXPIRATION",
        4: "NOTIFICATION_NEW_MESSAGE",
        8: "NOTIFICATION_GROUP_INVITATION",
        16: "NOTIFICATION_SHOW_MESSAGE",
        32: "NOTIFICATION_INCOMING_CALL",
        256: "NOTIFICATION_SOUND_MESSAGE",
        512: "NOTIFICATION_SOUND_GROUP",
        65536: "NOTIFICATION_DISABLED_WITH_SUB",
        131072: "NOTIFICATION_PAYMENT",
        64: "PRIVACY_SYNC_CONTACTS",
        128: "PRIVACY_SEARCH_BY_PHONE_NUMBER",
        8192: "PRIVACY_SEARCH_BY_USERID",
        16384: "PRIVACY_SEARCH_BY_EMAIL",
        2097152: "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN",
        8388608: "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME",
        1073741824: "PRIVACY_ALLOW_FRIEND_REQUEST",
        33554432: "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND",
        67108864: "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL",
        134217728: "PRIVACY_AGREE_USE_PAIDCALL",
        1024: "CONTACT_MY_TICKET",
        2048: "IDENTITY_PROVIDER",
        4096: "IDENTITY_IDENTIFIER",
        524288: "SNS_ACCOUNT",
        1048576: "PHONE_REGISTRATION",
        32768: "PREFERENCE_LOCALE",
        4194304: "CUSTOM_MODE",
        16777216: "EMAIL_CONFIRMATION_STATUS",
        268435456: "ACCOUNT_MIGRATION_PINCODE",
        536870912: "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE",
        262144: "SECURITY_CENTER_SETTINGS",
    }

    _NAMES_TO_VALUES = {
        "ALL": 2147483647,
        "NOTIFICATION_ENABLE": 1,
        "NOTIFICATION_MUTE_EXPIRATION": 2,
        "NOTIFICATION_NEW_MESSAGE": 4,
        "NOTIFICATION_GROUP_INVITATION": 8,
        "NOTIFICATION_SHOW_MESSAGE": 16,
        "NOTIFICATION_INCOMING_CALL": 32,
        "NOTIFICATION_SOUND_MESSAGE": 256,
        "NOTIFICATION_SOUND_GROUP": 512,
        "NOTIFICATION_DISABLED_WITH_SUB": 65536,
        "NOTIFICATION_PAYMENT": 131072,
        "PRIVACY_SYNC_CONTACTS": 64,
        "PRIVACY_SEARCH_BY_PHONE_NUMBER": 128,
        "PRIVACY_SEARCH_BY_USERID": 8192,
        "PRIVACY_SEARCH_BY_EMAIL": 16384,
        "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN": 2097152,
        "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME": 8388608,
        "PRIVACY_ALLOW_FRIEND_REQUEST": 1073741824,
        "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND": 33554432,
        "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL": 67108864,
        "PRIVACY_AGREE_USE_PAIDCALL": 134217728,
        "CONTACT_MY_TICKET": 1024,
        "IDENTITY_PROVIDER": 2048,
        "IDENTITY_IDENTIFIER": 4096,
        "SNS_ACCOUNT": 524288,
        "PHONE_REGISTRATION": 1048576,
        "PREFERENCE_LOCALE": 32768,
        "CUSTOM_MODE": 4194304,
        "EMAIL_CONFIRMATION_STATUS": 16777216,
        "ACCOUNT_MIGRATION_PINCODE": 268435456,
        "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE": 536870912,
        "SECURITY_CENTER_SETTINGS": 262144,
    }

class SettingsAttributeEx(int):
    NOTIFICATION_ENABLE = 0
    NOTIFICATION_MUTE_EXPIRATION = 1
    NOTIFICATION_NEW_MESSAGE = 2
    NOTIFICATION_GROUP_INVITATION = 3
    NOTIFICATION_SHOW_MESSAGE = 4
    NOTIFICATION_INCOMING_CALL = 5
    NOTIFICATION_SOUND_MESSAGE = 8
    NOTIFICATION_SOUND_GROUP = 9
    NOTIFICATION_DISABLED_WITH_SUB = 16
    NOTIFICATION_PAYMENT = 17
    NOTIFICATION_MENTION = 40
    NOTIFICATION_THUMBNAIL = 45
    PRIVACY_SYNC_CONTACTS = 6
    PRIVACY_SEARCH_BY_PHONE_NUMBER = 7
    PRIVACY_SEARCH_BY_USERID = 13
    PRIVACY_SEARCH_BY_EMAIL = 14
    PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 21
    PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 23
    PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME = 35
    PRIVACY_ALLOW_FRIEND_REQUEST = 30
    PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 25
    PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 26
    PRIVACY_AGREE_USE_PAIDCALL = 27
    CONTACT_MY_TICKET = 10
    IDENTITY_PROVIDER = 11
    IDENTITY_IDENTIFIER = 12
    SNS_ACCOUNT = 19
    PHONE_REGISTRATION = 20
    PREFERENCE_LOCALE = 15
    CUSTOM_MODE = 22
    EMAIL_CONFIRMATION_STATUS = 24
    ACCOUNT_MIGRATION_PINCODE = 28
    ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 29
    SECURITY_CENTER_SETTINGS = 18
    E2EE_ENABLE = 33
    ENABLE_SOUND_TO_TEXT = 47
    HITOKOTO_BACKUP_REQUESTED = 34
    CONTACT_ALLOW_FOLLOWING = 36
    PRIVACY_ALLOW_NEARBY = 37
    AGREEMENT_NEARBY = 38
    AGREEMENT_SQUARE = 39
    ALLOW_UNREGISTRATION_SECONDARY_DEVICE = 41
    AGREEMENT_BOT_USE = 42
    AGREEMENT_SHAKE_FUNCTION = 43
    AGREEMENT_MOBILE_CONTACT_NAME = 44
    AGREEMENT_SOUND_TO_TEXT = 46

    _VALUES_TO_NAMES = {
        0: "NOTIFICATION_ENABLE",
        1: "NOTIFICATION_MUTE_EXPIRATION",
        2: "NOTIFICATION_NEW_MESSAGE",
        3: "NOTIFICATION_GROUP_INVITATION",
        4: "NOTIFICATION_SHOW_MESSAGE",
        5: "NOTIFICATION_INCOMING_CALL",
        8: "NOTIFICATION_SOUND_MESSAGE",
        9: "NOTIFICATION_SOUND_GROUP",
        16: "NOTIFICATION_DISABLED_WITH_SUB",
        17: "NOTIFICATION_PAYMENT",
        40: "NOTIFICATION_MENTION",
        45: "NOTIFICATION_THUMBNAIL",
        6: "PRIVACY_SYNC_CONTACTS",
        7: "PRIVACY_SEARCH_BY_PHONE_NUMBER",
        13: "PRIVACY_SEARCH_BY_USERID",
        14: "PRIVACY_SEARCH_BY_EMAIL",
        21: "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN",
        23: "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME",
        35: "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME",
        30: "PRIVACY_ALLOW_FRIEND_REQUEST",
        25: "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND",
        26: "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL",
        27: "PRIVACY_AGREE_USE_PAIDCALL",
        10: "CONTACT_MY_TICKET",
        11: "IDENTITY_PROVIDER",
        12: "IDENTITY_IDENTIFIER",
        19: "SNS_ACCOUNT",
        20: "PHONE_REGISTRATION",
        15: "PREFERENCE_LOCALE",
        22: "CUSTOM_MODE",
        24: "EMAIL_CONFIRMATION_STATUS",
        28: "ACCOUNT_MIGRATION_PINCODE",
        29: "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE",
        18: "SECURITY_CENTER_SETTINGS",
        33: "E2EE_ENABLE",
        47: "ENABLE_SOUND_TO_TEXT",
        34: "HITOKOTO_BACKUP_REQUESTED",
        36: "CONTACT_ALLOW_FOLLOWING",
        37: "PRIVACY_ALLOW_NEARBY",
        38: "AGREEMENT_NEARBY",
        39: "AGREEMENT_SQUARE",
        41: "ALLOW_UNREGISTRATION_SECONDARY_DEVICE",
        42: "AGREEMENT_BOT_USE",
        43: "AGREEMENT_SHAKE_FUNCTION",
        44: "AGREEMENT_MOBILE_CONTACT_NAME",
        46: "AGREEMENT_SOUND_TO_TEXT",
    }

    _NAMES_TO_VALUES = {
        "NOTIFICATION_ENABLE": 0,
        "NOTIFICATION_MUTE_EXPIRATION": 1,
        "NOTIFICATION_NEW_MESSAGE": 2,
        "NOTIFICATION_GROUP_INVITATION": 3,
        "NOTIFICATION_SHOW_MESSAGE": 4,
        "NOTIFICATION_INCOMING_CALL": 5,
        "NOTIFICATION_SOUND_MESSAGE": 8,
        "NOTIFICATION_SOUND_GROUP": 9,
        "NOTIFICATION_DISABLED_WITH_SUB": 16,
        "NOTIFICATION_PAYMENT": 17,
        "NOTIFICATION_MENTION": 40,
        "NOTIFICATION_THUMBNAIL": 45,
        "PRIVACY_SYNC_CONTACTS": 6,
        "PRIVACY_SEARCH_BY_PHONE_NUMBER": 7,
        "PRIVACY_SEARCH_BY_USERID": 13,
        "PRIVACY_SEARCH_BY_EMAIL": 14,
        "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN": 21,
        "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME": 23,
        "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME": 35,
        "PRIVACY_ALLOW_FRIEND_REQUEST": 30,
        "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND": 25,
        "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL": 26,
        "PRIVACY_AGREE_USE_PAIDCALL": 27,
        "CONTACT_MY_TICKET": 10,
        "IDENTITY_PROVIDER": 11,
        "IDENTITY_IDENTIFIER": 12,
        "SNS_ACCOUNT": 19,
        "PHONE_REGISTRATION": 20,
        "PREFERENCE_LOCALE": 15,
        "CUSTOM_MODE": 22,
        "EMAIL_CONFIRMATION_STATUS": 24,
        "ACCOUNT_MIGRATION_PINCODE": 28,
        "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE": 29,
        "SECURITY_CENTER_SETTINGS": 18,
        "E2EE_ENABLE": 33,
        "ENABLE_SOUND_TO_TEXT": 47,
        "HITOKOTO_BACKUP_REQUESTED": 34,
        "CONTACT_ALLOW_FOLLOWING": 36,
        "PRIVACY_ALLOW_NEARBY": 37,
        "AGREEMENT_NEARBY": 38,
        "AGREEMENT_SQUARE": 39,
        "ALLOW_UNREGISTRATION_SECONDARY_DEVICE": 41,
        "AGREEMENT_BOT_USE": 42,
        "AGREEMENT_SHAKE_FUNCTION": 43,
        "AGREEMENT_MOBILE_CONTACT_NAME": 44,
        "AGREEMENT_SOUND_TO_TEXT": 46,
    }

class SnsIdType(int):
    FACEBOOK = 1
    SINA = 2
    RENREN = 3
    FEIXIN = 4
    BBM = 5

    _VALUES_TO_NAMES = {
        1: "FACEBOOK",
        2: "SINA",
        3: "RENREN",
        4: "FEIXIN",
        5: "BBM",
    }

    _NAMES_TO_VALUES = {
        "FACEBOOK": 1,
        "SINA": 2,
        "RENREN": 3,
        "FEIXIN": 4,
        "BBM": 5,
    }

class SpammerReason(int):
    OTHER = 0
    ADVERTISING = 1
    GENDER_HARASSMENT = 2
    HARASSMENT = 3

    _VALUES_TO_NAMES = {
        0: "OTHER",
        1: "ADVERTISING",
        2: "GENDER_HARASSMENT",
        3: "HARASSMENT",
    }

    _NAMES_TO_VALUES = {
        "OTHER": 0,
        "ADVERTISING": 1,
        "GENDER_HARASSMENT": 2,
        "HARASSMENT": 3,
    }

class SyncActionType(int):
    SYNC = 0
    REPORT = 1

    _VALUES_TO_NAMES = {
        0: "SYNC",
        1: "REPORT",
    }

    _NAMES_TO_VALUES = {
        "SYNC": 0,
        "REPORT": 1,
    }

class SpotCategory(int):
    UNKNOWN = 0
    GOURMET = 1
    BEAUTY = 2
    TRAVEL = 3
    SHOPPING = 4
    ENTERTAINMENT = 5
    SPORTS = 6
    TRANSPORT = 7
    LIFE = 8
    HOSPITAL = 9
    FINANCE = 10
    EDUCATION = 11
    OTHER = 12
    ALL = 10000

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "GOURMET",
        2: "BEAUTY",
        3: "TRAVEL",
        4: "SHOPPING",
        5: "ENTERTAINMENT",
        6: "SPORTS",
        7: "TRANSPORT",
        8: "LIFE",
        9: "HOSPITAL",
        10: "FINANCE",
        11: "EDUCATION",
        12: "OTHER",
        10000: "ALL",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "GOURMET": 1,
        "BEAUTY": 2,
        "TRAVEL": 3,
        "SHOPPING": 4,
        "ENTERTAINMENT": 5,
        "SPORTS": 6,
        "TRANSPORT": 7,
        "LIFE": 8,
        "HOSPITAL": 9,
        "FINANCE": 10,
        "EDUCATION": 11,
        "OTHER": 12,
        "ALL": 10000,
    }

class SyncCategory(int):
    PROFILE = 0
    SETTINGS = 1
    OPS = 2
    CONTACT = 3
    RECOMMEND = 4
    BLOCK = 5
    GROUP = 6
    ROOM = 7
    NOTIFICATION = 8
    ADDRESS_BOOK = 9

    _VALUES_TO_NAMES = {
        0: "PROFILE",
        1: "SETTINGS",
        2: "OPS",
        3: "CONTACT",
        4: "RECOMMEND",
        5: "BLOCK",
        6: "GROUP",
        7: "ROOM",
        8: "NOTIFICATION",
        9: "ADDRESS_BOOK",
    }

    _NAMES_TO_VALUES = {
        "PROFILE": 0,
        "SETTINGS": 1,
        "OPS": 2,
        "CONTACT": 3,
        "RECOMMEND": 4,
        "BLOCK": 5,
        "GROUP": 6,
        "ROOM": 7,
        "NOTIFICATION": 8,
        "ADDRESS_BOOK": 9,
    }

class LiffErrorCode(int):
    INVALID_REQUEST = 1
    UNAUTHORIZED = 2
    CONSENT_REQUIRED = 3
    VERSION_UPDATE_REQUIRED = 4
    SERVER_ERROR = 100

    _VALUES_TO_NAMES = {
        1: "INVALID_REQUEST",
        2: "UNAUTHORIZED",
        3: "CONSENT_REQUIRED",
        4: "VERSION_UPDATE_REQUIRED",
        100: "SERVER_ERROR",
    }

    _NAMES_TO_VALUES = {
        "INVALID_REQUEST": 1,
        "UNAUTHORIZED": 2,
        "CONSENT_REQUIRED": 3,
        "VERSION_UPDATE_REQUIRED": 4,
        "SERVER_ERROR": 100,
    }

class LiffFeatureType(int):
    GEOLOCATION = 1
    ADVERTISING_ID = 2
    BLUETOOTH_LE = 3

    _VALUES_TO_NAMES = {
        1: "GEOLOCATION",
        2: "ADVERTISING_ID",
        3: "BLUETOOTH_LE",
    }

    _NAMES_TO_VALUES = {
        "GEOLOCATION": 1,
        "ADVERTISING_ID": 2,
        "BLUETOOTH_LE": 3,
    }

class TMessageBoxStatus(int):
    ACTIVATED = 1
    UNREAD = 2

    _VALUES_TO_NAMES = {
        1: "ACTIVATED",
        2: "UNREAD",
    }

    _NAMES_TO_VALUES = {
        "ACTIVATED": 1,
        "UNREAD": 2,
    }

class UniversalNotificationServiceErrorCode(int):
    INTERNAL_ERROR = 0
    INVALID_KEY = 1
    ILLEGAL_ARGUMENT = 2
    TOO_MANY_REQUEST = 3
    AUTHENTICATION_FAILED = 4
    NO_WRITE_PERMISSION = 5

    _VALUES_TO_NAMES = {
        0: "INTERNAL_ERROR",
        1: "INVALID_KEY",
        2: "ILLEGAL_ARGUMENT",
        3: "TOO_MANY_REQUEST",
        4: "AUTHENTICATION_FAILED",
        5: "NO_WRITE_PERMISSION",
    }

    _NAMES_TO_VALUES = {
        "INTERNAL_ERROR": 0,
        "INVALID_KEY": 1,
        "ILLEGAL_ARGUMENT": 2,
        "TOO_MANY_REQUEST": 3,
        "AUTHENTICATION_FAILED": 4,
        "NO_WRITE_PERMISSION": 5,
    }

class UnregistrationReason(int):
    UNREGISTRATION_REASON_UNREGISTER_USER = 1
    UNREGISTRATION_REASON_UNBIND_DEVICE = 2

    _VALUES_TO_NAMES = {
        1: "UNREGISTRATION_REASON_UNREGISTER_USER",
        2: "UNREGISTRATION_REASON_UNBIND_DEVICE",
    }

    _NAMES_TO_VALUES = {
        "UNREGISTRATION_REASON_UNREGISTER_USER": 1,
        "UNREGISTRATION_REASON_UNBIND_DEVICE": 2,
    }

class UserAgeType(int):
    OVER = 1
    UNDER = 2
    UNDEFINED = 3

    _VALUES_TO_NAMES = {
        1: "OVER",
        2: "UNDER",
        3: "UNDEFINED",
    }

    _NAMES_TO_VALUES = {
        "OVER": 1,
        "UNDER": 2,
        "UNDEFINED": 3,
    }

class VerificationMethod(int):
    NO_AVAILABLE = 0
    PIN_VIA_SMS = 1
    CALLERID_INDIGO = 2
    PIN_VIA_TTS = 4
    SKIP = 10

    _VALUES_TO_NAMES = {
        0: "NO_AVAILABLE",
        1: "PIN_VIA_SMS",
        2: "CALLERID_INDIGO",
        4: "PIN_VIA_TTS",
        10: "SKIP",
    }

    _NAMES_TO_VALUES = {
        "NO_AVAILABLE": 0,
        "PIN_VIA_SMS": 1,
        "CALLERID_INDIGO": 2,
        "PIN_VIA_TTS": 4,
        "SKIP": 10,
    }

class VerificationResult(int):
    FAILED = 0
    OK_NOT_REGISTERED_YET = 1
    OK_REGISTERED_WITH_SAME_DEVICE = 2
    OK_REGISTERED_WITH_ANOTHER_DEVICE = 3

    _VALUES_TO_NAMES = {
        0: "FAILED",
        1: "OK_NOT_REGISTERED_YET",
        2: "OK_REGISTERED_WITH_SAME_DEVICE",
        3: "OK_REGISTERED_WITH_ANOTHER_DEVICE",
    }

    _NAMES_TO_VALUES = {
        "FAILED": 0,
        "OK_NOT_REGISTERED_YET": 1,
        "OK_REGISTERED_WITH_SAME_DEVICE": 2,
        "OK_REGISTERED_WITH_ANOTHER_DEVICE": 3,
    }

class WapInvitationType(int):
    REGISTRATION = 1
    CHAT = 2

    _VALUES_TO_NAMES = {
        1: "REGISTRATION",
        2: "CHAT",
    }

    _NAMES_TO_VALUES = {
        "REGISTRATION": 1,
        "CHAT": 2,
    }

class MediaType(int):
    AUDIO = 1
    VIDEO = 2

    _VALUES_TO_NAMES = {
        1: "AUDIO",
        2: "VIDEO",
    }

    _NAMES_TO_VALUES = {
        "AUDIO": 1,
        "VIDEO": 2,
    }

class SQErrorCode(int):
    UNKNOWN = 0
    ILLEGAL_ARGUMENT = 400
    AUTHENTICATION_FAILURE = 401
    FORBIDDEN = 403
    NOT_FOUND = 404
    REVISION_MISMATCH = 409
    PRECONDITION_FAILED = 410
    INTERNAL_ERROR = 500
    NOT_IMPLEMENTED = 501
    TRY_AGAIN_LATER = 505

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        400: "ILLEGAL_ARGUMENT",
        401: "AUTHENTICATION_FAILURE",
        403: "FORBIDDEN",
        404: "NOT_FOUND",
        409: "REVISION_MISMATCH",
        410: "PRECONDITION_FAILED",
        500: "INTERNAL_ERROR",
        501: "NOT_IMPLEMENTED",
        505: "TRY_AGAIN_LATER",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "ILLEGAL_ARGUMENT": 400,
        "AUTHENTICATION_FAILURE": 401,
        "FORBIDDEN": 403,
        "NOT_FOUND": 404,
        "REVISION_MISMATCH": 409,
        "PRECONDITION_FAILED": 410,
        "INTERNAL_ERROR": 500,
        "NOT_IMPLEMENTED": 501,
        "TRY_AGAIN_LATER": 505,
    }

class SquareEventType(int):
    RECEIVE_MESSAGE = 0
    SEND_MESSAGE = 1
    NOTIFIED_JOIN_SQUARE_CHAT = 2
    NOTIFIED_INVITE_INTO_SQUARE_CHAT = 3
    NOTIFIED_LEAVE_SQUARE_CHAT = 4
    NOTIFIED_DESTROY_MESSAGE = 5
    NOTIFIED_MARK_AS_READ = 6
    NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE = 7
    NOTIFIED_KICKOUT_FROM_SQUARE = 19
    NOTIFIED_SHUTDOWN_SQUARE = 18
    NOTIFIED_DELETE_SQUARE_CHAT = 20
    NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME = 30
    NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE = 31
    NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT = 37
    NOTIFIED_ADD_BOT = 33
    NOTIFIED_REMOVE_BOT = 34
    NOTIFIED_UPDATE_SQUARE = 8
    NOTIFIED_UPDATE_SQUARE_STATUS = 9
    NOTIFIED_UPDATE_SQUARE_AUTHORITY = 10
    NOTIFIED_UPDATE_SQUARE_MEMBER = 11
    NOTIFIED_UPDATE_SQUARE_CHAT = 12
    NOTIFIED_UPDATE_SQUARE_CHAT_STATUS = 13
    NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER = 14
    NOTIFIED_CREATE_SQUARE_MEMBER = 15
    NOTIFIED_CREATE_SQUARE_CHAT_MEMBER = 16
    NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION = 17
    NOTIFIED_UPDATE_SQUARE_FEATURE_SET = 32
    NOTIFIED_UPDATE_SQUARE_NOTE_STATUS = 36
    NOTIFICATION_JOIN_REQUEST = 21
    NOTIFICATION_JOINED = 22
    NOTIFICATION_PROMOTED_COADMIN = 23
    NOTIFICATION_PROMOTED_ADMIN = 24
    NOTIFICATION_DEMOTED_MEMBER = 25
    NOTIFICATION_KICKED_OUT = 26
    NOTIFICATION_SQUARE_DELETE = 27
    NOTIFICATION_SQUARE_CHAT_DELETE = 28
    NOTIFICATION_MESSAGE = 29

    _VALUES_TO_NAMES = {
        0: "RECEIVE_MESSAGE",
        1: "SEND_MESSAGE",
        2: "NOTIFIED_JOIN_SQUARE_CHAT",
        3: "NOTIFIED_INVITE_INTO_SQUARE_CHAT",
        4: "NOTIFIED_LEAVE_SQUARE_CHAT",
        5: "NOTIFIED_DESTROY_MESSAGE",
        6: "NOTIFIED_MARK_AS_READ",
        7: "NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE",
        19: "NOTIFIED_KICKOUT_FROM_SQUARE",
        18: "NOTIFIED_SHUTDOWN_SQUARE",
        20: "NOTIFIED_DELETE_SQUARE_CHAT",
        30: "NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME",
        31: "NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE",
        37: "NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT",
        33: "NOTIFIED_ADD_BOT",
        34: "NOTIFIED_REMOVE_BOT",
        8: "NOTIFIED_UPDATE_SQUARE",
        9: "NOTIFIED_UPDATE_SQUARE_STATUS",
        10: "NOTIFIED_UPDATE_SQUARE_AUTHORITY",
        11: "NOTIFIED_UPDATE_SQUARE_MEMBER",
        12: "NOTIFIED_UPDATE_SQUARE_CHAT",
        13: "NOTIFIED_UPDATE_SQUARE_CHAT_STATUS",
        14: "NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER",
        15: "NOTIFIED_CREATE_SQUARE_MEMBER",
        16: "NOTIFIED_CREATE_SQUARE_CHAT_MEMBER",
        17: "NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION",
        32: "NOTIFIED_UPDATE_SQUARE_FEATURE_SET",
        36: "NOTIFIED_UPDATE_SQUARE_NOTE_STATUS",
        21: "NOTIFICATION_JOIN_REQUEST",
        22: "NOTIFICATION_JOINED",
        23: "NOTIFICATION_PROMOTED_COADMIN",
        24: "NOTIFICATION_PROMOTED_ADMIN",
        25: "NOTIFICATION_DEMOTED_MEMBER",
        26: "NOTIFICATION_KICKED_OUT",
        27: "NOTIFICATION_SQUARE_DELETE",
        28: "NOTIFICATION_SQUARE_CHAT_DELETE",
        29: "NOTIFICATION_MESSAGE",
    }

    _NAMES_TO_VALUES = {
        "RECEIVE_MESSAGE": 0,
        "SEND_MESSAGE": 1,
        "NOTIFIED_JOIN_SQUARE_CHAT": 2,
        "NOTIFIED_INVITE_INTO_SQUARE_CHAT": 3,
        "NOTIFIED_LEAVE_SQUARE_CHAT": 4,
        "NOTIFIED_DESTROY_MESSAGE": 5,
        "NOTIFIED_MARK_AS_READ": 6,
        "NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE": 7,
        "NOTIFIED_KICKOUT_FROM_SQUARE": 19,
        "NOTIFIED_SHUTDOWN_SQUARE": 18,
        "NOTIFIED_DELETE_SQUARE_CHAT": 20,
        "NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME": 30,
        "NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE": 31,
        "NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT": 37,
        "NOTIFIED_ADD_BOT": 33,
        "NOTIFIED_REMOVE_BOT": 34,
        "NOTIFIED_UPDATE_SQUARE": 8,
        "NOTIFIED_UPDATE_SQUARE_STATUS": 9,
        "NOTIFIED_UPDATE_SQUARE_AUTHORITY": 10,
        "NOTIFIED_UPDATE_SQUARE_MEMBER": 11,
        "NOTIFIED_UPDATE_SQUARE_CHAT": 12,
        "NOTIFIED_UPDATE_SQUARE_CHAT_STATUS": 13,
        "NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER": 14,
        "NOTIFIED_CREATE_SQUARE_MEMBER": 15,
        "NOTIFIED_CREATE_SQUARE_CHAT_MEMBER": 16,
        "NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION": 17,
        "NOTIFIED_UPDATE_SQUARE_FEATURE_SET": 32,
        "NOTIFIED_UPDATE_SQUARE_NOTE_STATUS": 36,
        "NOTIFICATION_JOIN_REQUEST": 21,
        "NOTIFICATION_JOINED": 22,
        "NOTIFICATION_PROMOTED_COADMIN": 23,
        "NOTIFICATION_PROMOTED_ADMIN": 24,
        "NOTIFICATION_DEMOTED_MEMBER": 25,
        "NOTIFICATION_KICKED_OUT": 26,
        "NOTIFICATION_SQUARE_DELETE": 27,
        "NOTIFICATION_SQUARE_CHAT_DELETE": 28,
        "NOTIFICATION_MESSAGE": 29,
    }

class SquareMemberRelationState(int):
    NONE = 1
    BLOCKED = 2

    _VALUES_TO_NAMES = {
        1: "NONE",
        2: "BLOCKED",
    }

    _NAMES_TO_VALUES = {
        "NONE": 1,
        "BLOCKED": 2,
    }

class SquareFeatureControlState(int):
    DISABLED = 1
    ENABLED = 2

    _VALUES_TO_NAMES = {
        1: "DISABLED",
        2: "ENABLED",
    }

    _NAMES_TO_VALUES = {
        "DISABLED": 1,
        "ENABLED": 2,
    }

class BooleanState(int):
    NONE = 0
    OFF = 1
    ON = 2

    _VALUES_TO_NAMES = {
        0: "NONE",
        1: "OFF",
        2: "ON",
    }

    _NAMES_TO_VALUES = {
        "NONE": 0,
        "OFF": 1,
        "ON": 2,
    }

class SquareType(int):
    CLOSED = 0
    OPEN = 1

    _VALUES_TO_NAMES = {
        0: "CLOSED",
        1: "OPEN",
    }

    _NAMES_TO_VALUES = {
        "CLOSED": 0,
        "OPEN": 1,
    }

class SquareChatType(int):
    OPEN = 1
    SECRET = 2
    ONE_ON_ONE = 3
    SQUARE_DEFAULT = 4

    _VALUES_TO_NAMES = {
        1: "OPEN",
        2: "SECRET",
        3: "ONE_ON_ONE",
        4: "SQUARE_DEFAULT",
    }

    _NAMES_TO_VALUES = {
        "OPEN": 1,
        "SECRET": 2,
        "ONE_ON_ONE": 3,
        "SQUARE_DEFAULT": 4,
    }

class SquareErrorCode(int):
    UNKNOWN = 0
    INTERNAL_ERROR = 500
    NOT_IMPLEMENTED = 501
    TRY_AGAIN_LATER = 503
    MAINTENANCE = 505
    ILLEGAL_ARGUMENT = 400
    AUTHENTICATION_FAILURE = 401
    FORBIDDEN = 403
    NOT_FOUND = 404
    REVISION_MISMATCH = 409
    PRECONDITION_FAILED = 410

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        500: "INTERNAL_ERROR",
        501: "NOT_IMPLEMENTED",
        503: "TRY_AGAIN_LATER",
        505: "MAINTENANCE",
        400: "ILLEGAL_ARGUMENT",
        401: "AUTHENTICATION_FAILURE",
        403: "FORBIDDEN",
        404: "NOT_FOUND",
        409: "REVISION_MISMATCH",
        410: "PRECONDITION_FAILED",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "INTERNAL_ERROR": 500,
        "NOT_IMPLEMENTED": 501,
        "TRY_AGAIN_LATER": 503,
        "MAINTENANCE": 505,
        "ILLEGAL_ARGUMENT": 400,
        "AUTHENTICATION_FAILURE": 401,
        "FORBIDDEN": 403,
        "NOT_FOUND": 404,
        "REVISION_MISMATCH": 409,
        "PRECONDITION_FAILED": 410,
    }

class SquareChatState(int):
    ALIVE = 0
    DELETED = 1
    SUSPENDED = 2

    _VALUES_TO_NAMES = {
        0: "ALIVE",
        1: "DELETED",
        2: "SUSPENDED",
    }

    _NAMES_TO_VALUES = {
        "ALIVE": 0,
        "DELETED": 1,
        "SUSPENDED": 2,
    }

class SquareFeatureSetAttribute(int):
    CREATING_SECRET_SQUARE_CHAT = 1
    INVITING_INTO_OPEN_SQUARE_CHAT = 2

    _VALUES_TO_NAMES = {
        1: "CREATING_SECRET_SQUARE_CHAT",
        2: "INVITING_INTO_OPEN_SQUARE_CHAT",
    }

    _NAMES_TO_VALUES = {
        "CREATING_SECRET_SQUARE_CHAT": 1,
        "INVITING_INTO_OPEN_SQUARE_CHAT": 2,
    }

class SquareMembershipState(int):
    JOIN_REQUESTED = 1
    JOINED = 2
    REJECTED = 3
    LEFT = 4
    KICK_OUT = 5
    BANNED = 6
    DELETED = 7

    _VALUES_TO_NAMES = {
        1: "JOIN_REQUESTED",
        2: "JOINED",
        3: "REJECTED",
        4: "LEFT",
        5: "KICK_OUT",
        6: "BANNED",
        7: "DELETED",
    }

    _NAMES_TO_VALUES = {
        "JOIN_REQUESTED": 1,
        "JOINED": 2,
        "REJECTED": 3,
        "LEFT": 4,
        "KICK_OUT": 5,
        "BANNED": 6,
        "DELETED": 7,
    }

class SquareChatMemberAttribute(int):
    MEMBERSHIP_STATE = 4
    NOTIFICATION_MESSAGE = 6

    _VALUES_TO_NAMES = {
        4: "MEMBERSHIP_STATE",
        6: "NOTIFICATION_MESSAGE",
    }

    _NAMES_TO_VALUES = {
        "MEMBERSHIP_STATE": 4,
        "NOTIFICATION_MESSAGE": 6,
    }

class SquareMemberRole(int):
    ADMIN = 1
    CO_ADMIN = 2
    MEMBER = 10

    _VALUES_TO_NAMES = {
        1: "ADMIN",
        2: "CO_ADMIN",
        10: "MEMBER",
    }

    _NAMES_TO_VALUES = {
        "ADMIN": 1,
        "CO_ADMIN": 2,
        "MEMBER": 10,
    }

class PreconditionFailedExtraInfo(int):
    DUPLICATED_DISPLAY_NAME = 0

    _VALUES_TO_NAMES = {
        0: "DUPLICATED_DISPLAY_NAME",
    }

    _NAMES_TO_VALUES = {
        "DUPLICATED_DISPLAY_NAME": 0,
    }

class SquareChatMembershipState(int):
    JOINED = 1
    LEFT = 2

    _VALUES_TO_NAMES = {
        1: "JOINED",
        2: "LEFT",
    }

    _NAMES_TO_VALUES = {
        "JOINED": 1,
        "LEFT": 2,
    }

class FetchDirection(int):
    FORWARD = 1
    BACKWARD = 2

    _VALUES_TO_NAMES = {
        1: "FORWARD",
        2: "BACKWARD",
    }

    _NAMES_TO_VALUES = {
        "FORWARD": 1,
        "BACKWARD": 2,
    }

class SquareAttribute(int):
    NAME = 1
    WELCOME_MESSAGE = 2
    PROFILE_IMAGE = 3
    DESCRIPTION = 4
    SEARCHABLE = 6
    CATEGORY = 7
    INVITATION_URL = 8
    ABLE_TO_USE_INVITATION_URL = 9
    STATE = 10

    _VALUES_TO_NAMES = {
        1: "NAME",
        2: "WELCOME_MESSAGE",
        3: "PROFILE_IMAGE",
        4: "DESCRIPTION",
        6: "SEARCHABLE",
        7: "CATEGORY",
        8: "INVITATION_URL",
        9: "ABLE_TO_USE_INVITATION_URL",
        10: "STATE",
    }

    _NAMES_TO_VALUES = {
        "NAME": 1,
        "WELCOME_MESSAGE": 2,
        "PROFILE_IMAGE": 3,
        "DESCRIPTION": 4,
        "SEARCHABLE": 6,
        "CATEGORY": 7,
        "INVITATION_URL": 8,
        "ABLE_TO_USE_INVITATION_URL": 9,
        "STATE": 10,
    }

class SquareAuthorityAttribute(int):
    UPDATE_SQUARE_PROFILE = 1
    INVITE_NEW_MEMBER = 2
    APPROVE_JOIN_REQUEST = 3
    CREATE_POST = 4
    CREATE_OPEN_SQUARE_CHAT = 5
    DELETE_SQUARE_CHAT_OR_POST = 6
    REMOVE_SQUARE_MEMBER = 7
    GRANT_ROLE = 8
    ENABLE_INVITATION_TICKET = 9
    CREATE_CHAT_ANNOUNCEMENT = 10

    _VALUES_TO_NAMES = {
        1: "UPDATE_SQUARE_PROFILE",
        2: "INVITE_NEW_MEMBER",
        3: "APPROVE_JOIN_REQUEST",
        4: "CREATE_POST",
        5: "CREATE_OPEN_SQUARE_CHAT",
        6: "DELETE_SQUARE_CHAT_OR_POST",
        7: "REMOVE_SQUARE_MEMBER",
        8: "GRANT_ROLE",
        9: "ENABLE_INVITATION_TICKET",
        10: "CREATE_CHAT_ANNOUNCEMENT",
    }

    _NAMES_TO_VALUES = {
        "UPDATE_SQUARE_PROFILE": 1,
        "INVITE_NEW_MEMBER": 2,
        "APPROVE_JOIN_REQUEST": 3,
        "CREATE_POST": 4,
        "CREATE_OPEN_SQUARE_CHAT": 5,
        "DELETE_SQUARE_CHAT_OR_POST": 6,
        "REMOVE_SQUARE_MEMBER": 7,
        "GRANT_ROLE": 8,
        "ENABLE_INVITATION_TICKET": 9,
        "CREATE_CHAT_ANNOUNCEMENT": 10,
    }

class SquareEventStatus(int):
    NORMAL = 1
    ALERT_DISABLED = 2

    _VALUES_TO_NAMES = {
        1: "NORMAL",
        2: "ALERT_DISABLED",
    }

    _NAMES_TO_VALUES = {
        "NORMAL": 1,
        "ALERT_DISABLED": 2,
    }

class SuggestDictionaryIncrementStatus(int):
    SUCCESS = 0
    INVALID_REVISION = 1
    TOO_LARGE_DATA = 2
    SCHEME_CHANGED = 3
    RETRY = 4
    FAIL = 5
    TOO_OLD_DATA = 6

    _VALUES_TO_NAMES = {
        0: "SUCCESS",
        1: "INVALID_REVISION",
        2: "TOO_LARGE_DATA",
        3: "SCHEME_CHANGED",
        4: "RETRY",
        5: "FAIL",
        6: "TOO_OLD_DATA",
    }

    _NAMES_TO_VALUES = {
        "SUCCESS": 0,
        "INVALID_REVISION": 1,
        "TOO_LARGE_DATA": 2,
        "SCHEME_CHANGED": 3,
        "RETRY": 4,
        "FAIL": 5,
        "TOO_OLD_DATA": 6,
    }

class Location(object):
    """
    Attributes:
     - title
     - address
     - latitude
     - longitude
     - phone
    """
    def __init__(self, title=None, address=None, latitude=None, longitude=None, phone=None):
        self.title = title
        self.address = address
        self.latitude = latitude
        self.longitude = longitude
        self.phone = phone

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.title = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.address = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.latitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.longitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.phone = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Location')
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 1)
            oprot.writeString(self.title)
            oprot.writeFieldEnd()
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 2)
            oprot.writeString(self.address)
            oprot.writeFieldEnd()
        if self.latitude is not None:
            oprot.writeFieldBegin('latitude', TType.DOUBLE, 3)
            oprot.writeDouble(self.latitude)
            oprot.writeFieldEnd()
        if self.longitude is not None:
            oprot.writeFieldBegin('longitude', TType.DOUBLE, 4)
            oprot.writeDouble(self.longitude)
            oprot.writeFieldEnd()
        if self.phone is not None:
            oprot.writeFieldBegin('phone', TType.STRING, 5)
            oprot.writeString(self.phone)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.title))
        value = (value * 31) ^ hash(make_hashable(self.address))
        value = (value * 31) ^ hash(make_hashable(self.latitude))
        value = (value * 31) ^ hash(make_hashable(self.longitude))
        value = (value * 31) ^ hash(make_hashable(self.phone))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class MessageBoxV2MessageId(object):
    """
    Attributes:
     - deliveredTime
     - messageId
    """
    def __init__(self, deliveredTime=None, messageId=None):
        self.deliveredTime = deliveredTime
        self.messageId = messageId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.deliveredTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.messageId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('MessageBoxV2MessageId')
        if self.deliveredTime is not None:
            oprot.writeFieldBegin('deliveredTime', TType.I64, 1)
            oprot.writeI64(self.deliveredTime)
            oprot.writeFieldEnd()
        if self.messageId is not None:
            oprot.writeFieldBegin('messageId', TType.I64, 2)
            oprot.writeI64(self.messageId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.deliveredTime))
        value = (value * 31) ^ hash(make_hashable(self.messageId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class MessageCommitResult(object):
    """
    Attributes:
     - requestId
     - state
     - messageStoreRequestId
     - messageIds
     - receiverCount
     - successCount
     - failCount
     - blockCount
     - unregisteredCount
     - unrelatedCount
     - errorDescription
    """
    def __init__(self, requestId=None, state=None, messageStoreRequestId=None, messageIds=None, receiverCount=None, successCount=None, failCount=None, blockCount=None, unregisteredCount=None, unrelatedCount=None, errorDescription=None):
        self.requestId = requestId
        self.state = state
        self.messageStoreRequestId = messageStoreRequestId
        self.messageIds = messageIds
        self.receiverCount = receiverCount
        self.successCount = successCount
        self.failCount = failCount
        self.blockCount = blockCount
        self.unregisteredCount = unregisteredCount
        self.unrelatedCount = unrelatedCount
        self.errorDescription = errorDescription

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.state = BuddyResultState(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.messageStoreRequestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.messageIds = []
                    (_, elem0) = iprot.readListBegin()
                    for _ in range(elem0):
                        elem1 = iprot.readString()
                        self.messageIds.append(elem1)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.receiverCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.successCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I64:
                    self.failCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I64:
                    self.blockCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I64:
                    self.unregisteredCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I64:
                    self.unrelatedCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.errorDescription = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('MessageCommitResult')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 2)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.messageStoreRequestId is not None:
            oprot.writeFieldBegin('messageStoreRequestId', TType.STRING, 3)
            oprot.writeString(self.messageStoreRequestId)
            oprot.writeFieldEnd()
        if self.messageIds is not None:
            oprot.writeFieldBegin('messageIds', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.messageIds))
            for elem2 in self.messageIds:
                oprot.writeString(elem2)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.receiverCount is not None:
            oprot.writeFieldBegin('receiverCount', TType.I64, 11)
            oprot.writeI64(self.receiverCount)
            oprot.writeFieldEnd()
        if self.successCount is not None:
            oprot.writeFieldBegin('successCount', TType.I64, 12)
            oprot.writeI64(self.successCount)
            oprot.writeFieldEnd()
        if self.failCount is not None:
            oprot.writeFieldBegin('failCount', TType.I64, 13)
            oprot.writeI64(self.failCount)
            oprot.writeFieldEnd()
        if self.blockCount is not None:
            oprot.writeFieldBegin('blockCount', TType.I64, 14)
            oprot.writeI64(self.blockCount)
            oprot.writeFieldEnd()
        if self.unregisteredCount is not None:
            oprot.writeFieldBegin('unregisteredCount', TType.I64, 15)
            oprot.writeI64(self.unregisteredCount)
            oprot.writeFieldEnd()
        if self.unrelatedCount is not None:
            oprot.writeFieldBegin('unrelatedCount', TType.I64, 16)
            oprot.writeI64(self.unrelatedCount)
            oprot.writeFieldEnd()
        if self.errorDescription is not None:
            oprot.writeFieldBegin('errorDescription', TType.STRING, 21)
            oprot.writeString(self.errorDescription)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.state))
        value = (value * 31) ^ hash(make_hashable(self.messageStoreRequestId))
        value = (value * 31) ^ hash(make_hashable(self.messageIds))
        value = (value * 31) ^ hash(make_hashable(self.receiverCount))
        value = (value * 31) ^ hash(make_hashable(self.successCount))
        value = (value * 31) ^ hash(make_hashable(self.failCount))
        value = (value * 31) ^ hash(make_hashable(self.blockCount))
        value = (value * 31) ^ hash(make_hashable(self.unregisteredCount))
        value = (value * 31) ^ hash(make_hashable(self.unrelatedCount))
        value = (value * 31) ^ hash(make_hashable(self.errorDescription))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CallHost(object):
    """
    Attributes:
     - host
     - port
     - zone
    """
    def __init__(self, host=None, port=None, zone=None):
        self.host = host
        self.port = port
        self.zone = zone

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.host = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.zone = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CallHost')
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 1)
            oprot.writeString(self.host)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 2)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.zone is not None:
            oprot.writeFieldBegin('zone', TType.STRING, 3)
            oprot.writeString(self.zone)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.host))
        value = (value * 31) ^ hash(make_hashable(self.port))
        value = (value * 31) ^ hash(make_hashable(self.zone))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class AgeCheckDocomoResult(object):
    """
    Attributes:
     - authUrl
     - userAgeType
    """
    def __init__(self, authUrl=None, userAgeType=None):
        self.authUrl = authUrl
        self.userAgeType = userAgeType

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.userAgeType = UserAgeType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('AgeCheckDocomoResult')
        if self.authUrl is not None:
            oprot.writeFieldBegin('authUrl', TType.STRING, 1)
            oprot.writeString(self.authUrl)
            oprot.writeFieldEnd()
        if self.userAgeType is not None:
            oprot.writeFieldBegin('userAgeType', TType.I32, 2)
            oprot.writeI32(self.userAgeType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.authUrl))
        value = (value * 31) ^ hash(make_hashable(self.userAgeType))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class AgeCheckRequestResult(object):
    """
    Attributes:
     - authUrl
     - sessionId
    """
    def __init__(self, authUrl=None, sessionId=None):
        self.authUrl = authUrl
        self.sessionId = sessionId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sessionId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('AgeCheckRequestResult')
        if self.authUrl is not None:
            oprot.writeFieldBegin('authUrl', TType.STRING, 1)
            oprot.writeString(self.authUrl)
            oprot.writeFieldEnd()
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.STRING, 2)
            oprot.writeString(self.sessionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.authUrl))
        value = (value * 31) ^ hash(make_hashable(self.sessionId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class TextMessageAnnouncementContents(object):
    """
    Attributes:
     - messageId
     - text
     - senderSquareMemberMid
     - createdAt
    """
    def __init__(self, messageId=None, text=None, senderSquareMemberMid=None, createdAt=None):
        self.messageId = messageId
        self.text = text
        self.senderSquareMemberMid = senderSquareMemberMid
        self.createdAt = createdAt

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.messageId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.text = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.senderSquareMemberMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.createdAt = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('TextMessageAnnouncementContents')
        if self.messageId is not None:
            oprot.writeFieldBegin('messageId', TType.STRING, 1)
            oprot.writeString(self.messageId)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 2)
            oprot.writeString(self.text)
            oprot.writeFieldEnd()
        if self.senderSquareMemberMid is not None:
            oprot.writeFieldBegin('senderSquareMemberMid', TType.STRING, 3)
            oprot.writeString(self.senderSquareMemberMid)
            oprot.writeFieldEnd()
        if self.createdAt is not None:
            oprot.writeFieldBegin('createdAt', TType.I64, 4)
            oprot.writeI64(self.createdAt)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.messageId))
        value = (value * 31) ^ hash(make_hashable(self.text))
        value = (value * 31) ^ hash(make_hashable(self.senderSquareMemberMid))
        value = (value * 31) ^ hash(make_hashable(self.createdAt))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareChatAnnouncementContents(object):
    """
    Attributes:
     - textMessageAnnouncementContents
    """
    def __init__(self, textMessageAnnouncementContents=None):
        self.textMessageAnnouncementContents = textMessageAnnouncementContents

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.textMessageAnnouncementContents = TextMessageAnnouncementContents()
                    self.textMessageAnnouncementContents.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareChatAnnouncementContents')
        if self.textMessageAnnouncementContents is not None:
            oprot.writeFieldBegin('textMessageAnnouncementContents', TType.STRUCT, 1)
            self.textMessageAnnouncementContents.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.textMessageAnnouncementContents))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareChatAnnouncement(object):
    """
    Attributes:
     - announcementSeq
     - type
     - contents
    """
    def __init__(self, announcementSeq=None, type=None, contents=None):
        self.announcementSeq = announcementSeq
        self.type = type
        self.contents = contents

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.announcementSeq = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = SquareChatAnnouncementType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.contents = SquareChatAnnouncementContents()
                    self.contents.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareChatAnnouncement')
        if self.announcementSeq is not None:
            oprot.writeFieldBegin('announcementSeq', TType.I64, 1)
            oprot.writeI64(self.announcementSeq)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.contents is not None:
            oprot.writeFieldBegin('contents', TType.STRUCT, 3)
            self.contents.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.announcementSeq))
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.contents))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Announcement(object):
    """
    Attributes:
     - index
     - forceUpdate
     - title
     - text
     - createdTime
     - pictureUrl
     - thumbnailUrl
    """
    def __init__(self, index=None, forceUpdate=None, title=None, text=None, createdTime=None, pictureUrl=None, thumbnailUrl=None):
        self.index = index
        self.forceUpdate = forceUpdate
        self.title = title
        self.text = text
        self.createdTime = createdTime
        self.pictureUrl = pictureUrl
        self.thumbnailUrl = thumbnailUrl

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.forceUpdate = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.title = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.text = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.pictureUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.thumbnailUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Announcement')
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.I32, 1)
            oprot.writeI32(self.index)
            oprot.writeFieldEnd()
        if self.forceUpdate is not None:
            oprot.writeFieldBegin('forceUpdate', TType.BOOL, 10)
            oprot.writeBool(self.forceUpdate)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 11)
            oprot.writeString(self.title)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 12)
            oprot.writeString(self.text)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 13)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.pictureUrl is not None:
            oprot.writeFieldBegin('pictureUrl', TType.STRING, 14)
            oprot.writeString(self.pictureUrl)
            oprot.writeFieldEnd()
        if self.thumbnailUrl is not None:
            oprot.writeFieldBegin('thumbnailUrl', TType.STRING, 15)
            oprot.writeString(self.thumbnailUrl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.index))
        value = (value * 31) ^ hash(make_hashable(self.forceUpdate))
        value = (value * 31) ^ hash(make_hashable(self.title))
        value = (value * 31) ^ hash(make_hashable(self.text))
        value = (value * 31) ^ hash(make_hashable(self.createdTime))
        value = (value * 31) ^ hash(make_hashable(self.pictureUrl))
        value = (value * 31) ^ hash(make_hashable(self.thumbnailUrl))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChannelProvider(object):
    """
    Attributes:
     - name
    """
    def __init__(self, name=None):
        self.name = name

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChannelProvider')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.name))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class E2EEPublicKey(object):
    """
    Attributes:
     - version
     - keyId
     - keyData
     - createdTime
    """
    def __init__(self, version=None, keyId=None, keyData=None, createdTime=None):
        self.version = version
        self.keyId = keyId
        self.keyData = keyData
        self.createdTime = createdTime

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.keyId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.keyData = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('E2EEPublicKey')
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.I32, 1)
            oprot.writeI32(self.version)
            oprot.writeFieldEnd()
        if self.keyId is not None:
            oprot.writeFieldBegin('keyId', TType.I32, 2)
            oprot.writeI32(self.keyId)
            oprot.writeFieldEnd()
        if self.keyData is not None:
            oprot.writeFieldBegin('keyData', TType.STRING, 4)
            oprot.writeBinary(self.keyData)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 5)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.version))
        value = (value * 31) ^ hash(make_hashable(self.keyId))
        value = (value * 31) ^ hash(make_hashable(self.keyData))
        value = (value * 31) ^ hash(make_hashable(self.createdTime))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChannelDomain(object):
    """
    Attributes:
     - host
     - removed
    """
    def __init__(self, host=None, removed=None):
        self.host = host
        self.removed = removed

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.host = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.removed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChannelDomain')
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 1)
            oprot.writeString(self.host)
            oprot.writeFieldEnd()
        if self.removed is not None:
            oprot.writeFieldBegin('removed', TType.BOOL, 2)
            oprot.writeBool(self.removed)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.host))
        value = (value * 31) ^ hash(make_hashable(self.removed))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class E2EENegotiationResult(object):
    """
    Attributes:
     - allowedTypes
     - publicKey
    """
    def __init__(self, allowedTypes=None, publicKey=None):
        self.allowedTypes = allowedTypes
        self.publicKey = publicKey

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.SET:
                    self.allowedTypes = set()
                    (_, elem3) = iprot.readSetBegin()
                    for _ in range(elem3):
                        elem4 = ContentType(iprot.readI32())
                        self.allowedTypes.add(elem4)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.publicKey = E2EEPublicKey()
                    self.publicKey.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('E2EENegotiationResult')
        if self.allowedTypes is not None:
            oprot.writeFieldBegin('allowedTypes', TType.SET, 1)
            oprot.writeSetBegin(TType.I32, len(self.allowedTypes))
            for elem5 in self.allowedTypes:
                oprot.writeI32(elem5)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.publicKey is not None:
            oprot.writeFieldBegin('publicKey', TType.STRUCT, 2)
            self.publicKey.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.allowedTypes))
        value = (value * 31) ^ hash(make_hashable(self.publicKey))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class OTPResult(object):
    """
    Attributes:
     - otpId
     - otp
    """
    def __init__(self, otpId=None, otp=None):
        self.otpId = otpId
        self.otp = otp

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.otpId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.otp = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('OTPResult')
        if self.otpId is not None:
            oprot.writeFieldBegin('otpId', TType.STRING, 1)
            oprot.writeString(self.otpId)
            oprot.writeFieldEnd()
        if self.otp is not None:
            oprot.writeFieldBegin('otp', TType.STRING, 2)
            oprot.writeString(self.otp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.otpId))
        value = (value * 31) ^ hash(make_hashable(self.otp))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Square(object):
    """
    Attributes:
     - mid
     - name
     - welcomeMessage
     - profileImageObsHash
     - desc
     - searchable
     - type
     - categoryID
     - invitationURL
     - revision
     - ableToUseInvitationTicket
     - state
    """
    def __init__(self, mid=None, name=None, welcomeMessage=None, profileImageObsHash=None, desc=None, searchable=None, type=None, categoryID=None, invitationURL=None, revision=None, ableToUseInvitationTicket=None, state=None):
        self.mid = mid
        self.name = name
        self.welcomeMessage = welcomeMessage
        self.profileImageObsHash = profileImageObsHash
        self.desc = desc
        self.searchable = searchable
        self.type = type
        self.categoryID = categoryID
        self.invitationURL = invitationURL
        self.revision = revision
        self.ableToUseInvitationTicket = ableToUseInvitationTicket
        self.state = state

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.welcomeMessage = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.profileImageObsHash = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.desc = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.searchable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.type = SquareType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.categoryID = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.invitationURL = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.ableToUseInvitationTicket = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.state = SquareState(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Square')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        if self.welcomeMessage is not None:
            oprot.writeFieldBegin('welcomeMessage', TType.STRING, 3)
            oprot.writeString(self.welcomeMessage)
            oprot.writeFieldEnd()
        if self.profileImageObsHash is not None:
            oprot.writeFieldBegin('profileImageObsHash', TType.STRING, 4)
            oprot.writeString(self.profileImageObsHash)
            oprot.writeFieldEnd()
        if self.desc is not None:
            oprot.writeFieldBegin('desc', TType.STRING, 5)
            oprot.writeString(self.desc)
            oprot.writeFieldEnd()
        if self.searchable is not None:
            oprot.writeFieldBegin('searchable', TType.BOOL, 6)
            oprot.writeBool(self.searchable)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 7)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.categoryID is not None:
            oprot.writeFieldBegin('categoryID', TType.I32, 8)
            oprot.writeI32(self.categoryID)
            oprot.writeFieldEnd()
        if self.invitationURL is not None:
            oprot.writeFieldBegin('invitationURL', TType.STRING, 9)
            oprot.writeString(self.invitationURL)
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 10)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        if self.ableToUseInvitationTicket is not None:
            oprot.writeFieldBegin('ableToUseInvitationTicket', TType.BOOL, 11)
            oprot.writeBool(self.ableToUseInvitationTicket)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 12)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.name))
        value = (value * 31) ^ hash(make_hashable(self.welcomeMessage))
        value = (value * 31) ^ hash(make_hashable(self.profileImageObsHash))
        value = (value * 31) ^ hash(make_hashable(self.desc))
        value = (value * 31) ^ hash(make_hashable(self.searchable))
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.categoryID))
        value = (value * 31) ^ hash(make_hashable(self.invitationURL))
        value = (value * 31) ^ hash(make_hashable(self.revision))
        value = (value * 31) ^ hash(make_hashable(self.ableToUseInvitationTicket))
        value = (value * 31) ^ hash(make_hashable(self.state))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareAuthority(object):
    """
    Attributes:
     - squareMid
     - updateSquareProfile
     - inviteNewMember
     - approveJoinRequest
     - createPost
     - createOpenSquareChat
     - deleteSquareChatOrPost
     - removeSquareMember
     - grantRole
     - enableInvitationTicket
     - revision
    """
    def __init__(self, squareMid=None, updateSquareProfile=None, inviteNewMember=None, approveJoinRequest=None, createPost=None, createOpenSquareChat=None, deleteSquareChatOrPost=None, removeSquareMember=None, grantRole=None, enableInvitationTicket=None, revision=None):
        self.squareMid = squareMid
        self.updateSquareProfile = updateSquareProfile
        self.inviteNewMember = inviteNewMember
        self.approveJoinRequest = approveJoinRequest
        self.createPost = createPost
        self.createOpenSquareChat = createOpenSquareChat
        self.deleteSquareChatOrPost = deleteSquareChatOrPost
        self.removeSquareMember = removeSquareMember
        self.grantRole = grantRole
        self.enableInvitationTicket = enableInvitationTicket
        self.revision = revision

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.updateSquareProfile = SquareMemberRole(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.inviteNewMember = SquareMemberRole(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.approveJoinRequest = SquareMemberRole(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.createPost = SquareMemberRole(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.createOpenSquareChat = SquareMemberRole(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.deleteSquareChatOrPost = SquareMemberRole(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.removeSquareMember = SquareMemberRole(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.grantRole = SquareMemberRole(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.enableInvitationTicket = SquareMemberRole(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareAuthority')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 1)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.updateSquareProfile is not None:
            oprot.writeFieldBegin('updateSquareProfile', TType.I32, 2)
            oprot.writeI32(self.updateSquareProfile)
            oprot.writeFieldEnd()
        if self.inviteNewMember is not None:
            oprot.writeFieldBegin('inviteNewMember', TType.I32, 3)
            oprot.writeI32(self.inviteNewMember)
            oprot.writeFieldEnd()
        if self.approveJoinRequest is not None:
            oprot.writeFieldBegin('approveJoinRequest', TType.I32, 4)
            oprot.writeI32(self.approveJoinRequest)
            oprot.writeFieldEnd()
        if self.createPost is not None:
            oprot.writeFieldBegin('createPost', TType.I32, 5)
            oprot.writeI32(self.createPost)
            oprot.writeFieldEnd()
        if self.createOpenSquareChat is not None:
            oprot.writeFieldBegin('createOpenSquareChat', TType.I32, 6)
            oprot.writeI32(self.createOpenSquareChat)
            oprot.writeFieldEnd()
        if self.deleteSquareChatOrPost is not None:
            oprot.writeFieldBegin('deleteSquareChatOrPost', TType.I32, 7)
            oprot.writeI32(self.deleteSquareChatOrPost)
            oprot.writeFieldEnd()
        if self.removeSquareMember is not None:
            oprot.writeFieldBegin('removeSquareMember', TType.I32, 8)
            oprot.writeI32(self.removeSquareMember)
            oprot.writeFieldEnd()
        if self.grantRole is not None:
            oprot.writeFieldBegin('grantRole', TType.I32, 9)
            oprot.writeI32(self.grantRole)
            oprot.writeFieldEnd()
        if self.enableInvitationTicket is not None:
            oprot.writeFieldBegin('enableInvitationTicket', TType.I32, 10)
            oprot.writeI32(self.enableInvitationTicket)
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 11)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.updateSquareProfile))
        value = (value * 31) ^ hash(make_hashable(self.inviteNewMember))
        value = (value * 31) ^ hash(make_hashable(self.approveJoinRequest))
        value = (value * 31) ^ hash(make_hashable(self.createPost))
        value = (value * 31) ^ hash(make_hashable(self.createOpenSquareChat))
        value = (value * 31) ^ hash(make_hashable(self.deleteSquareChatOrPost))
        value = (value * 31) ^ hash(make_hashable(self.removeSquareMember))
        value = (value * 31) ^ hash(make_hashable(self.grantRole))
        value = (value * 31) ^ hash(make_hashable(self.enableInvitationTicket))
        value = (value * 31) ^ hash(make_hashable(self.revision))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquarePreference(object):
    """
    Attributes:
     - favoriteTimestamp
     - notiForNewJoinRequest
    """
    def __init__(self, favoriteTimestamp=None, notiForNewJoinRequest=None):
        self.favoriteTimestamp = favoriteTimestamp
        self.notiForNewJoinRequest = notiForNewJoinRequest

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.favoriteTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.notiForNewJoinRequest = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquarePreference')
        if self.favoriteTimestamp is not None:
            oprot.writeFieldBegin('favoriteTimestamp', TType.I64, 1)
            oprot.writeI64(self.favoriteTimestamp)
            oprot.writeFieldEnd()
        if self.notiForNewJoinRequest is not None:
            oprot.writeFieldBegin('notiForNewJoinRequest', TType.BOOL, 2)
            oprot.writeBool(self.notiForNewJoinRequest)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.favoriteTimestamp))
        value = (value * 31) ^ hash(make_hashable(self.notiForNewJoinRequest))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareMember(object):
    """
    Attributes:
     - squareMemberMid
     - squareMid
     - displayName
     - profileImageObsHash
     - ableToReceiveMessage
     - membershipState
     - role
     - revision
     - preference
     - joinMessage
    """
    def __init__(self, squareMemberMid=None, squareMid=None, displayName=None, profileImageObsHash=None, ableToReceiveMessage=None, membershipState=None, role=None, revision=None, preference=None, joinMessage=None):
        self.squareMemberMid = squareMemberMid
        self.squareMid = squareMid
        self.displayName = displayName
        self.profileImageObsHash = profileImageObsHash
        self.ableToReceiveMessage = ableToReceiveMessage
        self.membershipState = membershipState
        self.role = role
        self.revision = revision
        self.preference = preference
        self.joinMessage = joinMessage

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareMemberMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.profileImageObsHash = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.ableToReceiveMessage = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.membershipState = SquareMembershipState(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.role = SquareMemberRole(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.preference = SquarePreference()
                    self.preference.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.joinMessage = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareMember')
        if self.squareMemberMid is not None:
            oprot.writeFieldBegin('squareMemberMid', TType.STRING, 1)
            oprot.writeString(self.squareMemberMid)
            oprot.writeFieldEnd()
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 2)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 3)
            oprot.writeString(self.displayName)
            oprot.writeFieldEnd()
        if self.profileImageObsHash is not None:
            oprot.writeFieldBegin('profileImageObsHash', TType.STRING, 4)
            oprot.writeString(self.profileImageObsHash)
            oprot.writeFieldEnd()
        if self.ableToReceiveMessage is not None:
            oprot.writeFieldBegin('ableToReceiveMessage', TType.BOOL, 5)
            oprot.writeBool(self.ableToReceiveMessage)
            oprot.writeFieldEnd()
        if self.membershipState is not None:
            oprot.writeFieldBegin('membershipState', TType.I32, 7)
            oprot.writeI32(self.membershipState)
            oprot.writeFieldEnd()
        if self.role is not None:
            oprot.writeFieldBegin('role', TType.I32, 8)
            oprot.writeI32(self.role)
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 9)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        if self.preference is not None:
            oprot.writeFieldBegin('preference', TType.STRUCT, 10)
            self.preference.write(oprot)
            oprot.writeFieldEnd()
        if self.joinMessage is not None:
            oprot.writeFieldBegin('joinMessage', TType.STRING, 11)
            oprot.writeString(self.joinMessage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMemberMid))
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.displayName))
        value = (value * 31) ^ hash(make_hashable(self.profileImageObsHash))
        value = (value * 31) ^ hash(make_hashable(self.ableToReceiveMessage))
        value = (value * 31) ^ hash(make_hashable(self.membershipState))
        value = (value * 31) ^ hash(make_hashable(self.role))
        value = (value * 31) ^ hash(make_hashable(self.revision))
        value = (value * 31) ^ hash(make_hashable(self.preference))
        value = (value * 31) ^ hash(make_hashable(self.joinMessage))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareMemberRelation(object):
    """
    Attributes:
     - state
     - revision
    """
    def __init__(self, state=None, revision=None):
        self.state = state
        self.revision = revision

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.state = SquareMemberRelationState(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareMemberRelation')
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 1)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 2)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.state))
        value = (value * 31) ^ hash(make_hashable(self.revision))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareFeature(object):
    """
    Attributes:
     - controlState
     - booleanValue
    """
    def __init__(self, controlState=None, booleanValue=None):
        self.controlState = controlState
        self.booleanValue = booleanValue

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.controlState = SquareFeatureControlState(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.booleanValue = BooleanState(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareFeature')
        if self.controlState is not None:
            oprot.writeFieldBegin('controlState', TType.I32, 1)
            oprot.writeI32(self.controlState)
            oprot.writeFieldEnd()
        if self.booleanValue is not None:
            oprot.writeFieldBegin('booleanValue', TType.I32, 2)
            oprot.writeI32(self.booleanValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.controlState))
        value = (value * 31) ^ hash(make_hashable(self.booleanValue))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareFeatureSet(object):
    """
    Attributes:
     - squareMid
     - revision
     - creatingSecretSquareChat
     - invitingIntoOpenSquareChat
    """
    def __init__(self, squareMid=None, revision=None, creatingSecretSquareChat=None, invitingIntoOpenSquareChat=None):
        self.squareMid = squareMid
        self.revision = revision
        self.creatingSecretSquareChat = creatingSecretSquareChat
        self.invitingIntoOpenSquareChat = invitingIntoOpenSquareChat

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.creatingSecretSquareChat = SquareFeature()
                    self.creatingSecretSquareChat.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.invitingIntoOpenSquareChat = SquareFeature()
                    self.invitingIntoOpenSquareChat.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareFeatureSet')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 1)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 2)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        if self.creatingSecretSquareChat is not None:
            oprot.writeFieldBegin('creatingSecretSquareChat', TType.STRUCT, 11)
            self.creatingSecretSquareChat.write(oprot)
            oprot.writeFieldEnd()
        if self.invitingIntoOpenSquareChat is not None:
            oprot.writeFieldBegin('invitingIntoOpenSquareChat', TType.STRUCT, 12)
            self.invitingIntoOpenSquareChat.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.revision))
        value = (value * 31) ^ hash(make_hashable(self.creatingSecretSquareChat))
        value = (value * 31) ^ hash(make_hashable(self.invitingIntoOpenSquareChat))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareStatus(object):
    """
    Attributes:
     - memberCount
     - joinRequestCount
     - lastJoinRequestAt
     - openChatCount
    """
    def __init__(self, memberCount=None, joinRequestCount=None, lastJoinRequestAt=None, openChatCount=None):
        self.memberCount = memberCount
        self.joinRequestCount = joinRequestCount
        self.lastJoinRequestAt = lastJoinRequestAt
        self.openChatCount = openChatCount

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.memberCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.joinRequestCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.lastJoinRequestAt = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.openChatCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareStatus')
        if self.memberCount is not None:
            oprot.writeFieldBegin('memberCount', TType.I32, 1)
            oprot.writeI32(self.memberCount)
            oprot.writeFieldEnd()
        if self.joinRequestCount is not None:
            oprot.writeFieldBegin('joinRequestCount', TType.I32, 2)
            oprot.writeI32(self.joinRequestCount)
            oprot.writeFieldEnd()
        if self.lastJoinRequestAt is not None:
            oprot.writeFieldBegin('lastJoinRequestAt', TType.I64, 3)
            oprot.writeI64(self.lastJoinRequestAt)
            oprot.writeFieldEnd()
        if self.openChatCount is not None:
            oprot.writeFieldBegin('openChatCount', TType.I32, 4)
            oprot.writeI32(self.openChatCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.memberCount))
        value = (value * 31) ^ hash(make_hashable(self.joinRequestCount))
        value = (value * 31) ^ hash(make_hashable(self.lastJoinRequestAt))
        value = (value * 31) ^ hash(make_hashable(self.openChatCount))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareChat(object):
    """
    Attributes:
     - squareChatMid
     - squareMid
     - type
     - name
     - chatImageObsHash
     - squareChatRevision
     - maxMemberCount
     - state
    """
    def __init__(self, squareChatMid=None, squareMid=None, type=None, name=None, chatImageObsHash=None, squareChatRevision=None, maxMemberCount=None, state=None):
        self.squareChatMid = squareChatMid
        self.squareMid = squareMid
        self.type = type
        self.name = name
        self.chatImageObsHash = chatImageObsHash
        self.squareChatRevision = squareChatRevision
        self.maxMemberCount = maxMemberCount
        self.state = state

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = SquareChatType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.chatImageObsHash = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.squareChatRevision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.maxMemberCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.state = SquareChatState(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareChat')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 1)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 2)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 4)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        if self.chatImageObsHash is not None:
            oprot.writeFieldBegin('chatImageObsHash', TType.STRING, 5)
            oprot.writeString(self.chatImageObsHash)
            oprot.writeFieldEnd()
        if self.squareChatRevision is not None:
            oprot.writeFieldBegin('squareChatRevision', TType.I64, 6)
            oprot.writeI64(self.squareChatRevision)
            oprot.writeFieldEnd()
        if self.maxMemberCount is not None:
            oprot.writeFieldBegin('maxMemberCount', TType.I32, 7)
            oprot.writeI32(self.maxMemberCount)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 8)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.name))
        value = (value * 31) ^ hash(make_hashable(self.chatImageObsHash))
        value = (value * 31) ^ hash(make_hashable(self.squareChatRevision))
        value = (value * 31) ^ hash(make_hashable(self.maxMemberCount))
        value = (value * 31) ^ hash(make_hashable(self.state))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class NoteStatus(object):
    """
    Attributes:
     - noteCount
     - latestCreatedAt
    """
    def __init__(self, noteCount=None, latestCreatedAt=None):
        self.noteCount = noteCount
        self.latestCreatedAt = latestCreatedAt

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.noteCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.latestCreatedAt = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('NoteStatus')
        if self.noteCount is not None:
            oprot.writeFieldBegin('noteCount', TType.I32, 1)
            oprot.writeI32(self.noteCount)
            oprot.writeFieldEnd()
        if self.latestCreatedAt is not None:
            oprot.writeFieldBegin('latestCreatedAt', TType.I64, 2)
            oprot.writeI64(self.latestCreatedAt)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.noteCount))
        value = (value * 31) ^ hash(make_hashable(self.latestCreatedAt))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareInfo(object):
    """
    Attributes:
     - square
     - squareStatus
     - squareNoteStatus
    """
    def __init__(self, square=None, squareStatus=None, squareNoteStatus=None):
        self.square = square
        self.squareStatus = squareStatus
        self.squareNoteStatus = squareNoteStatus

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.square = Square()
                    self.square.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.squareStatus = SquareStatus()
                    self.squareStatus.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.squareNoteStatus = NoteStatus()
                    self.squareNoteStatus.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareInfo')
        if self.square is not None:
            oprot.writeFieldBegin('square', TType.STRUCT, 1)
            self.square.write(oprot)
            oprot.writeFieldEnd()
        if self.squareStatus is not None:
            oprot.writeFieldBegin('squareStatus', TType.STRUCT, 2)
            self.squareStatus.write(oprot)
            oprot.writeFieldEnd()
        if self.squareNoteStatus is not None:
            oprot.writeFieldBegin('squareNoteStatus', TType.STRUCT, 3)
            self.squareNoteStatus.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.square))
        value = (value * 31) ^ hash(make_hashable(self.squareStatus))
        value = (value * 31) ^ hash(make_hashable(self.squareNoteStatus))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BotUseInfo(object):
    """
    Attributes:
     - botUseAgreementAccepted
     - botInFriends
     - primaryApplication
     - locale
    """
    def __init__(self, botUseAgreementAccepted=None, botInFriends=None, primaryApplication=None, locale=None):
        self.botUseAgreementAccepted = botUseAgreementAccepted
        self.botInFriends = botInFriends
        self.primaryApplication = primaryApplication
        self.locale = locale

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.botUseAgreementAccepted = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.botInFriends = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.primaryApplication = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.locale = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BotUseInfo')
        if self.botUseAgreementAccepted is not None:
            oprot.writeFieldBegin('botUseAgreementAccepted', TType.BOOL, 1)
            oprot.writeBool(self.botUseAgreementAccepted)
            oprot.writeFieldEnd()
        if self.botInFriends is not None:
            oprot.writeFieldBegin('botInFriends', TType.BOOL, 2)
            oprot.writeBool(self.botInFriends)
            oprot.writeFieldEnd()
        if self.primaryApplication is not None:
            oprot.writeFieldBegin('primaryApplication', TType.STRING, 3)
            oprot.writeString(self.primaryApplication)
            oprot.writeFieldEnd()
        if self.locale is not None:
            oprot.writeFieldBegin('locale', TType.STRING, 4)
            oprot.writeString(self.locale)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.botUseAgreementAccepted))
        value = (value * 31) ^ hash(make_hashable(self.botInFriends))
        value = (value * 31) ^ hash(make_hashable(self.primaryApplication))
        value = (value * 31) ^ hash(make_hashable(self.locale))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PaidCallAdCountry(object):
    """
    Attributes:
     - countryCode
     - rateDivision
    """
    def __init__(self, countryCode=None, rateDivision=None):
        self.countryCode = countryCode
        self.rateDivision = rateDivision

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.countryCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.rateDivision = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PaidCallAdCountry')
        if self.countryCode is not None:
            oprot.writeFieldBegin('countryCode', TType.STRING, 1)
            oprot.writeString(self.countryCode)
            oprot.writeFieldEnd()
        if self.rateDivision is not None:
            oprot.writeFieldBegin('rateDivision', TType.STRING, 2)
            oprot.writeString(self.rateDivision)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.countryCode))
        value = (value * 31) ^ hash(make_hashable(self.rateDivision))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PaidCallAdResult(object):
    """
    Attributes:
     - adRemains
    """
    def __init__(self, adRemains=None):
        self.adRemains = adRemains

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.adRemains = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PaidCallAdResult')
        if self.adRemains is not None:
            oprot.writeFieldBegin('adRemains', TType.I32, 1)
            oprot.writeI32(self.adRemains)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.adRemains))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PaidCallBalance(object):
    """
    Attributes:
     - productType
     - productName
     - unit
     - limitedPaidBalance
     - limitedFreeBalance
     - unlimitedPaidBalance
     - unlimitedFreeBalance
     - startTime
     - endTime
     - autopayEnabled
    """
    def __init__(self, productType=None, productName=None, unit=None, limitedPaidBalance=None, limitedFreeBalance=None, unlimitedPaidBalance=None, unlimitedFreeBalance=None, startTime=None, endTime=None, autopayEnabled=None):
        self.productType = productType
        self.productName = productName
        self.unit = unit
        self.limitedPaidBalance = limitedPaidBalance
        self.limitedFreeBalance = limitedFreeBalance
        self.unlimitedPaidBalance = unlimitedPaidBalance
        self.unlimitedFreeBalance = unlimitedFreeBalance
        self.startTime = startTime
        self.endTime = endTime
        self.autopayEnabled = autopayEnabled

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.productType = PaidCallProductType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.productName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.unit = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.limitedPaidBalance = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.limitedFreeBalance = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.unlimitedPaidBalance = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.unlimitedFreeBalance = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.startTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.endTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.autopayEnabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PaidCallBalance')
        if self.productType is not None:
            oprot.writeFieldBegin('productType', TType.I32, 1)
            oprot.writeI32(self.productType)
            oprot.writeFieldEnd()
        if self.productName is not None:
            oprot.writeFieldBegin('productName', TType.STRING, 2)
            oprot.writeString(self.productName)
            oprot.writeFieldEnd()
        if self.unit is not None:
            oprot.writeFieldBegin('unit', TType.STRING, 3)
            oprot.writeString(self.unit)
            oprot.writeFieldEnd()
        if self.limitedPaidBalance is not None:
            oprot.writeFieldBegin('limitedPaidBalance', TType.I32, 4)
            oprot.writeI32(self.limitedPaidBalance)
            oprot.writeFieldEnd()
        if self.limitedFreeBalance is not None:
            oprot.writeFieldBegin('limitedFreeBalance', TType.I32, 5)
            oprot.writeI32(self.limitedFreeBalance)
            oprot.writeFieldEnd()
        if self.unlimitedPaidBalance is not None:
            oprot.writeFieldBegin('unlimitedPaidBalance', TType.I32, 6)
            oprot.writeI32(self.unlimitedPaidBalance)
            oprot.writeFieldEnd()
        if self.unlimitedFreeBalance is not None:
            oprot.writeFieldBegin('unlimitedFreeBalance', TType.I32, 7)
            oprot.writeI32(self.unlimitedFreeBalance)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.I64, 8)
            oprot.writeI64(self.startTime)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.I64, 9)
            oprot.writeI64(self.endTime)
            oprot.writeFieldEnd()
        if self.autopayEnabled is not None:
            oprot.writeFieldBegin('autopayEnabled', TType.BOOL, 10)
            oprot.writeBool(self.autopayEnabled)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.productType))
        value = (value * 31) ^ hash(make_hashable(self.productName))
        value = (value * 31) ^ hash(make_hashable(self.unit))
        value = (value * 31) ^ hash(make_hashable(self.limitedPaidBalance))
        value = (value * 31) ^ hash(make_hashable(self.limitedFreeBalance))
        value = (value * 31) ^ hash(make_hashable(self.unlimitedPaidBalance))
        value = (value * 31) ^ hash(make_hashable(self.unlimitedFreeBalance))
        value = (value * 31) ^ hash(make_hashable(self.startTime))
        value = (value * 31) ^ hash(make_hashable(self.endTime))
        value = (value * 31) ^ hash(make_hashable(self.autopayEnabled))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PaidCallCurrencyExchangeRate(object):
    """
    Attributes:
     - currencyCode
     - currencyName
     - currencySign
     - preferred
     - coinRate
     - creditRate
    """
    def __init__(self, currencyCode=None, currencyName=None, currencySign=None, preferred=None, coinRate=None, creditRate=None):
        self.currencyCode = currencyCode
        self.currencyName = currencyName
        self.currencySign = currencySign
        self.preferred = preferred
        self.coinRate = coinRate
        self.creditRate = creditRate

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.currencyCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.currencyName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.currencySign = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.preferred = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.coinRate = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.creditRate = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PaidCallCurrencyExchangeRate')
        if self.currencyCode is not None:
            oprot.writeFieldBegin('currencyCode', TType.STRING, 1)
            oprot.writeString(self.currencyCode)
            oprot.writeFieldEnd()
        if self.currencyName is not None:
            oprot.writeFieldBegin('currencyName', TType.STRING, 2)
            oprot.writeString(self.currencyName)
            oprot.writeFieldEnd()
        if self.currencySign is not None:
            oprot.writeFieldBegin('currencySign', TType.STRING, 3)
            oprot.writeString(self.currencySign)
            oprot.writeFieldEnd()
        if self.preferred is not None:
            oprot.writeFieldBegin('preferred', TType.BOOL, 4)
            oprot.writeBool(self.preferred)
            oprot.writeFieldEnd()
        if self.coinRate is not None:
            oprot.writeFieldBegin('coinRate', TType.STRING, 5)
            oprot.writeString(self.coinRate)
            oprot.writeFieldEnd()
        if self.creditRate is not None:
            oprot.writeFieldBegin('creditRate', TType.STRING, 6)
            oprot.writeString(self.creditRate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.currencyCode))
        value = (value * 31) ^ hash(make_hashable(self.currencyName))
        value = (value * 31) ^ hash(make_hashable(self.currencySign))
        value = (value * 31) ^ hash(make_hashable(self.preferred))
        value = (value * 31) ^ hash(make_hashable(self.coinRate))
        value = (value * 31) ^ hash(make_hashable(self.creditRate))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ExtendedProfileBirthday(object):
    """
    Attributes:
     - year
     - yearPrivacyLevelType
     - yearEnabled
     - day
     - dayPrivacyLevelType
     - dayEnabled
    """
    def __init__(self, year=None, yearPrivacyLevelType=None, yearEnabled=None, day=None, dayPrivacyLevelType=None, dayEnabled=None):
        self.year = year
        self.yearPrivacyLevelType = yearPrivacyLevelType
        self.yearEnabled = yearEnabled
        self.day = day
        self.dayPrivacyLevelType = dayPrivacyLevelType
        self.dayEnabled = dayEnabled

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.year = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.yearPrivacyLevelType = PrivacyLevelType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.yearEnabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.day = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.dayPrivacyLevelType = PrivacyLevelType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.dayEnabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ExtendedProfileBirthday')
        if self.year is not None:
            oprot.writeFieldBegin('year', TType.STRING, 1)
            oprot.writeString(self.year)
            oprot.writeFieldEnd()
        if self.yearPrivacyLevelType is not None:
            oprot.writeFieldBegin('yearPrivacyLevelType', TType.I32, 2)
            oprot.writeI32(self.yearPrivacyLevelType)
            oprot.writeFieldEnd()
        if self.yearEnabled is not None:
            oprot.writeFieldBegin('yearEnabled', TType.BOOL, 3)
            oprot.writeBool(self.yearEnabled)
            oprot.writeFieldEnd()
        if self.day is not None:
            oprot.writeFieldBegin('day', TType.STRING, 5)
            oprot.writeString(self.day)
            oprot.writeFieldEnd()
        if self.dayPrivacyLevelType is not None:
            oprot.writeFieldBegin('dayPrivacyLevelType', TType.I32, 6)
            oprot.writeI32(self.dayPrivacyLevelType)
            oprot.writeFieldEnd()
        if self.dayEnabled is not None:
            oprot.writeFieldBegin('dayEnabled', TType.BOOL, 7)
            oprot.writeBool(self.dayEnabled)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.year))
        value = (value * 31) ^ hash(make_hashable(self.yearPrivacyLevelType))
        value = (value * 31) ^ hash(make_hashable(self.yearEnabled))
        value = (value * 31) ^ hash(make_hashable(self.day))
        value = (value * 31) ^ hash(make_hashable(self.dayPrivacyLevelType))
        value = (value * 31) ^ hash(make_hashable(self.dayEnabled))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ExtendedProfile(object):
    """
    Attributes:
     - birthday
    """
    def __init__(self, birthday=None):
        self.birthday = birthday

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.birthday = ExtendedProfileBirthday()
                    self.birthday.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ExtendedProfile')
        if self.birthday is not None:
            oprot.writeFieldBegin('birthday', TType.STRUCT, 1)
            self.birthday.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.birthday))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PaidCallDialing(object):
    """
    Attributes:
     - type
     - dialedNumber
     - serviceDomain
     - productType
     - productName
     - multipleProduct
     - callerIdStatus
     - balance
     - unit
     - rate
     - displayCode
     - calledNumber
     - calleeNationalNumber
     - calleeCallingCode
     - rateDivision
     - adMaxMin
     - adRemains
     - adSessionId
    """
    def __init__(self, type=None, dialedNumber=None, serviceDomain=None, productType=None, productName=None, multipleProduct=None, callerIdStatus=None, balance=None, unit=None, rate=None, displayCode=None, calledNumber=None, calleeNationalNumber=None, calleeCallingCode=None, rateDivision=None, adMaxMin=None, adRemains=None, adSessionId=None):
        self.type = type
        self.dialedNumber = dialedNumber
        self.serviceDomain = serviceDomain
        self.productType = productType
        self.productName = productName
        self.multipleProduct = multipleProduct
        self.callerIdStatus = callerIdStatus
        self.balance = balance
        self.unit = unit
        self.rate = rate
        self.displayCode = displayCode
        self.calledNumber = calledNumber
        self.calleeNationalNumber = calleeNationalNumber
        self.calleeCallingCode = calleeCallingCode
        self.rateDivision = rateDivision
        self.adMaxMin = adMaxMin
        self.adRemains = adRemains
        self.adSessionId = adSessionId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = PaidCallType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.dialedNumber = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.serviceDomain = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.productType = PaidCallProductType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.productName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.multipleProduct = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.callerIdStatus = PaidCallerIdStatus(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.balance = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.unit = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.rate = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.displayCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.calledNumber = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.calleeNationalNumber = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.calleeCallingCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.rateDivision = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.adMaxMin = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.adRemains = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.adSessionId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PaidCallDialing')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.dialedNumber is not None:
            oprot.writeFieldBegin('dialedNumber', TType.STRING, 2)
            oprot.writeString(self.dialedNumber)
            oprot.writeFieldEnd()
        if self.serviceDomain is not None:
            oprot.writeFieldBegin('serviceDomain', TType.STRING, 3)
            oprot.writeString(self.serviceDomain)
            oprot.writeFieldEnd()
        if self.productType is not None:
            oprot.writeFieldBegin('productType', TType.I32, 4)
            oprot.writeI32(self.productType)
            oprot.writeFieldEnd()
        if self.productName is not None:
            oprot.writeFieldBegin('productName', TType.STRING, 5)
            oprot.writeString(self.productName)
            oprot.writeFieldEnd()
        if self.multipleProduct is not None:
            oprot.writeFieldBegin('multipleProduct', TType.BOOL, 6)
            oprot.writeBool(self.multipleProduct)
            oprot.writeFieldEnd()
        if self.callerIdStatus is not None:
            oprot.writeFieldBegin('callerIdStatus', TType.I32, 7)
            oprot.writeI32(self.callerIdStatus)
            oprot.writeFieldEnd()
        if self.balance is not None:
            oprot.writeFieldBegin('balance', TType.I32, 10)
            oprot.writeI32(self.balance)
            oprot.writeFieldEnd()
        if self.unit is not None:
            oprot.writeFieldBegin('unit', TType.STRING, 11)
            oprot.writeString(self.unit)
            oprot.writeFieldEnd()
        if self.rate is not None:
            oprot.writeFieldBegin('rate', TType.I32, 12)
            oprot.writeI32(self.rate)
            oprot.writeFieldEnd()
        if self.displayCode is not None:
            oprot.writeFieldBegin('displayCode', TType.STRING, 13)
            oprot.writeString(self.displayCode)
            oprot.writeFieldEnd()
        if self.calledNumber is not None:
            oprot.writeFieldBegin('calledNumber', TType.STRING, 14)
            oprot.writeString(self.calledNumber)
            oprot.writeFieldEnd()
        if self.calleeNationalNumber is not None:
            oprot.writeFieldBegin('calleeNationalNumber', TType.STRING, 15)
            oprot.writeString(self.calleeNationalNumber)
            oprot.writeFieldEnd()
        if self.calleeCallingCode is not None:
            oprot.writeFieldBegin('calleeCallingCode', TType.STRING, 16)
            oprot.writeString(self.calleeCallingCode)
            oprot.writeFieldEnd()
        if self.rateDivision is not None:
            oprot.writeFieldBegin('rateDivision', TType.STRING, 17)
            oprot.writeString(self.rateDivision)
            oprot.writeFieldEnd()
        if self.adMaxMin is not None:
            oprot.writeFieldBegin('adMaxMin', TType.I32, 20)
            oprot.writeI32(self.adMaxMin)
            oprot.writeFieldEnd()
        if self.adRemains is not None:
            oprot.writeFieldBegin('adRemains', TType.I32, 21)
            oprot.writeI32(self.adRemains)
            oprot.writeFieldEnd()
        if self.adSessionId is not None:
            oprot.writeFieldBegin('adSessionId', TType.STRING, 22)
            oprot.writeString(self.adSessionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.dialedNumber))
        value = (value * 31) ^ hash(make_hashable(self.serviceDomain))
        value = (value * 31) ^ hash(make_hashable(self.productType))
        value = (value * 31) ^ hash(make_hashable(self.productName))
        value = (value * 31) ^ hash(make_hashable(self.multipleProduct))
        value = (value * 31) ^ hash(make_hashable(self.callerIdStatus))
        value = (value * 31) ^ hash(make_hashable(self.balance))
        value = (value * 31) ^ hash(make_hashable(self.unit))
        value = (value * 31) ^ hash(make_hashable(self.rate))
        value = (value * 31) ^ hash(make_hashable(self.displayCode))
        value = (value * 31) ^ hash(make_hashable(self.calledNumber))
        value = (value * 31) ^ hash(make_hashable(self.calleeNationalNumber))
        value = (value * 31) ^ hash(make_hashable(self.calleeCallingCode))
        value = (value * 31) ^ hash(make_hashable(self.rateDivision))
        value = (value * 31) ^ hash(make_hashable(self.adMaxMin))
        value = (value * 31) ^ hash(make_hashable(self.adRemains))
        value = (value * 31) ^ hash(make_hashable(self.adSessionId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SpotItem(object):
    """
    Attributes:
     - name
     - phone
     - category
     - mid
     - countryAreaCode
     - freePhoneCallable
    """
    def __init__(self, name=None, phone=None, category=None, mid=None, countryAreaCode=None, freePhoneCallable=None):
        self.name = name
        self.phone = phone
        self.category = category
        self.mid = mid
        self.countryAreaCode = countryAreaCode
        self.freePhoneCallable = freePhoneCallable

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.phone = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.category = SpotCategory(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.countryAreaCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.freePhoneCallable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SpotItem')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        if self.phone is not None:
            oprot.writeFieldBegin('phone', TType.STRING, 3)
            oprot.writeString(self.phone)
            oprot.writeFieldEnd()
        if self.category is not None:
            oprot.writeFieldBegin('category', TType.I32, 4)
            oprot.writeI32(self.category)
            oprot.writeFieldEnd()
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 5)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.countryAreaCode is not None:
            oprot.writeFieldBegin('countryAreaCode', TType.STRING, 6)
            oprot.writeString(self.countryAreaCode)
            oprot.writeFieldEnd()
        if self.freePhoneCallable is not None:
            oprot.writeFieldBegin('freePhoneCallable', TType.BOOL, 10)
            oprot.writeBool(self.freePhoneCallable)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.name))
        value = (value * 31) ^ hash(make_hashable(self.phone))
        value = (value * 31) ^ hash(make_hashable(self.category))
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.countryAreaCode))
        value = (value * 31) ^ hash(make_hashable(self.freePhoneCallable))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SpotNearbyItem(object):
    """
    Attributes:
     - spotItem
     - location
    """
    def __init__(self, spotItem=None, location=None):
        self.spotItem = spotItem
        self.location = location

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRUCT:
                    self.spotItem = SpotItem()
                    self.spotItem.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.location = Location()
                    self.location.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SpotNearbyItem')
        if self.spotItem is not None:
            oprot.writeFieldBegin('spotItem', TType.STRUCT, 2)
            self.spotItem.write(oprot)
            oprot.writeFieldEnd()
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRUCT, 11)
            self.location.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.spotItem))
        value = (value * 31) ^ hash(make_hashable(self.location))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SpotNearbyResponse(object):
    """
    Attributes:
     - spotNearbyItems
    """
    def __init__(self, spotNearbyItems=None):
        self.spotNearbyItems = spotNearbyItems

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.spotNearbyItems = []
                    (_, elem6) = iprot.readListBegin()
                    for _ in range(elem6):
                        elem7 = SpotNearbyItem()
                        elem7.read(iprot)
                        self.spotNearbyItems.append(elem7)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SpotNearbyResponse')
        if self.spotNearbyItems is not None:
            oprot.writeFieldBegin('spotNearbyItems', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.spotNearbyItems))
            for elem8 in self.spotNearbyItems:
                elem8.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.spotNearbyItems))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SpotPhoneNumberResponse(object):
    """
    Attributes:
     - spotItems
    """
    def __init__(self, spotItems=None):
        self.spotItems = spotItems

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.spotItems = []
                    (_, elem9) = iprot.readListBegin()
                    for _ in range(elem9):
                        elem10 = SpotItem()
                        elem10.read(iprot)
                        self.spotItems.append(elem10)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SpotPhoneNumberResponse')
        if self.spotItems is not None:
            oprot.writeFieldBegin('spotItems', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.spotItems))
            for elem11 in self.spotItems:
                elem11.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.spotItems))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PaidCallHistory(object):
    """
    Attributes:
     - seq
     - type
     - dialedNumber
     - calledNumber
     - toMid
     - toName
     - setupTime
     - startTime
     - endTime
     - duration
     - terminate
     - productType
     - charge
     - unit
     - result
    """
    def __init__(self, seq=None, type=None, dialedNumber=None, calledNumber=None, toMid=None, toName=None, setupTime=None, startTime=None, endTime=None, duration=None, terminate=None, productType=None, charge=None, unit=None, result=None):
        self.seq = seq
        self.type = type
        self.dialedNumber = dialedNumber
        self.calledNumber = calledNumber
        self.toMid = toMid
        self.toName = toName
        self.setupTime = setupTime
        self.startTime = startTime
        self.endTime = endTime
        self.duration = duration
        self.terminate = terminate
        self.productType = productType
        self.charge = charge
        self.unit = unit
        self.result = result

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.seq = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = PaidCallType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.dialedNumber = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.calledNumber = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.toMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.toName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.setupTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.startTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.endTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.duration = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.terminate = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.productType = PaidCallProductType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.charge = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.unit = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.result = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PaidCallHistory')
        if self.seq is not None:
            oprot.writeFieldBegin('seq', TType.I64, 1)
            oprot.writeI64(self.seq)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.dialedNumber is not None:
            oprot.writeFieldBegin('dialedNumber', TType.STRING, 3)
            oprot.writeString(self.dialedNumber)
            oprot.writeFieldEnd()
        if self.calledNumber is not None:
            oprot.writeFieldBegin('calledNumber', TType.STRING, 4)
            oprot.writeString(self.calledNumber)
            oprot.writeFieldEnd()
        if self.toMid is not None:
            oprot.writeFieldBegin('toMid', TType.STRING, 5)
            oprot.writeString(self.toMid)
            oprot.writeFieldEnd()
        if self.toName is not None:
            oprot.writeFieldBegin('toName', TType.STRING, 6)
            oprot.writeString(self.toName)
            oprot.writeFieldEnd()
        if self.setupTime is not None:
            oprot.writeFieldBegin('setupTime', TType.I64, 7)
            oprot.writeI64(self.setupTime)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.I64, 8)
            oprot.writeI64(self.startTime)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.I64, 9)
            oprot.writeI64(self.endTime)
            oprot.writeFieldEnd()
        if self.duration is not None:
            oprot.writeFieldBegin('duration', TType.I64, 10)
            oprot.writeI64(self.duration)
            oprot.writeFieldEnd()
        if self.terminate is not None:
            oprot.writeFieldBegin('terminate', TType.I32, 11)
            oprot.writeI32(self.terminate)
            oprot.writeFieldEnd()
        if self.productType is not None:
            oprot.writeFieldBegin('productType', TType.I32, 12)
            oprot.writeI32(self.productType)
            oprot.writeFieldEnd()
        if self.charge is not None:
            oprot.writeFieldBegin('charge', TType.I32, 13)
            oprot.writeI32(self.charge)
            oprot.writeFieldEnd()
        if self.unit is not None:
            oprot.writeFieldBegin('unit', TType.STRING, 14)
            oprot.writeString(self.unit)
            oprot.writeFieldEnd()
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRING, 15)
            oprot.writeString(self.result)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.seq))
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.dialedNumber))
        value = (value * 31) ^ hash(make_hashable(self.calledNumber))
        value = (value * 31) ^ hash(make_hashable(self.toMid))
        value = (value * 31) ^ hash(make_hashable(self.toName))
        value = (value * 31) ^ hash(make_hashable(self.setupTime))
        value = (value * 31) ^ hash(make_hashable(self.startTime))
        value = (value * 31) ^ hash(make_hashable(self.endTime))
        value = (value * 31) ^ hash(make_hashable(self.duration))
        value = (value * 31) ^ hash(make_hashable(self.terminate))
        value = (value * 31) ^ hash(make_hashable(self.productType))
        value = (value * 31) ^ hash(make_hashable(self.charge))
        value = (value * 31) ^ hash(make_hashable(self.unit))
        value = (value * 31) ^ hash(make_hashable(self.result))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PaidCallHistoryResult(object):
    """
    Attributes:
     - historys
     - hasNext
    """
    def __init__(self, historys=None, hasNext=None):
        self.historys = historys
        self.hasNext = hasNext

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.historys = []
                    (_, elem12) = iprot.readListBegin()
                    for _ in range(elem12):
                        elem13 = PaidCallHistory()
                        elem13.read(iprot)
                        self.historys.append(elem13)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.hasNext = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PaidCallHistoryResult')
        if self.historys is not None:
            oprot.writeFieldBegin('historys', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.historys))
            for elem14 in self.historys:
                elem14.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.hasNext is not None:
            oprot.writeFieldBegin('hasNext', TType.BOOL, 2)
            oprot.writeBool(self.hasNext)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.historys))
        value = (value * 31) ^ hash(make_hashable(self.hasNext))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PaidCallMetadataResult(object):
    """
    Attributes:
     - currencyExchangeRates
     - recommendedCountryCodes
     - adCountries
    """
    def __init__(self, currencyExchangeRates=None, recommendedCountryCodes=None, adCountries=None):
        self.currencyExchangeRates = currencyExchangeRates
        self.recommendedCountryCodes = recommendedCountryCodes
        self.adCountries = adCountries

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.currencyExchangeRates = []
                    (_, elem15) = iprot.readListBegin()
                    for _ in range(elem15):
                        elem16 = PaidCallCurrencyExchangeRate()
                        elem16.read(iprot)
                        self.currencyExchangeRates.append(elem16)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.recommendedCountryCodes = []
                    (_, elem17) = iprot.readListBegin()
                    for _ in range(elem17):
                        elem18 = iprot.readString()
                        self.recommendedCountryCodes.append(elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.adCountries = []
                    (_, elem19) = iprot.readListBegin()
                    for _ in range(elem19):
                        elem20 = PaidCallAdCountry()
                        elem20.read(iprot)
                        self.adCountries.append(elem20)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PaidCallMetadataResult')
        if self.currencyExchangeRates is not None:
            oprot.writeFieldBegin('currencyExchangeRates', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.currencyExchangeRates))
            for elem21 in self.currencyExchangeRates:
                elem21.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.recommendedCountryCodes is not None:
            oprot.writeFieldBegin('recommendedCountryCodes', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.recommendedCountryCodes))
            for elem22 in self.recommendedCountryCodes:
                oprot.writeString(elem22)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.adCountries is not None:
            oprot.writeFieldBegin('adCountries', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.adCountries))
            for elem23 in self.adCountries:
                elem23.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.currencyExchangeRates))
        value = (value * 31) ^ hash(make_hashable(self.recommendedCountryCodes))
        value = (value * 31) ^ hash(make_hashable(self.adCountries))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PaidCallRedeemResult(object):
    """
    Attributes:
     - eventName
     - eventAmount
    """
    def __init__(self, eventName=None, eventAmount=None):
        self.eventName = eventName
        self.eventAmount = eventAmount

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.eventName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.eventAmount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PaidCallRedeemResult')
        if self.eventName is not None:
            oprot.writeFieldBegin('eventName', TType.STRING, 1)
            oprot.writeString(self.eventName)
            oprot.writeFieldEnd()
        if self.eventAmount is not None:
            oprot.writeFieldBegin('eventAmount', TType.I32, 2)
            oprot.writeI32(self.eventAmount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.eventName))
        value = (value * 31) ^ hash(make_hashable(self.eventAmount))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PaidCallResponse(object):
    """
    Attributes:
     - host
     - dialing
     - token
     - spotItems
    """
    def __init__(self, host=None, dialing=None, token=None, spotItems=None):
        self.host = host
        self.dialing = dialing
        self.token = token
        self.spotItems = spotItems

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.host = CallHost()
                    self.host.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.dialing = PaidCallDialing()
                    self.dialing.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.token = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.spotItems = []
                    (_, elem24) = iprot.readListBegin()
                    for _ in range(elem24):
                        elem25 = SpotItem()
                        elem25.read(iprot)
                        self.spotItems.append(elem25)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PaidCallResponse')
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRUCT, 1)
            self.host.write(oprot)
            oprot.writeFieldEnd()
        if self.dialing is not None:
            oprot.writeFieldBegin('dialing', TType.STRUCT, 2)
            self.dialing.write(oprot)
            oprot.writeFieldEnd()
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 3)
            oprot.writeString(self.token)
            oprot.writeFieldEnd()
        if self.spotItems is not None:
            oprot.writeFieldBegin('spotItems', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.spotItems))
            for elem26 in self.spotItems:
                elem26.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.host))
        value = (value * 31) ^ hash(make_hashable(self.dialing))
        value = (value * 31) ^ hash(make_hashable(self.token))
        value = (value * 31) ^ hash(make_hashable(self.spotItems))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PaidCallUserRate(object):
    """
    Attributes:
     - countryCode
     - rate
     - rateDivision
     - rateName
    """
    def __init__(self, countryCode=None, rate=None, rateDivision=None, rateName=None):
        self.countryCode = countryCode
        self.rate = rate
        self.rateDivision = rateDivision
        self.rateName = rateName

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.countryCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.rate = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.rateDivision = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.rateName = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PaidCallUserRate')
        if self.countryCode is not None:
            oprot.writeFieldBegin('countryCode', TType.STRING, 1)
            oprot.writeString(self.countryCode)
            oprot.writeFieldEnd()
        if self.rate is not None:
            oprot.writeFieldBegin('rate', TType.I32, 2)
            oprot.writeI32(self.rate)
            oprot.writeFieldEnd()
        if self.rateDivision is not None:
            oprot.writeFieldBegin('rateDivision', TType.STRING, 3)
            oprot.writeString(self.rateDivision)
            oprot.writeFieldEnd()
        if self.rateName is not None:
            oprot.writeFieldBegin('rateName', TType.STRING, 4)
            oprot.writeString(self.rateName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.countryCode))
        value = (value * 31) ^ hash(make_hashable(self.rate))
        value = (value * 31) ^ hash(make_hashable(self.rateDivision))
        value = (value * 31) ^ hash(make_hashable(self.rateName))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChannelInfo(object):
    """
    Attributes:
     - channelId
     - name
     - entryPageUrl
     - descriptionText
     - provider
     - publicType
     - iconImage
     - permissions
     - iconThumbnailImage
     - channelConfigurations
     - lcsAllApiUsable
     - allowedPermissions
     - channelDomains
     - updatedTimestamp
    """
    def __init__(self, channelId=None, name=None, entryPageUrl=None, descriptionText=None, provider=None, publicType=None, iconImage=None, permissions=None, iconThumbnailImage=None, channelConfigurations=None, lcsAllApiUsable=None, allowedPermissions=None, channelDomains=None, updatedTimestamp=None):
        self.channelId = channelId
        self.name = name
        self.entryPageUrl = entryPageUrl
        self.descriptionText = descriptionText
        self.provider = provider
        self.publicType = publicType
        self.iconImage = iconImage
        self.permissions = permissions
        self.iconThumbnailImage = iconThumbnailImage
        self.channelConfigurations = channelConfigurations
        self.lcsAllApiUsable = lcsAllApiUsable
        self.allowedPermissions = allowedPermissions
        self.channelDomains = channelDomains
        self.updatedTimestamp = updatedTimestamp

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.entryPageUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.descriptionText = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.provider = ChannelProvider()
                    self.provider.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.publicType = PublicType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.iconImage = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.permissions = []
                    (_, elem27) = iprot.readListBegin()
                    for _ in range(elem27):
                        elem28 = iprot.readString()
                        self.permissions.append(elem28)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.iconThumbnailImage = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.channelConfigurations = []
                    (_, elem29) = iprot.readListBegin()
                    for _ in range(elem29):
                        elem30 = ChannelConfiguration(iprot.readI32())
                        self.channelConfigurations.append(elem30)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BOOL:
                    self.lcsAllApiUsable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.SET:
                    self.allowedPermissions = set()
                    (_, elem31) = iprot.readSetBegin()
                    for _ in range(elem31):
                        elem32 = ChannelPermission(iprot.readI32())
                        self.allowedPermissions.add(elem32)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.channelDomains = []
                    (_, elem33) = iprot.readListBegin()
                    for _ in range(elem33):
                        elem34 = ChannelDomain()
                        elem34.read(iprot)
                        self.channelDomains.append(elem34)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I64:
                    self.updatedTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChannelInfo')
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 1)
            oprot.writeString(self.channelId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        if self.entryPageUrl is not None:
            oprot.writeFieldBegin('entryPageUrl', TType.STRING, 4)
            oprot.writeString(self.entryPageUrl)
            oprot.writeFieldEnd()
        if self.descriptionText is not None:
            oprot.writeFieldBegin('descriptionText', TType.STRING, 5)
            oprot.writeString(self.descriptionText)
            oprot.writeFieldEnd()
        if self.provider is not None:
            oprot.writeFieldBegin('provider', TType.STRUCT, 6)
            self.provider.write(oprot)
            oprot.writeFieldEnd()
        if self.publicType is not None:
            oprot.writeFieldBegin('publicType', TType.I32, 7)
            oprot.writeI32(self.publicType)
            oprot.writeFieldEnd()
        if self.iconImage is not None:
            oprot.writeFieldBegin('iconImage', TType.STRING, 8)
            oprot.writeString(self.iconImage)
            oprot.writeFieldEnd()
        if self.permissions is not None:
            oprot.writeFieldBegin('permissions', TType.LIST, 9)
            oprot.writeListBegin(TType.STRING, len(self.permissions))
            for elem35 in self.permissions:
                oprot.writeString(elem35)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.iconThumbnailImage is not None:
            oprot.writeFieldBegin('iconThumbnailImage', TType.STRING, 11)
            oprot.writeString(self.iconThumbnailImage)
            oprot.writeFieldEnd()
        if self.channelConfigurations is not None:
            oprot.writeFieldBegin('channelConfigurations', TType.LIST, 12)
            oprot.writeListBegin(TType.I32, len(self.channelConfigurations))
            for elem36 in self.channelConfigurations:
                oprot.writeI32(elem36)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.lcsAllApiUsable is not None:
            oprot.writeFieldBegin('lcsAllApiUsable', TType.BOOL, 13)
            oprot.writeBool(self.lcsAllApiUsable)
            oprot.writeFieldEnd()
        if self.allowedPermissions is not None:
            oprot.writeFieldBegin('allowedPermissions', TType.SET, 14)
            oprot.writeSetBegin(TType.I32, len(self.allowedPermissions))
            for elem37 in self.allowedPermissions:
                oprot.writeI32(elem37)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.channelDomains is not None:
            oprot.writeFieldBegin('channelDomains', TType.LIST, 15)
            oprot.writeListBegin(TType.STRUCT, len(self.channelDomains))
            for elem38 in self.channelDomains:
                elem38.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.updatedTimestamp is not None:
            oprot.writeFieldBegin('updatedTimestamp', TType.I64, 16)
            oprot.writeI64(self.updatedTimestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.channelId))
        value = (value * 31) ^ hash(make_hashable(self.name))
        value = (value * 31) ^ hash(make_hashable(self.entryPageUrl))
        value = (value * 31) ^ hash(make_hashable(self.descriptionText))
        value = (value * 31) ^ hash(make_hashable(self.provider))
        value = (value * 31) ^ hash(make_hashable(self.publicType))
        value = (value * 31) ^ hash(make_hashable(self.iconImage))
        value = (value * 31) ^ hash(make_hashable(self.permissions))
        value = (value * 31) ^ hash(make_hashable(self.iconThumbnailImage))
        value = (value * 31) ^ hash(make_hashable(self.channelConfigurations))
        value = (value * 31) ^ hash(make_hashable(self.lcsAllApiUsable))
        value = (value * 31) ^ hash(make_hashable(self.allowedPermissions))
        value = (value * 31) ^ hash(make_hashable(self.channelDomains))
        value = (value * 31) ^ hash(make_hashable(self.updatedTimestamp))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ApprovedChannelInfo(object):
    """
    Attributes:
     - channelInfo
     - approvedAt
    """
    def __init__(self, channelInfo=None, approvedAt=None):
        self.channelInfo = channelInfo
        self.approvedAt = approvedAt

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.channelInfo = ChannelInfo()
                    self.channelInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.approvedAt = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ApprovedChannelInfo')
        if self.channelInfo is not None:
            oprot.writeFieldBegin('channelInfo', TType.STRUCT, 1)
            self.channelInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.approvedAt is not None:
            oprot.writeFieldBegin('approvedAt', TType.I64, 2)
            oprot.writeI64(self.approvedAt)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.channelInfo))
        value = (value * 31) ^ hash(make_hashable(self.approvedAt))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ApprovedChannelInfos(object):
    """
    Attributes:
     - approvedChannelInfos
     - revision
    """
    def __init__(self, approvedChannelInfos=None, revision=None):
        self.approvedChannelInfos = approvedChannelInfos
        self.revision = revision

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.approvedChannelInfos = []
                    (_, elem39) = iprot.readListBegin()
                    for _ in range(elem39):
                        elem40 = ApprovedChannelInfo()
                        elem40.read(iprot)
                        self.approvedChannelInfos.append(elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ApprovedChannelInfos')
        if self.approvedChannelInfos is not None:
            oprot.writeFieldBegin('approvedChannelInfos', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.approvedChannelInfos))
            for elem41 in self.approvedChannelInfos:
                elem41.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 2)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.approvedChannelInfos))
        value = (value * 31) ^ hash(make_hashable(self.revision))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class AuthQrcode(object):
    """
    Attributes:
     - qrcode
     - verifier
     - callbackUrl
    """
    def __init__(self, qrcode=None, verifier=None, callbackUrl=None):
        self.qrcode = qrcode
        self.verifier = verifier
        self.callbackUrl = callbackUrl

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.qrcode = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.verifier = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.callbackUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('AuthQrcode')
        if self.qrcode is not None:
            oprot.writeFieldBegin('qrcode', TType.STRING, 1)
            oprot.writeString(self.qrcode)
            oprot.writeFieldEnd()
        if self.verifier is not None:
            oprot.writeFieldBegin('verifier', TType.STRING, 2)
            oprot.writeString(self.verifier)
            oprot.writeFieldEnd()
        if self.callbackUrl is not None:
            oprot.writeFieldBegin('callbackUrl', TType.STRING, 3)
            oprot.writeString(self.callbackUrl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.qrcode))
        value = (value * 31) ^ hash(make_hashable(self.verifier))
        value = (value * 31) ^ hash(make_hashable(self.callbackUrl))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class AnalyticsInfo(object):
    """
    Attributes:
     - gaSamplingRate
     - tmid
    """
    def __init__(self, gaSamplingRate=None, tmid=None):
        self.gaSamplingRate = gaSamplingRate
        self.tmid = tmid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.gaSamplingRate = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.tmid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('AnalyticsInfo')
        if self.gaSamplingRate is not None:
            oprot.writeFieldBegin('gaSamplingRate', TType.DOUBLE, 1)
            oprot.writeDouble(self.gaSamplingRate)
            oprot.writeFieldEnd()
        if self.tmid is not None:
            oprot.writeFieldBegin('tmid', TType.STRING, 2)
            oprot.writeString(self.tmid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.gaSamplingRate))
        value = (value * 31) ^ hash(make_hashable(self.tmid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ContactTransition(object):
    """
    Attributes:
     - ownerMid
     - targetMid
     - previousStatus
     - resultStatus
    """
    def __init__(self, ownerMid=None, targetMid=None, previousStatus=None, resultStatus=None):
        self.ownerMid = ownerMid
        self.targetMid = targetMid
        self.previousStatus = previousStatus
        self.resultStatus = resultStatus

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ownerMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.targetMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.previousStatus = ContactStatus(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.resultStatus = ContactStatus(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ContactTransition')
        if self.ownerMid is not None:
            oprot.writeFieldBegin('ownerMid', TType.STRING, 1)
            oprot.writeString(self.ownerMid)
            oprot.writeFieldEnd()
        if self.targetMid is not None:
            oprot.writeFieldBegin('targetMid', TType.STRING, 2)
            oprot.writeString(self.targetMid)
            oprot.writeFieldEnd()
        if self.previousStatus is not None:
            oprot.writeFieldBegin('previousStatus', TType.I32, 3)
            oprot.writeI32(self.previousStatus)
            oprot.writeFieldEnd()
        if self.resultStatus is not None:
            oprot.writeFieldBegin('resultStatus', TType.I32, 4)
            oprot.writeI32(self.resultStatus)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.ownerMid))
        value = (value * 31) ^ hash(make_hashable(self.targetMid))
        value = (value * 31) ^ hash(make_hashable(self.previousStatus))
        value = (value * 31) ^ hash(make_hashable(self.resultStatus))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UserTicketResponse(object):
    """
    Attributes:
     - mid
     - userTicket
    """
    def __init__(self, mid=None, userTicket=None):
        self.mid = mid
        self.userTicket = userTicket

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userTicket = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UserTicketResponse')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.userTicket is not None:
            oprot.writeFieldBegin('userTicket', TType.STRING, 2)
            oprot.writeString(self.userTicket)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.userTicket))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BuddyBanner(object):
    """
    Attributes:
     - buddyBannerLinkType
     - buddyBannerLink
     - buddyBannerImageUrl
    """
    def __init__(self, buddyBannerLinkType=None, buddyBannerLink=None, buddyBannerImageUrl=None):
        self.buddyBannerLinkType = buddyBannerLinkType
        self.buddyBannerLink = buddyBannerLink
        self.buddyBannerImageUrl = buddyBannerImageUrl

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.buddyBannerLinkType = BuddyBannerLinkType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.buddyBannerLink = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.buddyBannerImageUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BuddyBanner')
        if self.buddyBannerLinkType is not None:
            oprot.writeFieldBegin('buddyBannerLinkType', TType.I32, 1)
            oprot.writeI32(self.buddyBannerLinkType)
            oprot.writeFieldEnd()
        if self.buddyBannerLink is not None:
            oprot.writeFieldBegin('buddyBannerLink', TType.STRING, 2)
            oprot.writeString(self.buddyBannerLink)
            oprot.writeFieldEnd()
        if self.buddyBannerImageUrl is not None:
            oprot.writeFieldBegin('buddyBannerImageUrl', TType.STRING, 3)
            oprot.writeString(self.buddyBannerImageUrl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.buddyBannerLinkType))
        value = (value * 31) ^ hash(make_hashable(self.buddyBannerLink))
        value = (value * 31) ^ hash(make_hashable(self.buddyBannerImageUrl))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BuddyDetail(object):
    """
    Attributes:
     - mid
     - memberCount
     - onAir
     - businessAccount
     - addable
     - acceptableContentTypes
     - capableMyhome
    """
    def __init__(self, mid=None, memberCount=None, onAir=None, businessAccount=None, addable=None, acceptableContentTypes=None, capableMyhome=None):
        self.mid = mid
        self.memberCount = memberCount
        self.onAir = onAir
        self.businessAccount = businessAccount
        self.addable = addable
        self.acceptableContentTypes = acceptableContentTypes
        self.capableMyhome = capableMyhome

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.memberCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.onAir = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.businessAccount = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.addable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.SET:
                    self.acceptableContentTypes = set()
                    (_, elem42) = iprot.readSetBegin()
                    for _ in range(elem42):
                        elem43 = ContentType(iprot.readI32())
                        self.acceptableContentTypes.add(elem43)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.capableMyhome = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BuddyDetail')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.memberCount is not None:
            oprot.writeFieldBegin('memberCount', TType.I64, 2)
            oprot.writeI64(self.memberCount)
            oprot.writeFieldEnd()
        if self.onAir is not None:
            oprot.writeFieldBegin('onAir', TType.BOOL, 3)
            oprot.writeBool(self.onAir)
            oprot.writeFieldEnd()
        if self.businessAccount is not None:
            oprot.writeFieldBegin('businessAccount', TType.BOOL, 4)
            oprot.writeBool(self.businessAccount)
            oprot.writeFieldEnd()
        if self.addable is not None:
            oprot.writeFieldBegin('addable', TType.BOOL, 5)
            oprot.writeBool(self.addable)
            oprot.writeFieldEnd()
        if self.acceptableContentTypes is not None:
            oprot.writeFieldBegin('acceptableContentTypes', TType.SET, 6)
            oprot.writeSetBegin(TType.I32, len(self.acceptableContentTypes))
            for elem44 in self.acceptableContentTypes:
                oprot.writeI32(elem44)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.capableMyhome is not None:
            oprot.writeFieldBegin('capableMyhome', TType.BOOL, 7)
            oprot.writeBool(self.capableMyhome)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.memberCount))
        value = (value * 31) ^ hash(make_hashable(self.onAir))
        value = (value * 31) ^ hash(make_hashable(self.businessAccount))
        value = (value * 31) ^ hash(make_hashable(self.addable))
        value = (value * 31) ^ hash(make_hashable(self.acceptableContentTypes))
        value = (value * 31) ^ hash(make_hashable(self.capableMyhome))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Contact(object):
    """
    Attributes:
     - mid
     - createdTime
     - type
     - status
     - relation
     - displayName
     - phoneticName
     - pictureStatus
     - thumbnailUrl
     - statusMessage
     - displayNameOverridden
     - favoriteTime
     - capableVoiceCall
     - capableVideoCall
     - capableMyhome
     - capableBuddy
     - attributes
     - settings
     - picturePath
     - recommendParams
     - friendRequestStatus
     - musicProfile
     - videoProfile
    """
    def __init__(self, mid=None, createdTime=None, type=None, status=None, relation=None, displayName=None, phoneticName=None, pictureStatus=None, thumbnailUrl=None, statusMessage=None, displayNameOverridden=None, favoriteTime=None, capableVoiceCall=None, capableVideoCall=None, capableMyhome=None, capableBuddy=None, attributes=None, settings=None, picturePath=None, recommendParams=None, friendRequestStatus=None, musicProfile=None, videoProfile=None):
        self.mid = mid
        self.createdTime = createdTime
        self.type = type
        self.status = status
        self.relation = relation
        self.displayName = displayName
        self.phoneticName = phoneticName
        self.pictureStatus = pictureStatus
        self.thumbnailUrl = thumbnailUrl
        self.statusMessage = statusMessage
        self.displayNameOverridden = displayNameOverridden
        self.favoriteTime = favoriteTime
        self.capableVoiceCall = capableVoiceCall
        self.capableVideoCall = capableVideoCall
        self.capableMyhome = capableMyhome
        self.capableBuddy = capableBuddy
        self.attributes = attributes
        self.settings = settings
        self.picturePath = picturePath
        self.recommendParams = recommendParams
        self.friendRequestStatus = friendRequestStatus
        self.musicProfile = musicProfile
        self.videoProfile = videoProfile

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.type = ContactType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.status = ContactStatus(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.relation = ContactRelation(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.phoneticName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRING:
                    self.pictureStatus = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRING:
                    self.thumbnailUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRING:
                    self.statusMessage = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.STRING:
                    self.displayNameOverridden = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.I64:
                    self.favoriteTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.BOOL:
                    self.capableVoiceCall = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.BOOL:
                    self.capableVideoCall = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.BOOL:
                    self.capableMyhome = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.BOOL:
                    self.capableBuddy = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.I32:
                    self.attributes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.I64:
                    self.settings = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.STRING:
                    self.picturePath = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 38:
                if ftype == TType.STRING:
                    self.recommendParams = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 39:
                if ftype == TType.I32:
                    self.friendRequestStatus = FriendRequestStatus(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.STRING:
                    self.musicProfile = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.STRING:
                    self.videoProfile = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Contact')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 2)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 10)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 11)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.relation is not None:
            oprot.writeFieldBegin('relation', TType.I32, 21)
            oprot.writeI32(self.relation)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 22)
            oprot.writeString(self.displayName)
            oprot.writeFieldEnd()
        if self.phoneticName is not None:
            oprot.writeFieldBegin('phoneticName', TType.STRING, 23)
            oprot.writeString(self.phoneticName)
            oprot.writeFieldEnd()
        if self.pictureStatus is not None:
            oprot.writeFieldBegin('pictureStatus', TType.STRING, 24)
            oprot.writeString(self.pictureStatus)
            oprot.writeFieldEnd()
        if self.thumbnailUrl is not None:
            oprot.writeFieldBegin('thumbnailUrl', TType.STRING, 25)
            oprot.writeString(self.thumbnailUrl)
            oprot.writeFieldEnd()
        if self.statusMessage is not None:
            oprot.writeFieldBegin('statusMessage', TType.STRING, 26)
            oprot.writeString(self.statusMessage)
            oprot.writeFieldEnd()
        if self.displayNameOverridden is not None:
            oprot.writeFieldBegin('displayNameOverridden', TType.STRING, 27)
            oprot.writeString(self.displayNameOverridden)
            oprot.writeFieldEnd()
        if self.favoriteTime is not None:
            oprot.writeFieldBegin('favoriteTime', TType.I64, 28)
            oprot.writeI64(self.favoriteTime)
            oprot.writeFieldEnd()
        if self.capableVoiceCall is not None:
            oprot.writeFieldBegin('capableVoiceCall', TType.BOOL, 31)
            oprot.writeBool(self.capableVoiceCall)
            oprot.writeFieldEnd()
        if self.capableVideoCall is not None:
            oprot.writeFieldBegin('capableVideoCall', TType.BOOL, 32)
            oprot.writeBool(self.capableVideoCall)
            oprot.writeFieldEnd()
        if self.capableMyhome is not None:
            oprot.writeFieldBegin('capableMyhome', TType.BOOL, 33)
            oprot.writeBool(self.capableMyhome)
            oprot.writeFieldEnd()
        if self.capableBuddy is not None:
            oprot.writeFieldBegin('capableBuddy', TType.BOOL, 34)
            oprot.writeBool(self.capableBuddy)
            oprot.writeFieldEnd()
        if self.attributes is not None:
            oprot.writeFieldBegin('attributes', TType.I32, 35)
            oprot.writeI32(self.attributes)
            oprot.writeFieldEnd()
        if self.settings is not None:
            oprot.writeFieldBegin('settings', TType.I64, 36)
            oprot.writeI64(self.settings)
            oprot.writeFieldEnd()
        if self.picturePath is not None:
            oprot.writeFieldBegin('picturePath', TType.STRING, 37)
            oprot.writeString(self.picturePath)
            oprot.writeFieldEnd()
        if self.recommendParams is not None:
            oprot.writeFieldBegin('recommendParams', TType.STRING, 38)
            oprot.writeString(self.recommendParams)
            oprot.writeFieldEnd()
        if self.friendRequestStatus is not None:
            oprot.writeFieldBegin('friendRequestStatus', TType.I32, 39)
            oprot.writeI32(self.friendRequestStatus)
            oprot.writeFieldEnd()
        if self.musicProfile is not None:
            oprot.writeFieldBegin('musicProfile', TType.STRING, 40)
            oprot.writeString(self.musicProfile)
            oprot.writeFieldEnd()
        if self.videoProfile is not None:
            oprot.writeFieldBegin('videoProfile', TType.STRING, 42)
            oprot.writeString(self.videoProfile)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.createdTime))
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.status))
        value = (value * 31) ^ hash(make_hashable(self.relation))
        value = (value * 31) ^ hash(make_hashable(self.displayName))
        value = (value * 31) ^ hash(make_hashable(self.phoneticName))
        value = (value * 31) ^ hash(make_hashable(self.pictureStatus))
        value = (value * 31) ^ hash(make_hashable(self.thumbnailUrl))
        value = (value * 31) ^ hash(make_hashable(self.statusMessage))
        value = (value * 31) ^ hash(make_hashable(self.displayNameOverridden))
        value = (value * 31) ^ hash(make_hashable(self.favoriteTime))
        value = (value * 31) ^ hash(make_hashable(self.capableVoiceCall))
        value = (value * 31) ^ hash(make_hashable(self.capableVideoCall))
        value = (value * 31) ^ hash(make_hashable(self.capableMyhome))
        value = (value * 31) ^ hash(make_hashable(self.capableBuddy))
        value = (value * 31) ^ hash(make_hashable(self.attributes))
        value = (value * 31) ^ hash(make_hashable(self.settings))
        value = (value * 31) ^ hash(make_hashable(self.picturePath))
        value = (value * 31) ^ hash(make_hashable(self.recommendParams))
        value = (value * 31) ^ hash(make_hashable(self.friendRequestStatus))
        value = (value * 31) ^ hash(make_hashable(self.musicProfile))
        value = (value * 31) ^ hash(make_hashable(self.videoProfile))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BuddyList(object):
    """
    Attributes:
     - classification
     - displayName
     - totalBuddyCount
     - popularContacts
    """
    def __init__(self, classification=None, displayName=None, totalBuddyCount=None, popularContacts=None):
        self.classification = classification
        self.displayName = displayName
        self.totalBuddyCount = totalBuddyCount
        self.popularContacts = popularContacts

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.classification = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.totalBuddyCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.popularContacts = []
                    (_, elem45) = iprot.readListBegin()
                    for _ in range(elem45):
                        elem46 = Contact()
                        elem46.read(iprot)
                        self.popularContacts.append(elem46)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BuddyList')
        if self.classification is not None:
            oprot.writeFieldBegin('classification', TType.STRING, 1)
            oprot.writeString(self.classification)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 2)
            oprot.writeString(self.displayName)
            oprot.writeFieldEnd()
        if self.totalBuddyCount is not None:
            oprot.writeFieldBegin('totalBuddyCount', TType.I32, 3)
            oprot.writeI32(self.totalBuddyCount)
            oprot.writeFieldEnd()
        if self.popularContacts is not None:
            oprot.writeFieldBegin('popularContacts', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.popularContacts))
            for elem47 in self.popularContacts:
                elem47.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.classification))
        value = (value * 31) ^ hash(make_hashable(self.displayName))
        value = (value * 31) ^ hash(make_hashable(self.totalBuddyCount))
        value = (value * 31) ^ hash(make_hashable(self.popularContacts))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class RegisterWithPhoneNumberResult(object):
    """
    Attributes:
     - authToken
     - recommendEmailRegistration
     - certificate
    """
    def __init__(self, authToken=None, recommendEmailRegistration=None, certificate=None):
        self.authToken = authToken
        self.recommendEmailRegistration = recommendEmailRegistration
        self.certificate = certificate

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.recommendEmailRegistration = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.certificate = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('RegisterWithPhoneNumberResult')
        if self.authToken is not None:
            oprot.writeFieldBegin('authToken', TType.STRING, 1)
            oprot.writeString(self.authToken)
            oprot.writeFieldEnd()
        if self.recommendEmailRegistration is not None:
            oprot.writeFieldBegin('recommendEmailRegistration', TType.BOOL, 2)
            oprot.writeBool(self.recommendEmailRegistration)
            oprot.writeFieldEnd()
        if self.certificate is not None:
            oprot.writeFieldBegin('certificate', TType.STRING, 3)
            oprot.writeString(self.certificate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.authToken))
        value = (value * 31) ^ hash(make_hashable(self.recommendEmailRegistration))
        value = (value * 31) ^ hash(make_hashable(self.certificate))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BuddyMessageRequest(object):
    """
    Attributes:
     - contentType
     - text
     - location
     - content
     - contentMetadata
    """
    def __init__(self, contentType=None, text=None, location=None, content=None, contentMetadata=None):
        self.contentType = contentType
        self.text = text
        self.location = location
        self.content = content
        self.contentMetadata = contentMetadata

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.contentType = ContentType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.text = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.location = Location()
                    self.location.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.content = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.contentMetadata = {}
                    (_, _, elem48) = iprot.readMapBegin()
                    for _ in range(elem48):
                        elem50 = iprot.readString()
                        elem49 = iprot.readString()
                        self.contentMetadata[elem50] = elem49
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BuddyMessageRequest')
        if self.contentType is not None:
            oprot.writeFieldBegin('contentType', TType.I32, 1)
            oprot.writeI32(self.contentType)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 2)
            oprot.writeString(self.text)
            oprot.writeFieldEnd()
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRUCT, 3)
            self.location.write(oprot)
            oprot.writeFieldEnd()
        if self.content is not None:
            oprot.writeFieldBegin('content', TType.STRING, 4)
            oprot.writeBinary(self.content)
            oprot.writeFieldEnd()
        if self.contentMetadata is not None:
            oprot.writeFieldBegin('contentMetadata', TType.MAP, 5)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.contentMetadata))
            for elem52, elem51 in self.contentMetadata.items():
                oprot.writeString(elem52)
                oprot.writeString(elem51)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.contentType))
        value = (value * 31) ^ hash(make_hashable(self.text))
        value = (value * 31) ^ hash(make_hashable(self.location))
        value = (value * 31) ^ hash(make_hashable(self.content))
        value = (value * 31) ^ hash(make_hashable(self.contentMetadata))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BuddyOnAirUrls(object):
    """
    Attributes:
     - hls
     - smoothStreaming
    """
    def __init__(self, hls=None, smoothStreaming=None):
        self.hls = hls
        self.smoothStreaming = smoothStreaming

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.hls = {}
                    (_, _, elem53) = iprot.readMapBegin()
                    for _ in range(elem53):
                        elem55 = iprot.readString()
                        elem54 = iprot.readString()
                        self.hls[elem55] = elem54
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.smoothStreaming = {}
                    (_, _, elem56) = iprot.readMapBegin()
                    for _ in range(elem56):
                        elem58 = iprot.readString()
                        elem57 = iprot.readString()
                        self.smoothStreaming[elem58] = elem57
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BuddyOnAirUrls')
        if self.hls is not None:
            oprot.writeFieldBegin('hls', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.hls))
            for elem60, elem59 in self.hls.items():
                oprot.writeString(elem60)
                oprot.writeString(elem59)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.smoothStreaming is not None:
            oprot.writeFieldBegin('smoothStreaming', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.smoothStreaming))
            for elem62, elem61 in self.smoothStreaming.items():
                oprot.writeString(elem62)
                oprot.writeString(elem61)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.hls))
        value = (value * 31) ^ hash(make_hashable(self.smoothStreaming))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BuddyOnAir(object):
    """
    Attributes:
     - mid
     - freshnessLifetime
     - onAirId
     - onAir
     - text
     - viewerCount
     - targetCount
     - onAirType
     - onAirUrls
    """
    def __init__(self, mid=None, freshnessLifetime=None, onAirId=None, onAir=None, text=None, viewerCount=None, targetCount=None, onAirType=None, onAirUrls=None):
        self.mid = mid
        self.freshnessLifetime = freshnessLifetime
        self.onAirId = onAirId
        self.onAir = onAir
        self.text = text
        self.viewerCount = viewerCount
        self.targetCount = targetCount
        self.onAirType = onAirType
        self.onAirUrls = onAirUrls

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.freshnessLifetime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.onAirId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.onAir = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.text = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.viewerCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I64:
                    self.targetCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.I32:
                    self.onAirType = BuddyOnAirType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.STRUCT:
                    self.onAirUrls = BuddyOnAirUrls()
                    self.onAirUrls.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BuddyOnAir')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.freshnessLifetime is not None:
            oprot.writeFieldBegin('freshnessLifetime', TType.I64, 3)
            oprot.writeI64(self.freshnessLifetime)
            oprot.writeFieldEnd()
        if self.onAirId is not None:
            oprot.writeFieldBegin('onAirId', TType.STRING, 4)
            oprot.writeString(self.onAirId)
            oprot.writeFieldEnd()
        if self.onAir is not None:
            oprot.writeFieldBegin('onAir', TType.BOOL, 5)
            oprot.writeBool(self.onAir)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 11)
            oprot.writeString(self.text)
            oprot.writeFieldEnd()
        if self.viewerCount is not None:
            oprot.writeFieldBegin('viewerCount', TType.I64, 12)
            oprot.writeI64(self.viewerCount)
            oprot.writeFieldEnd()
        if self.targetCount is not None:
            oprot.writeFieldBegin('targetCount', TType.I64, 13)
            oprot.writeI64(self.targetCount)
            oprot.writeFieldEnd()
        if self.onAirType is not None:
            oprot.writeFieldBegin('onAirType', TType.I32, 31)
            oprot.writeI32(self.onAirType)
            oprot.writeFieldEnd()
        if self.onAirUrls is not None:
            oprot.writeFieldBegin('onAirUrls', TType.STRUCT, 32)
            self.onAirUrls.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.freshnessLifetime))
        value = (value * 31) ^ hash(make_hashable(self.onAirId))
        value = (value * 31) ^ hash(make_hashable(self.onAir))
        value = (value * 31) ^ hash(make_hashable(self.text))
        value = (value * 31) ^ hash(make_hashable(self.viewerCount))
        value = (value * 31) ^ hash(make_hashable(self.targetCount))
        value = (value * 31) ^ hash(make_hashable(self.onAirType))
        value = (value * 31) ^ hash(make_hashable(self.onAirUrls))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BuddyProfile(object):
    """
    Attributes:
     - buddyId
     - mid
     - searchId
     - displayName
     - statusMessage
     - contactCount
    """
    def __init__(self, buddyId=None, mid=None, searchId=None, displayName=None, statusMessage=None, contactCount=None):
        self.buddyId = buddyId
        self.mid = mid
        self.searchId = searchId
        self.displayName = displayName
        self.statusMessage = statusMessage
        self.contactCount = contactCount

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.buddyId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.searchId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.statusMessage = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.contactCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BuddyProfile')
        if self.buddyId is not None:
            oprot.writeFieldBegin('buddyId', TType.STRING, 1)
            oprot.writeString(self.buddyId)
            oprot.writeFieldEnd()
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 2)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.searchId is not None:
            oprot.writeFieldBegin('searchId', TType.STRING, 3)
            oprot.writeString(self.searchId)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 4)
            oprot.writeString(self.displayName)
            oprot.writeFieldEnd()
        if self.statusMessage is not None:
            oprot.writeFieldBegin('statusMessage', TType.STRING, 5)
            oprot.writeString(self.statusMessage)
            oprot.writeFieldEnd()
        if self.contactCount is not None:
            oprot.writeFieldBegin('contactCount', TType.I64, 11)
            oprot.writeI64(self.contactCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.buddyId))
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.searchId))
        value = (value * 31) ^ hash(make_hashable(self.displayName))
        value = (value * 31) ^ hash(make_hashable(self.statusMessage))
        value = (value * 31) ^ hash(make_hashable(self.contactCount))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CommitMessageResult(object):
    """
    Attributes:
     - message
     - code
     - reason
     - successCount
     - failCount
     - unregisterCount
     - blockCount
    """
    def __init__(self, message=None, code=None, reason=None, successCount=None, failCount=None, unregisterCount=None, blockCount=None):
        self.message = message
        self.code = code
        self.reason = reason
        self.successCount = successCount
        self.failCount = failCount
        self.unregisterCount = unregisterCount
        self.blockCount = blockCount

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.message = Message()
                    self.message.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.code = CommitMessageResultCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.reason = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.successCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.failCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.unregisterCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.blockCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CommitMessageResult')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRUCT, 1)
            self.message.write(oprot)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 2)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 3)
            oprot.writeString(self.reason)
            oprot.writeFieldEnd()
        if self.successCount is not None:
            oprot.writeFieldBegin('successCount', TType.I64, 4)
            oprot.writeI64(self.successCount)
            oprot.writeFieldEnd()
        if self.failCount is not None:
            oprot.writeFieldBegin('failCount', TType.I64, 5)
            oprot.writeI64(self.failCount)
            oprot.writeFieldEnd()
        if self.unregisterCount is not None:
            oprot.writeFieldBegin('unregisterCount', TType.I64, 6)
            oprot.writeI64(self.unregisterCount)
            oprot.writeFieldEnd()
        if self.blockCount is not None:
            oprot.writeFieldBegin('blockCount', TType.I64, 7)
            oprot.writeI64(self.blockCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.message))
        value = (value * 31) ^ hash(make_hashable(self.code))
        value = (value * 31) ^ hash(make_hashable(self.reason))
        value = (value * 31) ^ hash(make_hashable(self.successCount))
        value = (value * 31) ^ hash(make_hashable(self.failCount))
        value = (value * 31) ^ hash(make_hashable(self.unregisterCount))
        value = (value * 31) ^ hash(make_hashable(self.blockCount))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BuddySearchResult(object):
    """
    Attributes:
     - mid
     - displayName
     - pictureStatus
     - picturePath
     - statusMessage
     - businessAccount
    """
    def __init__(self, mid=None, displayName=None, pictureStatus=None, picturePath=None, statusMessage=None, businessAccount=None):
        self.mid = mid
        self.displayName = displayName
        self.pictureStatus = pictureStatus
        self.picturePath = picturePath
        self.statusMessage = statusMessage
        self.businessAccount = businessAccount

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.pictureStatus = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.picturePath = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.statusMessage = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.businessAccount = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BuddySearchResult')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 2)
            oprot.writeString(self.displayName)
            oprot.writeFieldEnd()
        if self.pictureStatus is not None:
            oprot.writeFieldBegin('pictureStatus', TType.STRING, 3)
            oprot.writeString(self.pictureStatus)
            oprot.writeFieldEnd()
        if self.picturePath is not None:
            oprot.writeFieldBegin('picturePath', TType.STRING, 4)
            oprot.writeString(self.picturePath)
            oprot.writeFieldEnd()
        if self.statusMessage is not None:
            oprot.writeFieldBegin('statusMessage', TType.STRING, 5)
            oprot.writeString(self.statusMessage)
            oprot.writeFieldEnd()
        if self.businessAccount is not None:
            oprot.writeFieldBegin('businessAccount', TType.BOOL, 6)
            oprot.writeBool(self.businessAccount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.displayName))
        value = (value * 31) ^ hash(make_hashable(self.pictureStatus))
        value = (value * 31) ^ hash(make_hashable(self.picturePath))
        value = (value * 31) ^ hash(make_hashable(self.statusMessage))
        value = (value * 31) ^ hash(make_hashable(self.businessAccount))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SyncParamMid(object):
    """
    Attributes:
     - mid
     - diff
     - revision
    """
    def __init__(self, mid=None, diff=None, revision=None):
        self.mid = mid
        self.diff = diff
        self.revision = revision

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.diff = Diff(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SyncParamMid')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.diff is not None:
            oprot.writeFieldBegin('diff', TType.I32, 2)
            oprot.writeI32(self.diff)
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 3)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.diff))
        value = (value * 31) ^ hash(make_hashable(self.revision))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SIMInfo(object):
    """
    Attributes:
     - phoneNumber
     - countryCode
    """
    def __init__(self, phoneNumber=None, countryCode=None):
        self.phoneNumber = phoneNumber
        self.countryCode = countryCode

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.phoneNumber = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.countryCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SIMInfo')
        if self.phoneNumber is not None:
            oprot.writeFieldBegin('phoneNumber', TType.STRING, 1)
            oprot.writeString(self.phoneNumber)
            oprot.writeFieldEnd()
        if self.countryCode is not None:
            oprot.writeFieldBegin('countryCode', TType.STRING, 2)
            oprot.writeString(self.countryCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.phoneNumber))
        value = (value * 31) ^ hash(make_hashable(self.countryCode))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SyncParamContact(object):
    """
    Attributes:
     - syncParamMid
     - contactStatus
    """
    def __init__(self, syncParamMid=None, contactStatus=None):
        self.syncParamMid = syncParamMid
        self.contactStatus = contactStatus

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.syncParamMid = SyncParamMid()
                    self.syncParamMid.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.contactStatus = ContactStatus(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SyncParamContact')
        if self.syncParamMid is not None:
            oprot.writeFieldBegin('syncParamMid', TType.STRUCT, 1)
            self.syncParamMid.write(oprot)
            oprot.writeFieldEnd()
        if self.contactStatus is not None:
            oprot.writeFieldBegin('contactStatus', TType.I32, 2)
            oprot.writeI32(self.contactStatus)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.syncParamMid))
        value = (value * 31) ^ hash(make_hashable(self.contactStatus))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChannelDomains(object):
    """
    Attributes:
     - channelDomains
     - revision
    """
    def __init__(self, channelDomains=None, revision=None):
        self.channelDomains = channelDomains
        self.revision = revision

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.channelDomains = []
                    (_, elem63) = iprot.readListBegin()
                    for _ in range(elem63):
                        elem64 = ChannelDomain()
                        elem64.read(iprot)
                        self.channelDomains.append(elem64)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChannelDomains')
        if self.channelDomains is not None:
            oprot.writeFieldBegin('channelDomains', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.channelDomains))
            for elem65 in self.channelDomains:
                elem65.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 2)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.channelDomains))
        value = (value * 31) ^ hash(make_hashable(self.revision))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ProductCategory(object):
    """
    Attributes:
     - productCategoryId
     - title
     - productCount
     - newFlag
    """
    def __init__(self, productCategoryId=None, title=None, productCount=None, newFlag=None):
        self.productCategoryId = productCategoryId
        self.title = title
        self.productCount = productCount
        self.newFlag = newFlag

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.productCategoryId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.title = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.productCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.newFlag = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ProductCategory')
        if self.productCategoryId is not None:
            oprot.writeFieldBegin('productCategoryId', TType.I64, 1)
            oprot.writeI64(self.productCategoryId)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 2)
            oprot.writeString(self.title)
            oprot.writeFieldEnd()
        if self.productCount is not None:
            oprot.writeFieldBegin('productCount', TType.I32, 3)
            oprot.writeI32(self.productCount)
            oprot.writeFieldEnd()
        if self.newFlag is not None:
            oprot.writeFieldBegin('newFlag', TType.BOOL, 4)
            oprot.writeBool(self.newFlag)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.productCategoryId))
        value = (value * 31) ^ hash(make_hashable(self.title))
        value = (value * 31) ^ hash(make_hashable(self.productCount))
        value = (value * 31) ^ hash(make_hashable(self.newFlag))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChannelInfos(object):
    """
    Attributes:
     - channelInfos
     - revision
    """
    def __init__(self, channelInfos=None, revision=None):
        self.channelInfos = channelInfos
        self.revision = revision

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.channelInfos = []
                    (_, elem66) = iprot.readListBegin()
                    for _ in range(elem66):
                        elem67 = ChannelInfo()
                        elem67.read(iprot)
                        self.channelInfos.append(elem67)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChannelInfos')
        if self.channelInfos is not None:
            oprot.writeFieldBegin('channelInfos', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.channelInfos))
            for elem68 in self.channelInfos:
                elem68.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 2)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.channelInfos))
        value = (value * 31) ^ hash(make_hashable(self.revision))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChannelNotificationSetting(object):
    """
    Attributes:
     - channelId
     - name
     - notificationReceivable
     - messageReceivable
     - showDefault
    """
    def __init__(self, channelId=None, name=None, notificationReceivable=None, messageReceivable=None, showDefault=None):
        self.channelId = channelId
        self.name = name
        self.notificationReceivable = notificationReceivable
        self.messageReceivable = messageReceivable
        self.showDefault = showDefault

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.notificationReceivable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.messageReceivable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.showDefault = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChannelNotificationSetting')
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 1)
            oprot.writeString(self.channelId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        if self.notificationReceivable is not None:
            oprot.writeFieldBegin('notificationReceivable', TType.BOOL, 3)
            oprot.writeBool(self.notificationReceivable)
            oprot.writeFieldEnd()
        if self.messageReceivable is not None:
            oprot.writeFieldBegin('messageReceivable', TType.BOOL, 4)
            oprot.writeBool(self.messageReceivable)
            oprot.writeFieldEnd()
        if self.showDefault is not None:
            oprot.writeFieldBegin('showDefault', TType.BOOL, 5)
            oprot.writeBool(self.showDefault)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.channelId))
        value = (value * 31) ^ hash(make_hashable(self.name))
        value = (value * 31) ^ hash(make_hashable(self.notificationReceivable))
        value = (value * 31) ^ hash(make_hashable(self.messageReceivable))
        value = (value * 31) ^ hash(make_hashable(self.showDefault))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChannelSyncDatas(object):
    """
    Attributes:
     - channelInfos
     - channelDomains
     - revision
     - expires
    """
    def __init__(self, channelInfos=None, channelDomains=None, revision=None, expires=None):
        self.channelInfos = channelInfos
        self.channelDomains = channelDomains
        self.revision = revision
        self.expires = expires

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.channelInfos = []
                    (_, elem69) = iprot.readListBegin()
                    for _ in range(elem69):
                        elem70 = ChannelInfo()
                        elem70.read(iprot)
                        self.channelInfos.append(elem70)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.channelDomains = []
                    (_, elem71) = iprot.readListBegin()
                    for _ in range(elem71):
                        elem72 = ChannelDomain()
                        elem72.read(iprot)
                        self.channelDomains.append(elem72)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.expires = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChannelSyncDatas')
        if self.channelInfos is not None:
            oprot.writeFieldBegin('channelInfos', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.channelInfos))
            for elem73 in self.channelInfos:
                elem73.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.channelDomains is not None:
            oprot.writeFieldBegin('channelDomains', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.channelDomains))
            for elem74 in self.channelDomains:
                elem74.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 3)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        if self.expires is not None:
            oprot.writeFieldBegin('expires', TType.I64, 4)
            oprot.writeI64(self.expires)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.channelInfos))
        value = (value * 31) ^ hash(make_hashable(self.channelDomains))
        value = (value * 31) ^ hash(make_hashable(self.revision))
        value = (value * 31) ^ hash(make_hashable(self.expires))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class NotiCenterEventData(object):
    """
    Attributes:
     - id
     - to
     - from_
     - toChannel
     - fromChannel
     - eventType
     - createdTime
     - operationRevision
     - content
     - push
    """
    def __init__(self, id=None, to=None, from_=None, toChannel=None, fromChannel=None, eventType=None, createdTime=None, operationRevision=None, content=None, push=None):
        self.id = id
        self.to = to
        self.from_ = from_
        self.toChannel = toChannel
        self.fromChannel = fromChannel
        self.eventType = eventType
        self.createdTime = createdTime
        self.operationRevision = operationRevision
        self.content = content
        self.push = push

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.to = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.from_ = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.toChannel = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.fromChannel = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.eventType = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.operationRevision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.MAP:
                    self.content = {}
                    (_, _, elem75) = iprot.readMapBegin()
                    for _ in range(elem75):
                        elem77 = iprot.readString()
                        elem76 = iprot.readString()
                        self.content[elem77] = elem76
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.MAP:
                    self.push = {}
                    (_, _, elem78) = iprot.readMapBegin()
                    for _ in range(elem78):
                        elem80 = iprot.readString()
                        elem79 = iprot.readString()
                        self.push[elem80] = elem79
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('NotiCenterEventData')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id)
            oprot.writeFieldEnd()
        if self.to is not None:
            oprot.writeFieldBegin('to', TType.STRING, 2)
            oprot.writeString(self.to)
            oprot.writeFieldEnd()
        if self.from_ is not None:
            oprot.writeFieldBegin('from_', TType.STRING, 3)
            oprot.writeString(self.from_)
            oprot.writeFieldEnd()
        if self.toChannel is not None:
            oprot.writeFieldBegin('toChannel', TType.STRING, 4)
            oprot.writeString(self.toChannel)
            oprot.writeFieldEnd()
        if self.fromChannel is not None:
            oprot.writeFieldBegin('fromChannel', TType.STRING, 5)
            oprot.writeString(self.fromChannel)
            oprot.writeFieldEnd()
        if self.eventType is not None:
            oprot.writeFieldBegin('eventType', TType.STRING, 6)
            oprot.writeString(self.eventType)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 7)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.operationRevision is not None:
            oprot.writeFieldBegin('operationRevision', TType.I64, 8)
            oprot.writeI64(self.operationRevision)
            oprot.writeFieldEnd()
        if self.content is not None:
            oprot.writeFieldBegin('content', TType.MAP, 9)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.content))
            for elem82, elem81 in self.content.items():
                oprot.writeString(elem82)
                oprot.writeString(elem81)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.push is not None:
            oprot.writeFieldBegin('push', TType.MAP, 10)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.push))
            for elem84, elem83 in self.push.items():
                oprot.writeString(elem84)
                oprot.writeString(elem83)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.id))
        value = (value * 31) ^ hash(make_hashable(self.to))
        value = (value * 31) ^ hash(make_hashable(self.from_))
        value = (value * 31) ^ hash(make_hashable(self.toChannel))
        value = (value * 31) ^ hash(make_hashable(self.fromChannel))
        value = (value * 31) ^ hash(make_hashable(self.eventType))
        value = (value * 31) ^ hash(make_hashable(self.createdTime))
        value = (value * 31) ^ hash(make_hashable(self.operationRevision))
        value = (value * 31) ^ hash(make_hashable(self.content))
        value = (value * 31) ^ hash(make_hashable(self.push))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChannelToken(object):
    """
    Attributes:
     - token
     - obsToken
     - expiration
     - refreshToken
     - channelAccessToken
    """
    def __init__(self, token=None, obsToken=None, expiration=None, refreshToken=None, channelAccessToken=None):
        self.token = token
        self.obsToken = obsToken
        self.expiration = expiration
        self.refreshToken = refreshToken
        self.channelAccessToken = channelAccessToken

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.token = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.obsToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.expiration = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.refreshToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.channelAccessToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChannelToken')
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 1)
            oprot.writeString(self.token)
            oprot.writeFieldEnd()
        if self.obsToken is not None:
            oprot.writeFieldBegin('obsToken', TType.STRING, 2)
            oprot.writeString(self.obsToken)
            oprot.writeFieldEnd()
        if self.expiration is not None:
            oprot.writeFieldBegin('expiration', TType.I64, 3)
            oprot.writeI64(self.expiration)
            oprot.writeFieldEnd()
        if self.refreshToken is not None:
            oprot.writeFieldBegin('refreshToken', TType.STRING, 4)
            oprot.writeString(self.refreshToken)
            oprot.writeFieldEnd()
        if self.channelAccessToken is not None:
            oprot.writeFieldBegin('channelAccessToken', TType.STRING, 5)
            oprot.writeString(self.channelAccessToken)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.token))
        value = (value * 31) ^ hash(make_hashable(self.obsToken))
        value = (value * 31) ^ hash(make_hashable(self.expiration))
        value = (value * 31) ^ hash(make_hashable(self.refreshToken))
        value = (value * 31) ^ hash(make_hashable(self.channelAccessToken))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChannelSettings(object):
    """
    Attributes:
     - unapprovedMessageReceivable
    """
    def __init__(self, unapprovedMessageReceivable=None):
        self.unapprovedMessageReceivable = unapprovedMessageReceivable

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.unapprovedMessageReceivable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChannelSettings')
        if self.unapprovedMessageReceivable is not None:
            oprot.writeFieldBegin('unapprovedMessageReceivable', TType.BOOL, 1)
            oprot.writeBool(self.unapprovedMessageReceivable)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.unapprovedMessageReceivable))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChannelIdWithLastUpdated(object):
    """
    Attributes:
     - channelId
     - lastUpdated
    """
    def __init__(self, channelId=None, lastUpdated=None):
        self.channelId = channelId
        self.lastUpdated = lastUpdated

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.lastUpdated = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChannelIdWithLastUpdated')
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 1)
            oprot.writeString(self.channelId)
            oprot.writeFieldEnd()
        if self.lastUpdated is not None:
            oprot.writeFieldBegin('lastUpdated', TType.I64, 2)
            oprot.writeI64(self.lastUpdated)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.channelId))
        value = (value * 31) ^ hash(make_hashable(self.lastUpdated))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Coin(object):
    """
    Attributes:
     - freeCoinBalance
     - payedCoinBalance
     - totalCoinBalance
     - rewardCoinBalance
    """
    def __init__(self, freeCoinBalance=None, payedCoinBalance=None, totalCoinBalance=None, rewardCoinBalance=None):
        self.freeCoinBalance = freeCoinBalance
        self.payedCoinBalance = payedCoinBalance
        self.totalCoinBalance = totalCoinBalance
        self.rewardCoinBalance = rewardCoinBalance

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.freeCoinBalance = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.payedCoinBalance = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.totalCoinBalance = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.rewardCoinBalance = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Coin')
        if self.freeCoinBalance is not None:
            oprot.writeFieldBegin('freeCoinBalance', TType.I32, 1)
            oprot.writeI32(self.freeCoinBalance)
            oprot.writeFieldEnd()
        if self.payedCoinBalance is not None:
            oprot.writeFieldBegin('payedCoinBalance', TType.I32, 2)
            oprot.writeI32(self.payedCoinBalance)
            oprot.writeFieldEnd()
        if self.totalCoinBalance is not None:
            oprot.writeFieldBegin('totalCoinBalance', TType.I32, 3)
            oprot.writeI32(self.totalCoinBalance)
            oprot.writeFieldEnd()
        if self.rewardCoinBalance is not None:
            oprot.writeFieldBegin('rewardCoinBalance', TType.I32, 4)
            oprot.writeI32(self.rewardCoinBalance)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.freeCoinBalance))
        value = (value * 31) ^ hash(make_hashable(self.payedCoinBalance))
        value = (value * 31) ^ hash(make_hashable(self.totalCoinBalance))
        value = (value * 31) ^ hash(make_hashable(self.rewardCoinBalance))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CoinPayLoad(object):
    """
    Attributes:
     - payCoin
     - freeCoin
     - type
     - rewardCoin
    """
    def __init__(self, payCoin=None, freeCoin=None, type=None, rewardCoin=None):
        self.payCoin = payCoin
        self.freeCoin = freeCoin
        self.type = type
        self.rewardCoin = rewardCoin

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.payCoin = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.freeCoin = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = PayloadType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.rewardCoin = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CoinPayLoad')
        if self.payCoin is not None:
            oprot.writeFieldBegin('payCoin', TType.I32, 1)
            oprot.writeI32(self.payCoin)
            oprot.writeFieldEnd()
        if self.freeCoin is not None:
            oprot.writeFieldBegin('freeCoin', TType.I32, 2)
            oprot.writeI32(self.freeCoin)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.rewardCoin is not None:
            oprot.writeFieldBegin('rewardCoin', TType.I32, 4)
            oprot.writeI32(self.rewardCoin)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.payCoin))
        value = (value * 31) ^ hash(make_hashable(self.freeCoin))
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.rewardCoin))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CoinHistory(object):
    """
    Attributes:
     - payDate
     - coinBalance
     - coin
     - price
     - title
     - refund
     - paySeq
     - currency
     - currencySign
     - displayPrice
     - payload
     - channelId
    """
    def __init__(self, payDate=None, coinBalance=None, coin=None, price=None, title=None, refund=None, paySeq=None, currency=None, currencySign=None, displayPrice=None, payload=None, channelId=None):
        self.payDate = payDate
        self.coinBalance = coinBalance
        self.coin = coin
        self.price = price
        self.title = title
        self.refund = refund
        self.paySeq = paySeq
        self.currency = currency
        self.currencySign = currencySign
        self.displayPrice = displayPrice
        self.payload = payload
        self.channelId = channelId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.payDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.coinBalance = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.coin = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.price = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.title = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.refund = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.paySeq = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.currency = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.currencySign = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.displayPrice = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.payload = CoinPayLoad()
                    self.payload.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CoinHistory')
        if self.payDate is not None:
            oprot.writeFieldBegin('payDate', TType.I64, 1)
            oprot.writeI64(self.payDate)
            oprot.writeFieldEnd()
        if self.coinBalance is not None:
            oprot.writeFieldBegin('coinBalance', TType.I32, 2)
            oprot.writeI32(self.coinBalance)
            oprot.writeFieldEnd()
        if self.coin is not None:
            oprot.writeFieldBegin('coin', TType.I32, 3)
            oprot.writeI32(self.coin)
            oprot.writeFieldEnd()
        if self.price is not None:
            oprot.writeFieldBegin('price', TType.STRING, 4)
            oprot.writeString(self.price)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 5)
            oprot.writeString(self.title)
            oprot.writeFieldEnd()
        if self.refund is not None:
            oprot.writeFieldBegin('refund', TType.BOOL, 6)
            oprot.writeBool(self.refund)
            oprot.writeFieldEnd()
        if self.paySeq is not None:
            oprot.writeFieldBegin('paySeq', TType.STRING, 7)
            oprot.writeString(self.paySeq)
            oprot.writeFieldEnd()
        if self.currency is not None:
            oprot.writeFieldBegin('currency', TType.STRING, 8)
            oprot.writeString(self.currency)
            oprot.writeFieldEnd()
        if self.currencySign is not None:
            oprot.writeFieldBegin('currencySign', TType.STRING, 9)
            oprot.writeString(self.currencySign)
            oprot.writeFieldEnd()
        if self.displayPrice is not None:
            oprot.writeFieldBegin('displayPrice', TType.STRING, 10)
            oprot.writeString(self.displayPrice)
            oprot.writeFieldEnd()
        if self.payload is not None:
            oprot.writeFieldBegin('payload', TType.STRUCT, 11)
            self.payload.write(oprot)
            oprot.writeFieldEnd()
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 12)
            oprot.writeString(self.channelId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.payDate))
        value = (value * 31) ^ hash(make_hashable(self.coinBalance))
        value = (value * 31) ^ hash(make_hashable(self.coin))
        value = (value * 31) ^ hash(make_hashable(self.price))
        value = (value * 31) ^ hash(make_hashable(self.title))
        value = (value * 31) ^ hash(make_hashable(self.refund))
        value = (value * 31) ^ hash(make_hashable(self.paySeq))
        value = (value * 31) ^ hash(make_hashable(self.currency))
        value = (value * 31) ^ hash(make_hashable(self.currencySign))
        value = (value * 31) ^ hash(make_hashable(self.displayPrice))
        value = (value * 31) ^ hash(make_hashable(self.payload))
        value = (value * 31) ^ hash(make_hashable(self.channelId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CoinHistoryCondition(object):
    """
    Attributes:
     - start
     - size
     - language
     - eddt
     - appStoreCode
    """
    def __init__(self, start=None, size=None, language=None, eddt=None, appStoreCode=None):
        self.start = start
        self.size = size
        self.language = language
        self.eddt = eddt
        self.appStoreCode = appStoreCode

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.start = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.language = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.eddt = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.appStoreCode = PaymentType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CoinHistoryCondition')
        if self.start is not None:
            oprot.writeFieldBegin('start', TType.I64, 1)
            oprot.writeI64(self.start)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I32, 2)
            oprot.writeI32(self.size)
            oprot.writeFieldEnd()
        if self.language is not None:
            oprot.writeFieldBegin('language', TType.STRING, 3)
            oprot.writeString(self.language)
            oprot.writeFieldEnd()
        if self.eddt is not None:
            oprot.writeFieldBegin('eddt', TType.STRING, 4)
            oprot.writeString(self.eddt)
            oprot.writeFieldEnd()
        if self.appStoreCode is not None:
            oprot.writeFieldBegin('appStoreCode', TType.I32, 5)
            oprot.writeI32(self.appStoreCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.start))
        value = (value * 31) ^ hash(make_hashable(self.size))
        value = (value * 31) ^ hash(make_hashable(self.language))
        value = (value * 31) ^ hash(make_hashable(self.eddt))
        value = (value * 31) ^ hash(make_hashable(self.appStoreCode))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CoinHistoryResult(object):
    """
    Attributes:
     - historys
     - balance
     - hasNext
    """
    def __init__(self, historys=None, balance=None, hasNext=None):
        self.historys = historys
        self.balance = balance
        self.hasNext = hasNext

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.historys = []
                    (_, elem85) = iprot.readListBegin()
                    for _ in range(elem85):
                        elem86 = CoinHistory()
                        elem86.read(iprot)
                        self.historys.append(elem86)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.balance = Coin()
                    self.balance.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.hasNext = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CoinHistoryResult')
        if self.historys is not None:
            oprot.writeFieldBegin('historys', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.historys))
            for elem87 in self.historys:
                elem87.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.balance is not None:
            oprot.writeFieldBegin('balance', TType.STRUCT, 2)
            self.balance.write(oprot)
            oprot.writeFieldEnd()
        if self.hasNext is not None:
            oprot.writeFieldBegin('hasNext', TType.BOOL, 3)
            oprot.writeBool(self.hasNext)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.historys))
        value = (value * 31) ^ hash(make_hashable(self.balance))
        value = (value * 31) ^ hash(make_hashable(self.hasNext))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CoinProductItem(object):
    """
    Attributes:
     - itemId
     - coin
     - freeCoin
     - currency
     - price
     - displayPrice
     - name
     - desc
    """
    def __init__(self, itemId=None, coin=None, freeCoin=None, currency=None, price=None, displayPrice=None, name=None, desc=None):
        self.itemId = itemId
        self.coin = coin
        self.freeCoin = freeCoin
        self.currency = currency
        self.price = price
        self.displayPrice = displayPrice
        self.name = name
        self.desc = desc

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.itemId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.coin = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.freeCoin = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.currency = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.price = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.displayPrice = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.desc = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CoinProductItem')
        if self.itemId is not None:
            oprot.writeFieldBegin('itemId', TType.STRING, 1)
            oprot.writeString(self.itemId)
            oprot.writeFieldEnd()
        if self.coin is not None:
            oprot.writeFieldBegin('coin', TType.I32, 2)
            oprot.writeI32(self.coin)
            oprot.writeFieldEnd()
        if self.freeCoin is not None:
            oprot.writeFieldBegin('freeCoin', TType.I32, 3)
            oprot.writeI32(self.freeCoin)
            oprot.writeFieldEnd()
        if self.currency is not None:
            oprot.writeFieldBegin('currency', TType.STRING, 5)
            oprot.writeString(self.currency)
            oprot.writeFieldEnd()
        if self.price is not None:
            oprot.writeFieldBegin('price', TType.STRING, 6)
            oprot.writeString(self.price)
            oprot.writeFieldEnd()
        if self.displayPrice is not None:
            oprot.writeFieldBegin('displayPrice', TType.STRING, 7)
            oprot.writeString(self.displayPrice)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 8)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        if self.desc is not None:
            oprot.writeFieldBegin('desc', TType.STRING, 9)
            oprot.writeString(self.desc)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.itemId))
        value = (value * 31) ^ hash(make_hashable(self.coin))
        value = (value * 31) ^ hash(make_hashable(self.freeCoin))
        value = (value * 31) ^ hash(make_hashable(self.currency))
        value = (value * 31) ^ hash(make_hashable(self.price))
        value = (value * 31) ^ hash(make_hashable(self.displayPrice))
        value = (value * 31) ^ hash(make_hashable(self.name))
        value = (value * 31) ^ hash(make_hashable(self.desc))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CoinPurchaseConfirm(object):
    """
    Attributes:
     - orderId
     - appStoreCode
     - receipt
     - signature
     - seller
     - requestType
     - ignoreReceipt
    """
    def __init__(self, orderId=None, appStoreCode=None, receipt=None, signature=None, seller=None, requestType=None, ignoreReceipt=None):
        self.orderId = orderId
        self.appStoreCode = appStoreCode
        self.receipt = receipt
        self.signature = signature
        self.seller = seller
        self.requestType = requestType
        self.ignoreReceipt = ignoreReceipt

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.orderId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.appStoreCode = PaymentType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.receipt = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.signature = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.seller = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.requestType = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.ignoreReceipt = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CoinPurchaseConfirm')
        if self.orderId is not None:
            oprot.writeFieldBegin('orderId', TType.STRING, 1)
            oprot.writeString(self.orderId)
            oprot.writeFieldEnd()
        if self.appStoreCode is not None:
            oprot.writeFieldBegin('appStoreCode', TType.I32, 2)
            oprot.writeI32(self.appStoreCode)
            oprot.writeFieldEnd()
        if self.receipt is not None:
            oprot.writeFieldBegin('receipt', TType.STRING, 3)
            oprot.writeString(self.receipt)
            oprot.writeFieldEnd()
        if self.signature is not None:
            oprot.writeFieldBegin('signature', TType.STRING, 4)
            oprot.writeString(self.signature)
            oprot.writeFieldEnd()
        if self.seller is not None:
            oprot.writeFieldBegin('seller', TType.STRING, 5)
            oprot.writeString(self.seller)
            oprot.writeFieldEnd()
        if self.requestType is not None:
            oprot.writeFieldBegin('requestType', TType.STRING, 6)
            oprot.writeString(self.requestType)
            oprot.writeFieldEnd()
        if self.ignoreReceipt is not None:
            oprot.writeFieldBegin('ignoreReceipt', TType.BOOL, 7)
            oprot.writeBool(self.ignoreReceipt)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.orderId))
        value = (value * 31) ^ hash(make_hashable(self.appStoreCode))
        value = (value * 31) ^ hash(make_hashable(self.receipt))
        value = (value * 31) ^ hash(make_hashable(self.signature))
        value = (value * 31) ^ hash(make_hashable(self.seller))
        value = (value * 31) ^ hash(make_hashable(self.requestType))
        value = (value * 31) ^ hash(make_hashable(self.ignoreReceipt))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CoinPurchaseReservation(object):
    """
    Attributes:
     - productId
     - country
     - currency
     - price
     - appStoreCode
     - language
     - pgCode
     - redirectUrl
    """
    def __init__(self, productId=None, country=None, currency=None, price=None, appStoreCode=None, language=None, pgCode=None, redirectUrl=None):
        self.productId = productId
        self.country = country
        self.currency = currency
        self.price = price
        self.appStoreCode = appStoreCode
        self.language = language
        self.pgCode = pgCode
        self.redirectUrl = redirectUrl

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.productId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.country = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.currency = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.price = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.appStoreCode = PaymentType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.language = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.pgCode = PaymentPgType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.redirectUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CoinPurchaseReservation')
        if self.productId is not None:
            oprot.writeFieldBegin('productId', TType.STRING, 1)
            oprot.writeString(self.productId)
            oprot.writeFieldEnd()
        if self.country is not None:
            oprot.writeFieldBegin('country', TType.STRING, 2)
            oprot.writeString(self.country)
            oprot.writeFieldEnd()
        if self.currency is not None:
            oprot.writeFieldBegin('currency', TType.STRING, 3)
            oprot.writeString(self.currency)
            oprot.writeFieldEnd()
        if self.price is not None:
            oprot.writeFieldBegin('price', TType.STRING, 4)
            oprot.writeString(self.price)
            oprot.writeFieldEnd()
        if self.appStoreCode is not None:
            oprot.writeFieldBegin('appStoreCode', TType.I32, 5)
            oprot.writeI32(self.appStoreCode)
            oprot.writeFieldEnd()
        if self.language is not None:
            oprot.writeFieldBegin('language', TType.STRING, 6)
            oprot.writeString(self.language)
            oprot.writeFieldEnd()
        if self.pgCode is not None:
            oprot.writeFieldBegin('pgCode', TType.I32, 7)
            oprot.writeI32(self.pgCode)
            oprot.writeFieldEnd()
        if self.redirectUrl is not None:
            oprot.writeFieldBegin('redirectUrl', TType.STRING, 8)
            oprot.writeString(self.redirectUrl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.productId))
        value = (value * 31) ^ hash(make_hashable(self.country))
        value = (value * 31) ^ hash(make_hashable(self.currency))
        value = (value * 31) ^ hash(make_hashable(self.price))
        value = (value * 31) ^ hash(make_hashable(self.appStoreCode))
        value = (value * 31) ^ hash(make_hashable(self.language))
        value = (value * 31) ^ hash(make_hashable(self.pgCode))
        value = (value * 31) ^ hash(make_hashable(self.redirectUrl))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CoinUseReservationItem(object):
    """
    Attributes:
     - itemId
     - itemName
     - amount
    """
    def __init__(self, itemId=None, itemName=None, amount=None):
        self.itemId = itemId
        self.itemName = itemName
        self.amount = amount

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.itemId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.itemName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.amount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CoinUseReservationItem')
        if self.itemId is not None:
            oprot.writeFieldBegin('itemId', TType.STRING, 1)
            oprot.writeString(self.itemId)
            oprot.writeFieldEnd()
        if self.itemName is not None:
            oprot.writeFieldBegin('itemName', TType.STRING, 2)
            oprot.writeString(self.itemName)
            oprot.writeFieldEnd()
        if self.amount is not None:
            oprot.writeFieldBegin('amount', TType.I32, 3)
            oprot.writeI32(self.amount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.itemId))
        value = (value * 31) ^ hash(make_hashable(self.itemName))
        value = (value * 31) ^ hash(make_hashable(self.amount))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CoinUseReservation(object):
    """
    Attributes:
     - channelId
     - shopOrderId
     - appStoreCode
     - items
     - country
    """
    def __init__(self, channelId=None, shopOrderId=None, appStoreCode=None, items=None, country=None):
        self.channelId = channelId
        self.shopOrderId = shopOrderId
        self.appStoreCode = appStoreCode
        self.items = items
        self.country = country

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.shopOrderId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.appStoreCode = PaymentType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.items = []
                    (_, elem88) = iprot.readListBegin()
                    for _ in range(elem88):
                        elem89 = CoinUseReservationItem()
                        elem89.read(iprot)
                        self.items.append(elem89)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.country = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CoinUseReservation')
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 1)
            oprot.writeString(self.channelId)
            oprot.writeFieldEnd()
        if self.shopOrderId is not None:
            oprot.writeFieldBegin('shopOrderId', TType.STRING, 2)
            oprot.writeString(self.shopOrderId)
            oprot.writeFieldEnd()
        if self.appStoreCode is not None:
            oprot.writeFieldBegin('appStoreCode', TType.I32, 3)
            oprot.writeI32(self.appStoreCode)
            oprot.writeFieldEnd()
        if self.items is not None:
            oprot.writeFieldBegin('items', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.items))
            for elem90 in self.items:
                elem90.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.country is not None:
            oprot.writeFieldBegin('country', TType.STRING, 5)
            oprot.writeString(self.country)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.channelId))
        value = (value * 31) ^ hash(make_hashable(self.shopOrderId))
        value = (value * 31) ^ hash(make_hashable(self.appStoreCode))
        value = (value * 31) ^ hash(make_hashable(self.items))
        value = (value * 31) ^ hash(make_hashable(self.country))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CompactContact(object):
    """
    Attributes:
     - mid
     - createdTime
     - modifiedTime
     - status
     - settings
     - displayNameOverridden
    """
    def __init__(self, mid=None, createdTime=None, modifiedTime=None, status=None, settings=None, displayNameOverridden=None):
        self.mid = mid
        self.createdTime = createdTime
        self.modifiedTime = modifiedTime
        self.status = status
        self.settings = settings
        self.displayNameOverridden = displayNameOverridden

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.modifiedTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.status = ContactStatus(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.settings = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.displayNameOverridden = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CompactContact')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 2)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.modifiedTime is not None:
            oprot.writeFieldBegin('modifiedTime', TType.I64, 3)
            oprot.writeI64(self.modifiedTime)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 4)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.settings is not None:
            oprot.writeFieldBegin('settings', TType.I64, 5)
            oprot.writeI64(self.settings)
            oprot.writeFieldEnd()
        if self.displayNameOverridden is not None:
            oprot.writeFieldBegin('displayNameOverridden', TType.STRING, 6)
            oprot.writeString(self.displayNameOverridden)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.createdTime))
        value = (value * 31) ^ hash(make_hashable(self.modifiedTime))
        value = (value * 31) ^ hash(make_hashable(self.status))
        value = (value * 31) ^ hash(make_hashable(self.settings))
        value = (value * 31) ^ hash(make_hashable(self.displayNameOverridden))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ContactModification(object):
    """
    Attributes:
     - type
     - luid
     - phones
     - emails
     - userids
    """
    def __init__(self, type=None, luid=None, phones=None, emails=None, userids=None):
        self.type = type
        self.luid = luid
        self.phones = phones
        self.emails = emails
        self.userids = userids

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = ModificationType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.luid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.phones = []
                    (_, elem91) = iprot.readListBegin()
                    for _ in range(elem91):
                        elem92 = iprot.readString()
                        self.phones.append(elem92)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.emails = []
                    (_, elem93) = iprot.readListBegin()
                    for _ in range(elem93):
                        elem94 = iprot.readString()
                        self.emails.append(elem94)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.userids = []
                    (_, elem95) = iprot.readListBegin()
                    for _ in range(elem95):
                        elem96 = iprot.readString()
                        self.userids.append(elem96)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ContactModification')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.luid is not None:
            oprot.writeFieldBegin('luid', TType.STRING, 2)
            oprot.writeString(self.luid)
            oprot.writeFieldEnd()
        if self.phones is not None:
            oprot.writeFieldBegin('phones', TType.LIST, 11)
            oprot.writeListBegin(TType.STRING, len(self.phones))
            for elem97 in self.phones:
                oprot.writeString(elem97)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.emails is not None:
            oprot.writeFieldBegin('emails', TType.LIST, 12)
            oprot.writeListBegin(TType.STRING, len(self.emails))
            for elem98 in self.emails:
                oprot.writeString(elem98)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.userids is not None:
            oprot.writeFieldBegin('userids', TType.LIST, 13)
            oprot.writeListBegin(TType.STRING, len(self.userids))
            for elem99 in self.userids:
                oprot.writeString(elem99)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.luid))
        value = (value * 31) ^ hash(make_hashable(self.phones))
        value = (value * 31) ^ hash(make_hashable(self.emails))
        value = (value * 31) ^ hash(make_hashable(self.userids))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ContactRegistration(object):
    """
    Attributes:
     - contact
     - luid
     - contactType
     - contactKey
    """
    def __init__(self, contact=None, luid=None, contactType=None, contactKey=None):
        self.contact = contact
        self.luid = luid
        self.contactType = contactType
        self.contactKey = contactKey

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.contact = Contact()
                    self.contact.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.luid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.contactType = ContactType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.contactKey = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ContactRegistration')
        if self.contact is not None:
            oprot.writeFieldBegin('contact', TType.STRUCT, 1)
            self.contact.write(oprot)
            oprot.writeFieldEnd()
        if self.luid is not None:
            oprot.writeFieldBegin('luid', TType.STRING, 10)
            oprot.writeString(self.luid)
            oprot.writeFieldEnd()
        if self.contactType is not None:
            oprot.writeFieldBegin('contactType', TType.I32, 11)
            oprot.writeI32(self.contactType)
            oprot.writeFieldEnd()
        if self.contactKey is not None:
            oprot.writeFieldBegin('contactKey', TType.STRING, 12)
            oprot.writeString(self.contactKey)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.contact))
        value = (value * 31) ^ hash(make_hashable(self.luid))
        value = (value * 31) ^ hash(make_hashable(self.contactType))
        value = (value * 31) ^ hash(make_hashable(self.contactKey))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ContactReport(object):
    """
    Attributes:
     - mid
     - exists
     - contact
    """
    def __init__(self, mid=None, exists=None, contact=None):
        self.mid = mid
        self.exists = exists
        self.contact = contact

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.exists = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.contact = Contact()
                    self.contact.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ContactReport')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.exists is not None:
            oprot.writeFieldBegin('exists', TType.BOOL, 2)
            oprot.writeBool(self.exists)
            oprot.writeFieldEnd()
        if self.contact is not None:
            oprot.writeFieldBegin('contact', TType.STRUCT, 3)
            self.contact.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.exists))
        value = (value * 31) ^ hash(make_hashable(self.contact))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ContactReportResult(object):
    """
    Attributes:
     - mid
     - exists
    """
    def __init__(self, mid=None, exists=None):
        self.mid = mid
        self.exists = exists

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.exists = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ContactReportResult')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.exists is not None:
            oprot.writeFieldBegin('exists', TType.BOOL, 2)
            oprot.writeBool(self.exists)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.exists))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class DeviceInfo(object):
    """
    Attributes:
     - deviceName
     - systemName
     - systemVersion
     - model
     - carrierCode
     - carrierName
     - applicationType
    """
    def __init__(self, deviceName=None, systemName=None, systemVersion=None, model=None, carrierCode=None, carrierName=None, applicationType=None):
        self.deviceName = deviceName
        self.systemName = systemName
        self.systemVersion = systemVersion
        self.model = model
        self.carrierCode = carrierCode
        self.carrierName = carrierName
        self.applicationType = applicationType

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.systemName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.systemVersion = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.model = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.carrierCode = CarrierCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.carrierName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.applicationType = ApplicationType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('DeviceInfo')
        if self.deviceName is not None:
            oprot.writeFieldBegin('deviceName', TType.STRING, 1)
            oprot.writeString(self.deviceName)
            oprot.writeFieldEnd()
        if self.systemName is not None:
            oprot.writeFieldBegin('systemName', TType.STRING, 2)
            oprot.writeString(self.systemName)
            oprot.writeFieldEnd()
        if self.systemVersion is not None:
            oprot.writeFieldBegin('systemVersion', TType.STRING, 3)
            oprot.writeString(self.systemVersion)
            oprot.writeFieldEnd()
        if self.model is not None:
            oprot.writeFieldBegin('model', TType.STRING, 4)
            oprot.writeString(self.model)
            oprot.writeFieldEnd()
        if self.carrierCode is not None:
            oprot.writeFieldBegin('carrierCode', TType.I32, 10)
            oprot.writeI32(self.carrierCode)
            oprot.writeFieldEnd()
        if self.carrierName is not None:
            oprot.writeFieldBegin('carrierName', TType.STRING, 11)
            oprot.writeString(self.carrierName)
            oprot.writeFieldEnd()
        if self.applicationType is not None:
            oprot.writeFieldBegin('applicationType', TType.I32, 20)
            oprot.writeI32(self.applicationType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.deviceName))
        value = (value * 31) ^ hash(make_hashable(self.systemName))
        value = (value * 31) ^ hash(make_hashable(self.systemVersion))
        value = (value * 31) ^ hash(make_hashable(self.model))
        value = (value * 31) ^ hash(make_hashable(self.carrierCode))
        value = (value * 31) ^ hash(make_hashable(self.carrierName))
        value = (value * 31) ^ hash(make_hashable(self.applicationType))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class EmailConfirmation(object):
    """
    Attributes:
     - usePasswordSet
     - email
     - password
     - ignoreDuplication
    """
    def __init__(self, usePasswordSet=None, email=None, password=None, ignoreDuplication=None):
        self.usePasswordSet = usePasswordSet
        self.email = email
        self.password = password
        self.ignoreDuplication = ignoreDuplication

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.usePasswordSet = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.email = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.password = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.ignoreDuplication = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('EmailConfirmation')
        if self.usePasswordSet is not None:
            oprot.writeFieldBegin('usePasswordSet', TType.BOOL, 1)
            oprot.writeBool(self.usePasswordSet)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 2)
            oprot.writeString(self.email)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 3)
            oprot.writeString(self.password)
            oprot.writeFieldEnd()
        if self.ignoreDuplication is not None:
            oprot.writeFieldBegin('ignoreDuplication', TType.BOOL, 4)
            oprot.writeBool(self.ignoreDuplication)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.usePasswordSet))
        value = (value * 31) ^ hash(make_hashable(self.email))
        value = (value * 31) ^ hash(make_hashable(self.password))
        value = (value * 31) ^ hash(make_hashable(self.ignoreDuplication))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class EmailConfirmationSession(object):
    """
    Attributes:
     - emailConfirmationType
     - verifier
     - targetEmail
    """
    def __init__(self, emailConfirmationType=None, verifier=None, targetEmail=None):
        self.emailConfirmationType = emailConfirmationType
        self.verifier = verifier
        self.targetEmail = targetEmail

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.emailConfirmationType = EmailConfirmationType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.verifier = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.targetEmail = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('EmailConfirmationSession')
        if self.emailConfirmationType is not None:
            oprot.writeFieldBegin('emailConfirmationType', TType.I32, 1)
            oprot.writeI32(self.emailConfirmationType)
            oprot.writeFieldEnd()
        if self.verifier is not None:
            oprot.writeFieldBegin('verifier', TType.STRING, 2)
            oprot.writeString(self.verifier)
            oprot.writeFieldEnd()
        if self.targetEmail is not None:
            oprot.writeFieldBegin('targetEmail', TType.STRING, 3)
            oprot.writeString(self.targetEmail)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.emailConfirmationType))
        value = (value * 31) ^ hash(make_hashable(self.verifier))
        value = (value * 31) ^ hash(make_hashable(self.targetEmail))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class FriendChannelMatrix(object):
    """
    Attributes:
     - channelId
     - representMid
     - count
     - point
    """
    def __init__(self, channelId=None, representMid=None, count=None, point=None):
        self.channelId = channelId
        self.representMid = representMid
        self.count = count
        self.point = point

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.representMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.point = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('FriendChannelMatrix')
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 1)
            oprot.writeString(self.channelId)
            oprot.writeFieldEnd()
        if self.representMid is not None:
            oprot.writeFieldBegin('representMid', TType.STRING, 2)
            oprot.writeString(self.representMid)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 3)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.point is not None:
            oprot.writeFieldBegin('point', TType.I32, 4)
            oprot.writeI32(self.point)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.channelId))
        value = (value * 31) ^ hash(make_hashable(self.representMid))
        value = (value * 31) ^ hash(make_hashable(self.count))
        value = (value * 31) ^ hash(make_hashable(self.point))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class FriendChannelMatricesResponse(object):
    """
    Attributes:
     - expires
     - matrices
    """
    def __init__(self, expires=None, matrices=None):
        self.expires = expires
        self.matrices = matrices

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.expires = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.matrices = []
                    (_, elem100) = iprot.readListBegin()
                    for _ in range(elem100):
                        elem101 = FriendChannelMatrix()
                        elem101.read(iprot)
                        self.matrices.append(elem101)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('FriendChannelMatricesResponse')
        if self.expires is not None:
            oprot.writeFieldBegin('expires', TType.I64, 1)
            oprot.writeI64(self.expires)
            oprot.writeFieldEnd()
        if self.matrices is not None:
            oprot.writeFieldBegin('matrices', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.matrices))
            for elem102 in self.matrices:
                elem102.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.expires))
        value = (value * 31) ^ hash(make_hashable(self.matrices))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class FriendRequest(object):
    """
    Attributes:
     - eMid
     - mid
     - direction
     - method
     - param
     - timestamp
     - seqId
     - displayName
     - picturePath
     - pictureStatus
    """
    def __init__(self, eMid=None, mid=None, direction=None, method=None, param=None, timestamp=None, seqId=None, displayName=None, picturePath=None, pictureStatus=None):
        self.eMid = eMid
        self.mid = mid
        self.direction = direction
        self.method = method
        self.param = param
        self.timestamp = timestamp
        self.seqId = seqId
        self.displayName = displayName
        self.picturePath = picturePath
        self.pictureStatus = pictureStatus

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.eMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.direction = FriendRequestDirection(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.method = FriendRequestMethod(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.param = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.seqId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.picturePath = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.pictureStatus = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('FriendRequest')
        if self.eMid is not None:
            oprot.writeFieldBegin('eMid', TType.STRING, 1)
            oprot.writeString(self.eMid)
            oprot.writeFieldEnd()
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 2)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.direction is not None:
            oprot.writeFieldBegin('direction', TType.I32, 3)
            oprot.writeI32(self.direction)
            oprot.writeFieldEnd()
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.I32, 4)
            oprot.writeI32(self.method)
            oprot.writeFieldEnd()
        if self.param is not None:
            oprot.writeFieldBegin('param', TType.STRING, 5)
            oprot.writeString(self.param)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 6)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        if self.seqId is not None:
            oprot.writeFieldBegin('seqId', TType.I64, 7)
            oprot.writeI64(self.seqId)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 10)
            oprot.writeString(self.displayName)
            oprot.writeFieldEnd()
        if self.picturePath is not None:
            oprot.writeFieldBegin('picturePath', TType.STRING, 11)
            oprot.writeString(self.picturePath)
            oprot.writeFieldEnd()
        if self.pictureStatus is not None:
            oprot.writeFieldBegin('pictureStatus', TType.STRING, 12)
            oprot.writeString(self.pictureStatus)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.eMid))
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.direction))
        value = (value * 31) ^ hash(make_hashable(self.method))
        value = (value * 31) ^ hash(make_hashable(self.param))
        value = (value * 31) ^ hash(make_hashable(self.timestamp))
        value = (value * 31) ^ hash(make_hashable(self.seqId))
        value = (value * 31) ^ hash(make_hashable(self.displayName))
        value = (value * 31) ^ hash(make_hashable(self.picturePath))
        value = (value * 31) ^ hash(make_hashable(self.pictureStatus))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class FriendRequestsInfo(object):
    """
    Attributes:
     - totalIncomingCount
     - totalOutgoingCount
     - recentIncomings
     - recentOutgoings
     - totalIncomingLimit
     - totalOutgoingLimit
    """
    def __init__(self, totalIncomingCount=None, totalOutgoingCount=None, recentIncomings=None, recentOutgoings=None, totalIncomingLimit=None, totalOutgoingLimit=None):
        self.totalIncomingCount = totalIncomingCount
        self.totalOutgoingCount = totalOutgoingCount
        self.recentIncomings = recentIncomings
        self.recentOutgoings = recentOutgoings
        self.totalIncomingLimit = totalIncomingLimit
        self.totalOutgoingLimit = totalOutgoingLimit

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.totalIncomingCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.totalOutgoingCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.recentIncomings = []
                    (_, elem103) = iprot.readListBegin()
                    for _ in range(elem103):
                        elem104 = FriendRequest()
                        elem104.read(iprot)
                        self.recentIncomings.append(elem104)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.recentOutgoings = []
                    (_, elem105) = iprot.readListBegin()
                    for _ in range(elem105):
                        elem106 = FriendRequest()
                        elem106.read(iprot)
                        self.recentOutgoings.append(elem106)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.totalIncomingLimit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.totalOutgoingLimit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('FriendRequestsInfo')
        if self.totalIncomingCount is not None:
            oprot.writeFieldBegin('totalIncomingCount', TType.I32, 1)
            oprot.writeI32(self.totalIncomingCount)
            oprot.writeFieldEnd()
        if self.totalOutgoingCount is not None:
            oprot.writeFieldBegin('totalOutgoingCount', TType.I32, 2)
            oprot.writeI32(self.totalOutgoingCount)
            oprot.writeFieldEnd()
        if self.recentIncomings is not None:
            oprot.writeFieldBegin('recentIncomings', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.recentIncomings))
            for elem107 in self.recentIncomings:
                elem107.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.recentOutgoings is not None:
            oprot.writeFieldBegin('recentOutgoings', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.recentOutgoings))
            for elem108 in self.recentOutgoings:
                elem108.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.totalIncomingLimit is not None:
            oprot.writeFieldBegin('totalIncomingLimit', TType.I32, 5)
            oprot.writeI32(self.totalIncomingLimit)
            oprot.writeFieldEnd()
        if self.totalOutgoingLimit is not None:
            oprot.writeFieldBegin('totalOutgoingLimit', TType.I32, 6)
            oprot.writeI32(self.totalOutgoingLimit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.totalIncomingCount))
        value = (value * 31) ^ hash(make_hashable(self.totalOutgoingCount))
        value = (value * 31) ^ hash(make_hashable(self.recentIncomings))
        value = (value * 31) ^ hash(make_hashable(self.recentOutgoings))
        value = (value * 31) ^ hash(make_hashable(self.totalIncomingLimit))
        value = (value * 31) ^ hash(make_hashable(self.totalOutgoingLimit))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Geolocation(object):
    """
    Attributes:
     - longitude
     - latitude
    """
    def __init__(self, longitude=None, latitude=None):
        self.longitude = longitude
        self.latitude = latitude

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.longitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.latitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Geolocation')
        if self.longitude is not None:
            oprot.writeFieldBegin('longitude', TType.DOUBLE, 1)
            oprot.writeDouble(self.longitude)
            oprot.writeFieldEnd()
        if self.latitude is not None:
            oprot.writeFieldBegin('latitude', TType.DOUBLE, 2)
            oprot.writeDouble(self.latitude)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.longitude))
        value = (value * 31) ^ hash(make_hashable(self.latitude))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class NotificationTarget(object):
    """
    Attributes:
     - applicationType
     - applicationVersion
     - region
    """
    def __init__(self, applicationType=None, applicationVersion=None, region=None):
        self.applicationType = applicationType
        self.applicationVersion = applicationVersion
        self.region = region

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.applicationType = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.applicationVersion = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.region = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('NotificationTarget')
        if self.applicationType is not None:
            oprot.writeFieldBegin('applicationType', TType.STRING, 1)
            oprot.writeString(self.applicationType)
            oprot.writeFieldEnd()
        if self.applicationVersion is not None:
            oprot.writeFieldBegin('applicationVersion', TType.STRING, 2)
            oprot.writeString(self.applicationVersion)
            oprot.writeFieldEnd()
        if self.region is not None:
            oprot.writeFieldBegin('region', TType.STRING, 3)
            oprot.writeString(self.region)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.applicationType))
        value = (value * 31) ^ hash(make_hashable(self.applicationVersion))
        value = (value * 31) ^ hash(make_hashable(self.region))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GlobalEvent(object):
    """
    Attributes:
     - key
     - targets
     - createdTime
     - data
     - maxDelay
    """
    def __init__(self, key=None, targets=None, createdTime=None, data=None, maxDelay=None):
        self.key = key
        self.targets = targets
        self.createdTime = createdTime
        self.data = data
        self.maxDelay = maxDelay

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.key = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.targets = []
                    (_, elem109) = iprot.readListBegin()
                    for _ in range(elem109):
                        elem110 = NotificationTarget()
                        elem110.read(iprot)
                        self.targets.append(elem110)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.data = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.maxDelay = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GlobalEvent')
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRING, 1)
            oprot.writeString(self.key)
            oprot.writeFieldEnd()
        if self.targets is not None:
            oprot.writeFieldBegin('targets', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.targets))
            for elem111 in self.targets:
                elem111.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 3)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.I64, 4)
            oprot.writeI64(self.data)
            oprot.writeFieldEnd()
        if self.maxDelay is not None:
            oprot.writeFieldBegin('maxDelay', TType.I32, 5)
            oprot.writeI32(self.maxDelay)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.key))
        value = (value * 31) ^ hash(make_hashable(self.targets))
        value = (value * 31) ^ hash(make_hashable(self.createdTime))
        value = (value * 31) ^ hash(make_hashable(self.data))
        value = (value * 31) ^ hash(make_hashable(self.maxDelay))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GroupPreference(object):
    """
    Attributes:
     - invitationTicket
     - favoriteTimestamp
    """
    def __init__(self, invitationTicket=None, favoriteTimestamp=None):
        self.invitationTicket = invitationTicket
        self.favoriteTimestamp = favoriteTimestamp

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.invitationTicket = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.favoriteTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GroupPreference')
        if self.invitationTicket is not None:
            oprot.writeFieldBegin('invitationTicket', TType.STRING, 1)
            oprot.writeString(self.invitationTicket)
            oprot.writeFieldEnd()
        if self.favoriteTimestamp is not None:
            oprot.writeFieldBegin('favoriteTimestamp', TType.I64, 2)
            oprot.writeI64(self.favoriteTimestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.invitationTicket))
        value = (value * 31) ^ hash(make_hashable(self.favoriteTimestamp))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Group(object):
    """
    Attributes:
     - id
     - createdTime
     - name
     - pictureStatus
     - preventedJoinByTicket
     - groupPreference
     - members
     - creator
     - invitee
     - notificationDisabled
    """
    def __init__(self, id=None, createdTime=None, name=None, pictureStatus=None, preventedJoinByTicket=None, groupPreference=None, members=None, creator=None, invitee=None, notificationDisabled=None):
        self.id = id
        self.createdTime = createdTime
        self.name = name
        self.pictureStatus = pictureStatus
        self.preventedJoinByTicket = preventedJoinByTicket
        self.groupPreference = groupPreference
        self.members = members
        self.creator = creator
        self.invitee = invitee
        self.notificationDisabled = notificationDisabled

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.pictureStatus = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.preventedJoinByTicket = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.groupPreference = GroupPreference()
                    self.groupPreference.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.LIST:
                    self.members = []
                    (_, elem112) = iprot.readListBegin()
                    for _ in range(elem112):
                        elem113 = Contact()
                        elem113.read(iprot)
                        self.members.append(elem113)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRUCT:
                    self.creator = Contact()
                    self.creator.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.LIST:
                    self.invitee = []
                    (_, elem114) = iprot.readListBegin()
                    for _ in range(elem114):
                        elem115 = Contact()
                        elem115.read(iprot)
                        self.invitee.append(elem115)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.BOOL:
                    self.notificationDisabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Group')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 2)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 10)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        if self.pictureStatus is not None:
            oprot.writeFieldBegin('pictureStatus', TType.STRING, 11)
            oprot.writeString(self.pictureStatus)
            oprot.writeFieldEnd()
        if self.preventedJoinByTicket is not None:
            oprot.writeFieldBegin('preventedJoinByTicket', TType.BOOL, 12)
            oprot.writeBool(self.preventedJoinByTicket)
            oprot.writeFieldEnd()
        if self.groupPreference is not None:
            oprot.writeFieldBegin('groupPreference', TType.STRUCT, 13)
            self.groupPreference.write(oprot)
            oprot.writeFieldEnd()
        if self.members is not None:
            oprot.writeFieldBegin('members', TType.LIST, 20)
            oprot.writeListBegin(TType.STRUCT, len(self.members))
            for elem116 in self.members:
                elem116.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.creator is not None:
            oprot.writeFieldBegin('creator', TType.STRUCT, 21)
            self.creator.write(oprot)
            oprot.writeFieldEnd()
        if self.invitee is not None:
            oprot.writeFieldBegin('invitee', TType.LIST, 22)
            oprot.writeListBegin(TType.STRUCT, len(self.invitee))
            for elem117 in self.invitee:
                elem117.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.notificationDisabled is not None:
            oprot.writeFieldBegin('notificationDisabled', TType.BOOL, 31)
            oprot.writeBool(self.notificationDisabled)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.id))
        value = (value * 31) ^ hash(make_hashable(self.createdTime))
        value = (value * 31) ^ hash(make_hashable(self.name))
        value = (value * 31) ^ hash(make_hashable(self.pictureStatus))
        value = (value * 31) ^ hash(make_hashable(self.preventedJoinByTicket))
        value = (value * 31) ^ hash(make_hashable(self.groupPreference))
        value = (value * 31) ^ hash(make_hashable(self.members))
        value = (value * 31) ^ hash(make_hashable(self.creator))
        value = (value * 31) ^ hash(make_hashable(self.invitee))
        value = (value * 31) ^ hash(make_hashable(self.notificationDisabled))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class IdentityCredential(object):
    """
    Attributes:
     - provider
     - identifier
     - password
    """
    def __init__(self, provider=None, identifier=None, password=None):
        self.provider = provider
        self.identifier = identifier
        self.password = password

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.provider = IdentityProvider(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.identifier = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.password = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('IdentityCredential')
        if self.provider is not None:
            oprot.writeFieldBegin('provider', TType.I32, 1)
            oprot.writeI32(self.provider)
            oprot.writeFieldEnd()
        if self.identifier is not None:
            oprot.writeFieldBegin('identifier', TType.STRING, 2)
            oprot.writeString(self.identifier)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 3)
            oprot.writeString(self.password)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.provider))
        value = (value * 31) ^ hash(make_hashable(self.identifier))
        value = (value * 31) ^ hash(make_hashable(self.password))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class LastReadMessageId(object):
    """
    Attributes:
     - mid
     - lastReadMessageId
    """
    def __init__(self, mid=None, lastReadMessageId=None):
        self.mid = mid
        self.lastReadMessageId = lastReadMessageId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.lastReadMessageId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('LastReadMessageId')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.lastReadMessageId is not None:
            oprot.writeFieldBegin('lastReadMessageId', TType.STRING, 2)
            oprot.writeString(self.lastReadMessageId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.lastReadMessageId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class LastReadMessageIds(object):
    """
    Attributes:
     - chatId
     - lastReadMessageIds
    """
    def __init__(self, chatId=None, lastReadMessageIds=None):
        self.chatId = chatId
        self.lastReadMessageIds = lastReadMessageIds

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.chatId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.lastReadMessageIds = []
                    (_, elem118) = iprot.readListBegin()
                    for _ in range(elem118):
                        elem119 = LastReadMessageId()
                        elem119.read(iprot)
                        self.lastReadMessageIds.append(elem119)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('LastReadMessageIds')
        if self.chatId is not None:
            oprot.writeFieldBegin('chatId', TType.STRING, 1)
            oprot.writeString(self.chatId)
            oprot.writeFieldEnd()
        if self.lastReadMessageIds is not None:
            oprot.writeFieldBegin('lastReadMessageIds', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.lastReadMessageIds))
            for elem120 in self.lastReadMessageIds:
                elem120.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.chatId))
        value = (value * 31) ^ hash(make_hashable(self.lastReadMessageIds))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class VerificationSessionData(object):
    """
    Attributes:
     - sessionId
     - method
     - callback
     - normalizedPhone
     - countryCode
     - nationalSignificantNumber
     - availableVerificationMethods
    """
    def __init__(self, sessionId=None, method=None, callback=None, normalizedPhone=None, countryCode=None, nationalSignificantNumber=None, availableVerificationMethods=None):
        self.sessionId = sessionId
        self.method = method
        self.callback = callback
        self.normalizedPhone = normalizedPhone
        self.countryCode = countryCode
        self.nationalSignificantNumber = nationalSignificantNumber
        self.availableVerificationMethods = availableVerificationMethods

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sessionId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.method = VerificationMethod(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.callback = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.normalizedPhone = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.countryCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.nationalSignificantNumber = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.availableVerificationMethods = []
                    (_, elem121) = iprot.readListBegin()
                    for _ in range(elem121):
                        elem122 = VerificationMethod(iprot.readI32())
                        self.availableVerificationMethods.append(elem122)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('VerificationSessionData')
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.STRING, 1)
            oprot.writeString(self.sessionId)
            oprot.writeFieldEnd()
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.I32, 2)
            oprot.writeI32(self.method)
            oprot.writeFieldEnd()
        if self.callback is not None:
            oprot.writeFieldBegin('callback', TType.STRING, 3)
            oprot.writeString(self.callback)
            oprot.writeFieldEnd()
        if self.normalizedPhone is not None:
            oprot.writeFieldBegin('normalizedPhone', TType.STRING, 4)
            oprot.writeString(self.normalizedPhone)
            oprot.writeFieldEnd()
        if self.countryCode is not None:
            oprot.writeFieldBegin('countryCode', TType.STRING, 5)
            oprot.writeString(self.countryCode)
            oprot.writeFieldEnd()
        if self.nationalSignificantNumber is not None:
            oprot.writeFieldBegin('nationalSignificantNumber', TType.STRING, 6)
            oprot.writeString(self.nationalSignificantNumber)
            oprot.writeFieldEnd()
        if self.availableVerificationMethods is not None:
            oprot.writeFieldBegin('availableVerificationMethods', TType.LIST, 7)
            oprot.writeListBegin(TType.I32, len(self.availableVerificationMethods))
            for elem123 in self.availableVerificationMethods:
                oprot.writeI32(elem123)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.sessionId))
        value = (value * 31) ^ hash(make_hashable(self.method))
        value = (value * 31) ^ hash(make_hashable(self.callback))
        value = (value * 31) ^ hash(make_hashable(self.normalizedPhone))
        value = (value * 31) ^ hash(make_hashable(self.countryCode))
        value = (value * 31) ^ hash(make_hashable(self.nationalSignificantNumber))
        value = (value * 31) ^ hash(make_hashable(self.availableVerificationMethods))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class LoginResult(object):
    """
    Attributes:
     - authToken
     - certificate
     - verifier
     - pinCode
     - type
     - lastPrimaryBindTime
     - displayMessage
     - sessionForSMSConfirm
    """
    def __init__(self, authToken=None, certificate=None, verifier=None, pinCode=None, type=None, lastPrimaryBindTime=None, displayMessage=None, sessionForSMSConfirm=None):
        self.authToken = authToken
        self.certificate = certificate
        self.verifier = verifier
        self.pinCode = pinCode
        self.type = type
        self.lastPrimaryBindTime = lastPrimaryBindTime
        self.displayMessage = displayMessage
        self.sessionForSMSConfirm = sessionForSMSConfirm

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.certificate = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.verifier = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.pinCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.type = LoginResultType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.lastPrimaryBindTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.displayMessage = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.sessionForSMSConfirm = VerificationSessionData()
                    self.sessionForSMSConfirm.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('LoginResult')
        if self.authToken is not None:
            oprot.writeFieldBegin('authToken', TType.STRING, 1)
            oprot.writeString(self.authToken)
            oprot.writeFieldEnd()
        if self.certificate is not None:
            oprot.writeFieldBegin('certificate', TType.STRING, 2)
            oprot.writeString(self.certificate)
            oprot.writeFieldEnd()
        if self.verifier is not None:
            oprot.writeFieldBegin('verifier', TType.STRING, 3)
            oprot.writeString(self.verifier)
            oprot.writeFieldEnd()
        if self.pinCode is not None:
            oprot.writeFieldBegin('pinCode', TType.STRING, 4)
            oprot.writeString(self.pinCode)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 5)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.lastPrimaryBindTime is not None:
            oprot.writeFieldBegin('lastPrimaryBindTime', TType.I64, 6)
            oprot.writeI64(self.lastPrimaryBindTime)
            oprot.writeFieldEnd()
        if self.displayMessage is not None:
            oprot.writeFieldBegin('displayMessage', TType.STRING, 7)
            oprot.writeString(self.displayMessage)
            oprot.writeFieldEnd()
        if self.sessionForSMSConfirm is not None:
            oprot.writeFieldBegin('sessionForSMSConfirm', TType.STRUCT, 8)
            self.sessionForSMSConfirm.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.authToken))
        value = (value * 31) ^ hash(make_hashable(self.certificate))
        value = (value * 31) ^ hash(make_hashable(self.verifier))
        value = (value * 31) ^ hash(make_hashable(self.pinCode))
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.lastPrimaryBindTime))
        value = (value * 31) ^ hash(make_hashable(self.displayMessage))
        value = (value * 31) ^ hash(make_hashable(self.sessionForSMSConfirm))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class LoginRequest(object):
    """
    Attributes:
     - type
     - identityProvider
     - identifier
     - password
     - keepLoggedIn
     - accessLocation
     - systemName
     - certificate
     - verifier
     - secret
     - e2eeVersion
    """
    def __init__(self, type=None, identityProvider=None, identifier=None, password=None, keepLoggedIn=None, accessLocation=None, systemName=None, certificate=None, verifier=None, secret=None, e2eeVersion=None):
        self.type = type
        self.identityProvider = identityProvider
        self.identifier = identifier
        self.password = password
        self.keepLoggedIn = keepLoggedIn
        self.accessLocation = accessLocation
        self.systemName = systemName
        self.certificate = certificate
        self.verifier = verifier
        self.secret = secret
        self.e2eeVersion = e2eeVersion

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.identityProvider = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.identifier = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.password = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.keepLoggedIn = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.accessLocation = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.systemName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.certificate = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.verifier = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.secret = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.e2eeVersion = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('LoginRequest')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.identityProvider is not None:
            oprot.writeFieldBegin('identityProvider', TType.I32, 2)
            oprot.writeI32(self.identityProvider)
            oprot.writeFieldEnd()
        if self.identifier is not None:
            oprot.writeFieldBegin('identifier', TType.STRING, 3)
            oprot.writeString(self.identifier)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 4)
            oprot.writeString(self.password)
            oprot.writeFieldEnd()
        if self.keepLoggedIn is not None:
            oprot.writeFieldBegin('keepLoggedIn', TType.BOOL, 5)
            oprot.writeBool(self.keepLoggedIn)
            oprot.writeFieldEnd()
        if self.accessLocation is not None:
            oprot.writeFieldBegin('accessLocation', TType.STRING, 6)
            oprot.writeString(self.accessLocation)
            oprot.writeFieldEnd()
        if self.systemName is not None:
            oprot.writeFieldBegin('systemName', TType.STRING, 7)
            oprot.writeString(self.systemName)
            oprot.writeFieldEnd()
        if self.certificate is not None:
            oprot.writeFieldBegin('certificate', TType.STRING, 8)
            oprot.writeString(self.certificate)
            oprot.writeFieldEnd()
        if self.verifier is not None:
            oprot.writeFieldBegin('verifier', TType.STRING, 9)
            oprot.writeString(self.verifier)
            oprot.writeFieldEnd()
        if self.secret is not None:
            oprot.writeFieldBegin('secret', TType.STRING, 10)
            oprot.writeString(self.secret)
            oprot.writeFieldEnd()
        if self.e2eeVersion is not None:
            oprot.writeFieldBegin('e2eeVersion', TType.I32, 11)
            oprot.writeI32(self.e2eeVersion)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.identityProvider))
        value = (value * 31) ^ hash(make_hashable(self.identifier))
        value = (value * 31) ^ hash(make_hashable(self.password))
        value = (value * 31) ^ hash(make_hashable(self.keepLoggedIn))
        value = (value * 31) ^ hash(make_hashable(self.accessLocation))
        value = (value * 31) ^ hash(make_hashable(self.systemName))
        value = (value * 31) ^ hash(make_hashable(self.certificate))
        value = (value * 31) ^ hash(make_hashable(self.verifier))
        value = (value * 31) ^ hash(make_hashable(self.secret))
        value = (value * 31) ^ hash(make_hashable(self.e2eeVersion))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class LoginSession(object):
    """
    Attributes:
     - tokenKey
     - expirationTime
     - applicationType
     - systemName
     - accessLocation
    """
    def __init__(self, tokenKey=None, expirationTime=None, applicationType=None, systemName=None, accessLocation=None):
        self.tokenKey = tokenKey
        self.expirationTime = expirationTime
        self.applicationType = applicationType
        self.systemName = systemName
        self.accessLocation = accessLocation

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.tokenKey = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.expirationTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.applicationType = ApplicationType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.systemName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.accessLocation = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('LoginSession')
        if self.tokenKey is not None:
            oprot.writeFieldBegin('tokenKey', TType.STRING, 1)
            oprot.writeString(self.tokenKey)
            oprot.writeFieldEnd()
        if self.expirationTime is not None:
            oprot.writeFieldBegin('expirationTime', TType.I64, 3)
            oprot.writeI64(self.expirationTime)
            oprot.writeFieldEnd()
        if self.applicationType is not None:
            oprot.writeFieldBegin('applicationType', TType.I32, 11)
            oprot.writeI32(self.applicationType)
            oprot.writeFieldEnd()
        if self.systemName is not None:
            oprot.writeFieldBegin('systemName', TType.STRING, 12)
            oprot.writeString(self.systemName)
            oprot.writeFieldEnd()
        if self.accessLocation is not None:
            oprot.writeFieldBegin('accessLocation', TType.STRING, 22)
            oprot.writeString(self.accessLocation)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.tokenKey))
        value = (value * 31) ^ hash(make_hashable(self.expirationTime))
        value = (value * 31) ^ hash(make_hashable(self.applicationType))
        value = (value * 31) ^ hash(make_hashable(self.systemName))
        value = (value * 31) ^ hash(make_hashable(self.accessLocation))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Message(object):
    """
    Attributes:
     - _from
     - to
     - toType
     - id
     - createdTime
     - deliveredTime
     - text
     - location
     - hasContent
     - contentType
     - contentPreview
     - contentMetadata
     - sessionId
     - chunks
     - relatedMessageId
     - messageRelationType
     - readCount
     - relatedMessageServiceCode
    """
    def __init__(self, _from=None, to=None, toType=None, id=None, createdTime=None, deliveredTime=None, text=None, location=None, hasContent=None, contentType=None, contentPreview=None, contentMetadata=None, sessionId=None, chunks=None, relatedMessageId=None, messageRelationType=None, readCount=None, relatedMessageServiceCode=None):
        self._from = _from
        self.to = to
        self.toType = toType
        self.id = id
        self.createdTime = createdTime
        self.deliveredTime = deliveredTime
        self.text = text
        self.location = location
        self.hasContent = hasContent
        self.contentType = contentType
        self.contentPreview = contentPreview
        self.contentMetadata = contentMetadata
        self.sessionId = sessionId
        self.chunks = chunks
        self.relatedMessageId = relatedMessageId
        self.messageRelationType = messageRelationType
        self.readCount = readCount
        self.relatedMessageServiceCode = relatedMessageServiceCode

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self._from = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.to = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.toType = MIDType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.id = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.deliveredTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.text = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.location = Location()
                    self.location.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BOOL:
                    self.hasContent = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.contentType = ContentType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.contentPreview = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.MAP:
                    self.contentMetadata = {}
                    (_, _, elem124) = iprot.readMapBegin()
                    for _ in range(elem124):
                        elem126 = iprot.readString()
                        elem125 = iprot.readString()
                        self.contentMetadata[elem126] = elem125
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I64:
                    self.sessionId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.LIST:
                    self.chunks = []
                    (_, elem127) = iprot.readListBegin()
                    for _ in range(elem127):
                        elem128 = iprot.readBinary()
                        self.chunks.append(elem128)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.relatedMessageId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.messageRelationType = MessageRelationType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.I64:
                    self.readCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.I32:
                    self.relatedMessageServiceCode = ServiceCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Message')
        if self._from is not None:
            oprot.writeFieldBegin('_from', TType.STRING, 1)
            oprot.writeString(self._from)
            oprot.writeFieldEnd()
        if self.to is not None:
            oprot.writeFieldBegin('to', TType.STRING, 2)
            oprot.writeString(self.to)
            oprot.writeFieldEnd()
        if self.toType is not None:
            oprot.writeFieldBegin('toType', TType.I32, 3)
            oprot.writeI32(self.toType)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 4)
            oprot.writeString(self.id)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 5)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.deliveredTime is not None:
            oprot.writeFieldBegin('deliveredTime', TType.I64, 6)
            oprot.writeI64(self.deliveredTime)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 10)
            oprot.writeString(self.text)
            oprot.writeFieldEnd()
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRUCT, 11)
            self.location.write(oprot)
            oprot.writeFieldEnd()
        if self.hasContent is not None:
            oprot.writeFieldBegin('hasContent', TType.BOOL, 14)
            oprot.writeBool(self.hasContent)
            oprot.writeFieldEnd()
        if self.contentType is not None:
            oprot.writeFieldBegin('contentType', TType.I32, 15)
            oprot.writeI32(self.contentType)
            oprot.writeFieldEnd()
        if self.contentPreview is not None:
            oprot.writeFieldBegin('contentPreview', TType.STRING, 17)
            oprot.writeBinary(self.contentPreview)
            oprot.writeFieldEnd()
        if self.contentMetadata is not None:
            oprot.writeFieldBegin('contentMetadata', TType.MAP, 18)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.contentMetadata))
            for elem130, elem129 in self.contentMetadata.items():
                oprot.writeString(elem130)
                oprot.writeString(elem129)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.I64, 19)
            oprot.writeI64(self.sessionId)
            oprot.writeFieldEnd()
        if self.chunks is not None:
            oprot.writeFieldBegin('chunks', TType.LIST, 20)
            oprot.writeListBegin(TType.STRING, len(self.chunks))
            for elem131 in self.chunks:
                oprot.writeBinary(elem131)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.relatedMessageId is not None:
            oprot.writeFieldBegin('relatedMessageId', TType.STRING, 21)
            oprot.writeString(self.relatedMessageId)
            oprot.writeFieldEnd()
        if self.messageRelationType is not None:
            oprot.writeFieldBegin('messageRelationType', TType.I32, 22)
            oprot.writeI32(self.messageRelationType)
            oprot.writeFieldEnd()
        if self.readCount is not None:
            oprot.writeFieldBegin('readCount', TType.I64, 23)
            oprot.writeI64(self.readCount)
            oprot.writeFieldEnd()
        if self.relatedMessageServiceCode is not None:
            oprot.writeFieldBegin('relatedMessageServiceCode', TType.I32, 24)
            oprot.writeI32(self.relatedMessageServiceCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self._from))
        value = (value * 31) ^ hash(make_hashable(self.to))
        value = (value * 31) ^ hash(make_hashable(self.toType))
        value = (value * 31) ^ hash(make_hashable(self.id))
        value = (value * 31) ^ hash(make_hashable(self.createdTime))
        value = (value * 31) ^ hash(make_hashable(self.deliveredTime))
        value = (value * 31) ^ hash(make_hashable(self.text))
        value = (value * 31) ^ hash(make_hashable(self.location))
        value = (value * 31) ^ hash(make_hashable(self.hasContent))
        value = (value * 31) ^ hash(make_hashable(self.contentType))
        value = (value * 31) ^ hash(make_hashable(self.contentPreview))
        value = (value * 31) ^ hash(make_hashable(self.contentMetadata))
        value = (value * 31) ^ hash(make_hashable(self.sessionId))
        value = (value * 31) ^ hash(make_hashable(self.chunks))
        value = (value * 31) ^ hash(make_hashable(self.relatedMessageId))
        value = (value * 31) ^ hash(make_hashable(self.messageRelationType))
        value = (value * 31) ^ hash(make_hashable(self.readCount))
        value = (value * 31) ^ hash(make_hashable(self.relatedMessageServiceCode))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareMessage(object):
    """
    Attributes:
     - message
     - fromType
     - squareMessageRevision
    """
    def __init__(self, message=None, fromType=None, squareMessageRevision=None):
        self.message = message
        self.fromType = fromType
        self.squareMessageRevision = squareMessageRevision

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.message = Message()
                    self.message.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.fromType = MIDType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.squareMessageRevision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareMessage')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRUCT, 1)
            self.message.write(oprot)
            oprot.writeFieldEnd()
        if self.fromType is not None:
            oprot.writeFieldBegin('fromType', TType.I32, 3)
            oprot.writeI32(self.fromType)
            oprot.writeFieldEnd()
        if self.squareMessageRevision is not None:
            oprot.writeFieldBegin('squareMessageRevision', TType.I64, 4)
            oprot.writeI64(self.squareMessageRevision)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.message))
        value = (value * 31) ^ hash(make_hashable(self.fromType))
        value = (value * 31) ^ hash(make_hashable(self.squareMessageRevision))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareChatStatusWithoutMessage(object):
    """
    Attributes:
     - memberCount
     - unreadMessageCount
    """
    def __init__(self, memberCount=None, unreadMessageCount=None):
        self.memberCount = memberCount
        self.unreadMessageCount = unreadMessageCount

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.memberCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.unreadMessageCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareChatStatusWithoutMessage')
        if self.memberCount is not None:
            oprot.writeFieldBegin('memberCount', TType.I32, 1)
            oprot.writeI32(self.memberCount)
            oprot.writeFieldEnd()
        if self.unreadMessageCount is not None:
            oprot.writeFieldBegin('unreadMessageCount', TType.I32, 2)
            oprot.writeI32(self.unreadMessageCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.memberCount))
        value = (value * 31) ^ hash(make_hashable(self.unreadMessageCount))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareChatStatus(object):
    """
    Attributes:
     - lastMessage
     - senderDisplayName
     - otherStatus
    """
    def __init__(self, lastMessage=None, senderDisplayName=None, otherStatus=None):
        self.lastMessage = lastMessage
        self.senderDisplayName = senderDisplayName
        self.otherStatus = otherStatus

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 3:
                if ftype == TType.STRUCT:
                    self.lastMessage = SquareMessage()
                    self.lastMessage.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.senderDisplayName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.otherStatus = SquareChatStatusWithoutMessage()
                    self.otherStatus.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareChatStatus')
        if self.lastMessage is not None:
            oprot.writeFieldBegin('lastMessage', TType.STRUCT, 3)
            self.lastMessage.write(oprot)
            oprot.writeFieldEnd()
        if self.senderDisplayName is not None:
            oprot.writeFieldBegin('senderDisplayName', TType.STRING, 4)
            oprot.writeString(self.senderDisplayName)
            oprot.writeFieldEnd()
        if self.otherStatus is not None:
            oprot.writeFieldBegin('otherStatus', TType.STRUCT, 5)
            self.otherStatus.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.lastMessage))
        value = (value * 31) ^ hash(make_hashable(self.senderDisplayName))
        value = (value * 31) ^ hash(make_hashable(self.otherStatus))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareChatMember(object):
    """
    Attributes:
     - squareMemberMid
     - squareChatMid
     - revision
     - membershipState
     - notificationForMessage
    """
    def __init__(self, squareMemberMid=None, squareChatMid=None, revision=None, membershipState=None, notificationForMessage=None):
        self.squareMemberMid = squareMemberMid
        self.squareChatMid = squareChatMid
        self.revision = revision
        self.membershipState = membershipState
        self.notificationForMessage = notificationForMessage

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareMemberMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.membershipState = SquareChatMembershipState(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.notificationForMessage = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareChatMember')
        if self.squareMemberMid is not None:
            oprot.writeFieldBegin('squareMemberMid', TType.STRING, 1)
            oprot.writeString(self.squareMemberMid)
            oprot.writeFieldEnd()
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 2)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 3)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        if self.membershipState is not None:
            oprot.writeFieldBegin('membershipState', TType.I32, 4)
            oprot.writeI32(self.membershipState)
            oprot.writeFieldEnd()
        if self.notificationForMessage is not None:
            oprot.writeFieldBegin('notificationForMessage', TType.BOOL, 5)
            oprot.writeBool(self.notificationForMessage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMemberMid))
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.revision))
        value = (value * 31) ^ hash(make_hashable(self.membershipState))
        value = (value * 31) ^ hash(make_hashable(self.notificationForMessage))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class MessageOperation(object):
    """
    Attributes:
     - revision
     - createdTime
     - type
     - reqSeq
     - status
     - param1
     - param2
     - param3
     - message
    """
    def __init__(self, revision=None, createdTime=None, type=None, reqSeq=None, status=None, param1=None, param2=None, param3=None, message=None):
        self.revision = revision
        self.createdTime = createdTime
        self.type = type
        self.reqSeq = reqSeq
        self.status = status
        self.param1 = param1
        self.param2 = param2
        self.param3 = param3
        self.message = message

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = MessageOperationType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.status = OpStatus(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.param1 = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.param2 = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.param3 = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRUCT:
                    self.message = Message()
                    self.message.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('MessageOperation')
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 1)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 2)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 4)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 5)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.param1 is not None:
            oprot.writeFieldBegin('param1', TType.STRING, 10)
            oprot.writeString(self.param1)
            oprot.writeFieldEnd()
        if self.param2 is not None:
            oprot.writeFieldBegin('param2', TType.STRING, 11)
            oprot.writeString(self.param2)
            oprot.writeFieldEnd()
        if self.param3 is not None:
            oprot.writeFieldBegin('param3', TType.STRING, 12)
            oprot.writeString(self.param3)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRUCT, 20)
            self.message.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.revision))
        value = (value * 31) ^ hash(make_hashable(self.createdTime))
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.reqSeq))
        value = (value * 31) ^ hash(make_hashable(self.status))
        value = (value * 31) ^ hash(make_hashable(self.param1))
        value = (value * 31) ^ hash(make_hashable(self.param2))
        value = (value * 31) ^ hash(make_hashable(self.param3))
        value = (value * 31) ^ hash(make_hashable(self.message))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class MessageOperations(object):
    """
    Attributes:
     - operations
     - endFlag
    """
    def __init__(self, operations=None, endFlag=None):
        self.operations = operations
        self.endFlag = endFlag

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.operations = []
                    (_, elem132) = iprot.readListBegin()
                    for _ in range(elem132):
                        elem133 = MessageOperation()
                        elem133.read(iprot)
                        self.operations.append(elem133)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.endFlag = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('MessageOperations')
        if self.operations is not None:
            oprot.writeFieldBegin('operations', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.operations))
            for elem134 in self.operations:
                elem134.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.endFlag is not None:
            oprot.writeFieldBegin('endFlag', TType.BOOL, 2)
            oprot.writeBool(self.endFlag)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.operations))
        value = (value * 31) ^ hash(make_hashable(self.endFlag))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class MessageStoreResult(object):
    """
    Attributes:
     - requestId
     - messageIds
    """
    def __init__(self, requestId=None, messageIds=None):
        self.requestId = requestId
        self.messageIds = messageIds

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.messageIds = []
                    (_, elem135) = iprot.readListBegin()
                    for _ in range(elem135):
                        elem136 = iprot.readString()
                        self.messageIds.append(elem136)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('MessageStoreResult')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.messageIds is not None:
            oprot.writeFieldBegin('messageIds', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.messageIds))
            for elem137 in self.messageIds:
                oprot.writeString(elem137)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.messageIds))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class MetaProfile(object):
    """
    Attributes:
     - createTime
     - regionCode
     - identities
    """
    def __init__(self, createTime=None, regionCode=None, identities=None):
        self.createTime = createTime
        self.regionCode = regionCode
        self.identities = identities

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.createTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.regionCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.identities = {}
                    (_, _, elem138) = iprot.readMapBegin()
                    for _ in range(elem138):
                        elem140 = RegistrationType(iprot.readI32())
                        elem139 = iprot.readString()
                        self.identities[elem140] = elem139
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('MetaProfile')
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.I64, 1)
            oprot.writeI64(self.createTime)
            oprot.writeFieldEnd()
        if self.regionCode is not None:
            oprot.writeFieldBegin('regionCode', TType.STRING, 2)
            oprot.writeString(self.regionCode)
            oprot.writeFieldEnd()
        if self.identities is not None:
            oprot.writeFieldBegin('identities', TType.MAP, 3)
            oprot.writeMapBegin(TType.I32, TType.STRING, len(self.identities))
            for elem142, elem141 in self.identities.items():
                oprot.writeI32(elem142)
                oprot.writeString(elem141)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.createTime))
        value = (value * 31) ^ hash(make_hashable(self.regionCode))
        value = (value * 31) ^ hash(make_hashable(self.identities))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class NotificationItem(object):
    """
    Attributes:
     - id
     - _from
     - to
     - fromChannel
     - toChannel
     - revision
     - createdTime
     - content
    """
    def __init__(self, id=None, _from=None, to=None, fromChannel=None, toChannel=None, revision=None, createdTime=None, content=None):
        self.id = id
        self._from = _from
        self.to = to
        self.fromChannel = fromChannel
        self.toChannel = toChannel
        self.revision = revision
        self.createdTime = createdTime
        self.content = content

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self._from = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.to = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.fromChannel = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.toChannel = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.MAP:
                    self.content = {}
                    (_, _, elem143) = iprot.readMapBegin()
                    for _ in range(elem143):
                        elem145 = iprot.readString()
                        elem144 = iprot.readString()
                        self.content[elem145] = elem144
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('NotificationItem')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id)
            oprot.writeFieldEnd()
        if self._from is not None:
            oprot.writeFieldBegin('_from', TType.STRING, 2)
            oprot.writeString(self._from)
            oprot.writeFieldEnd()
        if self.to is not None:
            oprot.writeFieldBegin('to', TType.STRING, 3)
            oprot.writeString(self.to)
            oprot.writeFieldEnd()
        if self.fromChannel is not None:
            oprot.writeFieldBegin('fromChannel', TType.STRING, 4)
            oprot.writeString(self.fromChannel)
            oprot.writeFieldEnd()
        if self.toChannel is not None:
            oprot.writeFieldBegin('toChannel', TType.STRING, 5)
            oprot.writeString(self.toChannel)
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 7)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 8)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.content is not None:
            oprot.writeFieldBegin('content', TType.MAP, 9)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.content))
            for elem147, elem146 in self.content.items():
                oprot.writeString(elem147)
                oprot.writeString(elem146)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.id))
        value = (value * 31) ^ hash(make_hashable(self._from))
        value = (value * 31) ^ hash(make_hashable(self.to))
        value = (value * 31) ^ hash(make_hashable(self.fromChannel))
        value = (value * 31) ^ hash(make_hashable(self.toChannel))
        value = (value * 31) ^ hash(make_hashable(self.revision))
        value = (value * 31) ^ hash(make_hashable(self.createdTime))
        value = (value * 31) ^ hash(make_hashable(self.content))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class NotificationFetchResult(object):
    """
    Attributes:
     - fetchMode
     - itemList
    """
    def __init__(self, fetchMode=None, itemList=None):
        self.fetchMode = fetchMode
        self.itemList = itemList

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.fetchMode = NotificationItemFetchMode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.itemList = []
                    (_, elem148) = iprot.readListBegin()
                    for _ in range(elem148):
                        elem149 = NotificationItem()
                        elem149.read(iprot)
                        self.itemList.append(elem149)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('NotificationFetchResult')
        if self.fetchMode is not None:
            oprot.writeFieldBegin('fetchMode', TType.I32, 1)
            oprot.writeI32(self.fetchMode)
            oprot.writeFieldEnd()
        if self.itemList is not None:
            oprot.writeFieldBegin('itemList', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.itemList))
            for elem150 in self.itemList:
                elem150.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.fetchMode))
        value = (value * 31) ^ hash(make_hashable(self.itemList))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Operation(object):
    """
    Attributes:
     - revision
     - createdTime
     - type
     - reqSeq
     - checksum
     - status
     - param1
     - param2
     - param3
     - message
    """
    def __init__(self, revision=None, createdTime=None, type=None, reqSeq=None, checksum=None, status=None, param1=None, param2=None, param3=None, message=None):
        self.revision = revision
        self.createdTime = createdTime
        self.type = type
        self.reqSeq = reqSeq
        self.checksum = checksum
        self.status = status
        self.param1 = param1
        self.param2 = param2
        self.param3 = param3
        self.message = message

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = OpType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.checksum = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.status = OpStatus(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.param1 = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.param2 = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.param3 = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRUCT:
                    self.message = Message()
                    self.message.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Operation')
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 1)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 2)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 4)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.checksum is not None:
            oprot.writeFieldBegin('checksum', TType.STRING, 5)
            oprot.writeString(self.checksum)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 7)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.param1 is not None:
            oprot.writeFieldBegin('param1', TType.STRING, 10)
            oprot.writeString(self.param1)
            oprot.writeFieldEnd()
        if self.param2 is not None:
            oprot.writeFieldBegin('param2', TType.STRING, 11)
            oprot.writeString(self.param2)
            oprot.writeFieldEnd()
        if self.param3 is not None:
            oprot.writeFieldBegin('param3', TType.STRING, 12)
            oprot.writeString(self.param3)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRUCT, 20)
            self.message.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.revision))
        value = (value * 31) ^ hash(make_hashable(self.createdTime))
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.reqSeq))
        value = (value * 31) ^ hash(make_hashable(self.checksum))
        value = (value * 31) ^ hash(make_hashable(self.status))
        value = (value * 31) ^ hash(make_hashable(self.param1))
        value = (value * 31) ^ hash(make_hashable(self.param2))
        value = (value * 31) ^ hash(make_hashable(self.param3))
        value = (value * 31) ^ hash(make_hashable(self.message))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PaymentReservation(object):
    """
    Attributes:
     - receiverMid
     - productId
     - language
     - location
     - currency
     - price
     - appStoreCode
     - messageText
     - messageTemplate
     - packageId
    """
    def __init__(self, receiverMid=None, productId=None, language=None, location=None, currency=None, price=None, appStoreCode=None, messageText=None, messageTemplate=None, packageId=None):
        self.receiverMid = receiverMid
        self.productId = productId
        self.language = language
        self.location = location
        self.currency = currency
        self.price = price
        self.appStoreCode = appStoreCode
        self.messageText = messageText
        self.messageTemplate = messageTemplate
        self.packageId = packageId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.receiverMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.productId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.language = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.location = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.currency = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.price = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.appStoreCode = PaymentType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.messageText = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.messageTemplate = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.packageId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PaymentReservation')
        if self.receiverMid is not None:
            oprot.writeFieldBegin('receiverMid', TType.STRING, 1)
            oprot.writeString(self.receiverMid)
            oprot.writeFieldEnd()
        if self.productId is not None:
            oprot.writeFieldBegin('productId', TType.STRING, 2)
            oprot.writeString(self.productId)
            oprot.writeFieldEnd()
        if self.language is not None:
            oprot.writeFieldBegin('language', TType.STRING, 3)
            oprot.writeString(self.language)
            oprot.writeFieldEnd()
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRING, 4)
            oprot.writeString(self.location)
            oprot.writeFieldEnd()
        if self.currency is not None:
            oprot.writeFieldBegin('currency', TType.STRING, 5)
            oprot.writeString(self.currency)
            oprot.writeFieldEnd()
        if self.price is not None:
            oprot.writeFieldBegin('price', TType.STRING, 6)
            oprot.writeString(self.price)
            oprot.writeFieldEnd()
        if self.appStoreCode is not None:
            oprot.writeFieldBegin('appStoreCode', TType.I32, 7)
            oprot.writeI32(self.appStoreCode)
            oprot.writeFieldEnd()
        if self.messageText is not None:
            oprot.writeFieldBegin('messageText', TType.STRING, 8)
            oprot.writeString(self.messageText)
            oprot.writeFieldEnd()
        if self.messageTemplate is not None:
            oprot.writeFieldBegin('messageTemplate', TType.I32, 9)
            oprot.writeI32(self.messageTemplate)
            oprot.writeFieldEnd()
        if self.packageId is not None:
            oprot.writeFieldBegin('packageId', TType.I64, 10)
            oprot.writeI64(self.packageId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.receiverMid))
        value = (value * 31) ^ hash(make_hashable(self.productId))
        value = (value * 31) ^ hash(make_hashable(self.language))
        value = (value * 31) ^ hash(make_hashable(self.location))
        value = (value * 31) ^ hash(make_hashable(self.currency))
        value = (value * 31) ^ hash(make_hashable(self.price))
        value = (value * 31) ^ hash(make_hashable(self.appStoreCode))
        value = (value * 31) ^ hash(make_hashable(self.messageText))
        value = (value * 31) ^ hash(make_hashable(self.messageTemplate))
        value = (value * 31) ^ hash(make_hashable(self.packageId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PaymentReservationResult(object):
    """
    Attributes:
     - orderId
     - confirmUrl
     - extras
    """
    def __init__(self, orderId=None, confirmUrl=None, extras=None):
        self.orderId = orderId
        self.confirmUrl = confirmUrl
        self.extras = extras

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.orderId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.confirmUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.extras = {}
                    (_, _, elem151) = iprot.readMapBegin()
                    for _ in range(elem151):
                        elem153 = iprot.readString()
                        elem152 = iprot.readString()
                        self.extras[elem153] = elem152
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PaymentReservationResult')
        if self.orderId is not None:
            oprot.writeFieldBegin('orderId', TType.STRING, 1)
            oprot.writeString(self.orderId)
            oprot.writeFieldEnd()
        if self.confirmUrl is not None:
            oprot.writeFieldBegin('confirmUrl', TType.STRING, 2)
            oprot.writeString(self.confirmUrl)
            oprot.writeFieldEnd()
        if self.extras is not None:
            oprot.writeFieldBegin('extras', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.extras))
            for elem155, elem154 in self.extras.items():
                oprot.writeString(elem155)
                oprot.writeString(elem154)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.orderId))
        value = (value * 31) ^ hash(make_hashable(self.confirmUrl))
        value = (value * 31) ^ hash(make_hashable(self.extras))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Product(object):
    """
    Attributes:
     - productId
     - packageId
     - version
     - authorName
     - onSale
     - validDays
     - saleType
     - copyright
     - title
     - descriptionText
     - shopOrderId
     - fromMid
     - toMid
     - validUntil
     - priceTier
     - price
     - currency
     - currencySymbol
     - paymentType
     - createDate
     - ownFlag
     - eventType
     - urlSchema
     - downloadUrl
     - buddyMid
     - publishSince
     - newFlag
     - missionFlag
     - categories
     - missionButtonText
     - missionShortDescription
     - authorId
     - grantedByDefault
     - displayOrder
     - availableForPresent
     - availableForMyself
     - hasAnimation
     - hasSound
     - recommendationsEnabled
     - stickerResourceType
    """
    def __init__(self, productId=None, packageId=None, version=None, authorName=None, onSale=None, validDays=None, saleType=None, copyright=None, title=None, descriptionText=None, shopOrderId=None, fromMid=None, toMid=None, validUntil=None, priceTier=None, price=None, currency=None, currencySymbol=None, paymentType=None, createDate=None, ownFlag=None, eventType=None, urlSchema=None, downloadUrl=None, buddyMid=None, publishSince=None, newFlag=None, missionFlag=None, categories=None, missionButtonText=None, missionShortDescription=None, authorId=None, grantedByDefault=None, displayOrder=None, availableForPresent=None, availableForMyself=None, hasAnimation=None, hasSound=None, recommendationsEnabled=None, stickerResourceType=None):
        self.productId = productId
        self.packageId = packageId
        self.version = version
        self.authorName = authorName
        self.onSale = onSale
        self.validDays = validDays
        self.saleType = saleType
        self.copyright = copyright
        self.title = title
        self.descriptionText = descriptionText
        self.shopOrderId = shopOrderId
        self.fromMid = fromMid
        self.toMid = toMid
        self.validUntil = validUntil
        self.priceTier = priceTier
        self.price = price
        self.currency = currency
        self.currencySymbol = currencySymbol
        self.paymentType = paymentType
        self.createDate = createDate
        self.ownFlag = ownFlag
        self.eventType = eventType
        self.urlSchema = urlSchema
        self.downloadUrl = downloadUrl
        self.buddyMid = buddyMid
        self.publishSince = publishSince
        self.newFlag = newFlag
        self.missionFlag = missionFlag
        self.categories = categories
        self.missionButtonText = missionButtonText
        self.missionShortDescription = missionShortDescription
        self.authorId = authorId
        self.grantedByDefault = grantedByDefault
        self.displayOrder = displayOrder
        self.availableForPresent = availableForPresent
        self.availableForMyself = availableForMyself
        self.hasAnimation = hasAnimation
        self.hasSound = hasSound
        self.recommendationsEnabled = recommendationsEnabled
        self.stickerResourceType = stickerResourceType

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.productId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.packageId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.authorName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.onSale = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.validDays = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.saleType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.copyright = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.title = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.descriptionText = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.shopOrderId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.fromMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.toMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I64:
                    self.validUntil = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.priceTier = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.price = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.currency = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.currencySymbol = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I32:
                    self.paymentType = PaymentType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I64:
                    self.createDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.BOOL:
                    self.ownFlag = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.eventType = ProductEventType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.urlSchema = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRING:
                    self.downloadUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRING:
                    self.buddyMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.I64:
                    self.publishSince = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.BOOL:
                    self.newFlag = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.BOOL:
                    self.missionFlag = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.LIST:
                    self.categories = []
                    (_, elem156) = iprot.readListBegin()
                    for _ in range(elem156):
                        elem157 = ProductCategory()
                        elem157.read(iprot)
                        self.categories.append(elem157)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRING:
                    self.missionButtonText = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.STRING:
                    self.missionShortDescription = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.STRING:
                    self.authorId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.BOOL:
                    self.grantedByDefault = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.I32:
                    self.displayOrder = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.BOOL:
                    self.availableForPresent = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 44:
                if ftype == TType.BOOL:
                    self.availableForMyself = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 51:
                if ftype == TType.BOOL:
                    self.hasAnimation = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 52:
                if ftype == TType.BOOL:
                    self.hasSound = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 53:
                if ftype == TType.BOOL:
                    self.recommendationsEnabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 54:
                if ftype == TType.I32:
                    self.stickerResourceType = StickerResourceType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Product')
        if self.productId is not None:
            oprot.writeFieldBegin('productId', TType.STRING, 1)
            oprot.writeString(self.productId)
            oprot.writeFieldEnd()
        if self.packageId is not None:
            oprot.writeFieldBegin('packageId', TType.I64, 2)
            oprot.writeI64(self.packageId)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.I32, 3)
            oprot.writeI32(self.version)
            oprot.writeFieldEnd()
        if self.authorName is not None:
            oprot.writeFieldBegin('authorName', TType.STRING, 4)
            oprot.writeString(self.authorName)
            oprot.writeFieldEnd()
        if self.onSale is not None:
            oprot.writeFieldBegin('onSale', TType.BOOL, 5)
            oprot.writeBool(self.onSale)
            oprot.writeFieldEnd()
        if self.validDays is not None:
            oprot.writeFieldBegin('validDays', TType.I32, 6)
            oprot.writeI32(self.validDays)
            oprot.writeFieldEnd()
        if self.saleType is not None:
            oprot.writeFieldBegin('saleType', TType.I32, 7)
            oprot.writeI32(self.saleType)
            oprot.writeFieldEnd()
        if self.copyright is not None:
            oprot.writeFieldBegin('copyright', TType.STRING, 8)
            oprot.writeString(self.copyright)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 9)
            oprot.writeString(self.title)
            oprot.writeFieldEnd()
        if self.descriptionText is not None:
            oprot.writeFieldBegin('descriptionText', TType.STRING, 10)
            oprot.writeString(self.descriptionText)
            oprot.writeFieldEnd()
        if self.shopOrderId is not None:
            oprot.writeFieldBegin('shopOrderId', TType.I64, 11)
            oprot.writeI64(self.shopOrderId)
            oprot.writeFieldEnd()
        if self.fromMid is not None:
            oprot.writeFieldBegin('fromMid', TType.STRING, 12)
            oprot.writeString(self.fromMid)
            oprot.writeFieldEnd()
        if self.toMid is not None:
            oprot.writeFieldBegin('toMid', TType.STRING, 13)
            oprot.writeString(self.toMid)
            oprot.writeFieldEnd()
        if self.validUntil is not None:
            oprot.writeFieldBegin('validUntil', TType.I64, 14)
            oprot.writeI64(self.validUntil)
            oprot.writeFieldEnd()
        if self.priceTier is not None:
            oprot.writeFieldBegin('priceTier', TType.I32, 15)
            oprot.writeI32(self.priceTier)
            oprot.writeFieldEnd()
        if self.price is not None:
            oprot.writeFieldBegin('price', TType.STRING, 16)
            oprot.writeString(self.price)
            oprot.writeFieldEnd()
        if self.currency is not None:
            oprot.writeFieldBegin('currency', TType.STRING, 17)
            oprot.writeString(self.currency)
            oprot.writeFieldEnd()
        if self.currencySymbol is not None:
            oprot.writeFieldBegin('currencySymbol', TType.STRING, 18)
            oprot.writeString(self.currencySymbol)
            oprot.writeFieldEnd()
        if self.paymentType is not None:
            oprot.writeFieldBegin('paymentType', TType.I32, 19)
            oprot.writeI32(self.paymentType)
            oprot.writeFieldEnd()
        if self.createDate is not None:
            oprot.writeFieldBegin('createDate', TType.I64, 20)
            oprot.writeI64(self.createDate)
            oprot.writeFieldEnd()
        if self.ownFlag is not None:
            oprot.writeFieldBegin('ownFlag', TType.BOOL, 21)
            oprot.writeBool(self.ownFlag)
            oprot.writeFieldEnd()
        if self.eventType is not None:
            oprot.writeFieldBegin('eventType', TType.I32, 22)
            oprot.writeI32(self.eventType)
            oprot.writeFieldEnd()
        if self.urlSchema is not None:
            oprot.writeFieldBegin('urlSchema', TType.STRING, 23)
            oprot.writeString(self.urlSchema)
            oprot.writeFieldEnd()
        if self.downloadUrl is not None:
            oprot.writeFieldBegin('downloadUrl', TType.STRING, 24)
            oprot.writeString(self.downloadUrl)
            oprot.writeFieldEnd()
        if self.buddyMid is not None:
            oprot.writeFieldBegin('buddyMid', TType.STRING, 25)
            oprot.writeString(self.buddyMid)
            oprot.writeFieldEnd()
        if self.publishSince is not None:
            oprot.writeFieldBegin('publishSince', TType.I64, 26)
            oprot.writeI64(self.publishSince)
            oprot.writeFieldEnd()
        if self.newFlag is not None:
            oprot.writeFieldBegin('newFlag', TType.BOOL, 27)
            oprot.writeBool(self.newFlag)
            oprot.writeFieldEnd()
        if self.missionFlag is not None:
            oprot.writeFieldBegin('missionFlag', TType.BOOL, 28)
            oprot.writeBool(self.missionFlag)
            oprot.writeFieldEnd()
        if self.categories is not None:
            oprot.writeFieldBegin('categories', TType.LIST, 29)
            oprot.writeListBegin(TType.STRUCT, len(self.categories))
            for elem158 in self.categories:
                elem158.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.missionButtonText is not None:
            oprot.writeFieldBegin('missionButtonText', TType.STRING, 30)
            oprot.writeString(self.missionButtonText)
            oprot.writeFieldEnd()
        if self.missionShortDescription is not None:
            oprot.writeFieldBegin('missionShortDescription', TType.STRING, 31)
            oprot.writeString(self.missionShortDescription)
            oprot.writeFieldEnd()
        if self.authorId is not None:
            oprot.writeFieldBegin('authorId', TType.STRING, 32)
            oprot.writeString(self.authorId)
            oprot.writeFieldEnd()
        if self.grantedByDefault is not None:
            oprot.writeFieldBegin('grantedByDefault', TType.BOOL, 41)
            oprot.writeBool(self.grantedByDefault)
            oprot.writeFieldEnd()
        if self.displayOrder is not None:
            oprot.writeFieldBegin('displayOrder', TType.I32, 42)
            oprot.writeI32(self.displayOrder)
            oprot.writeFieldEnd()
        if self.availableForPresent is not None:
            oprot.writeFieldBegin('availableForPresent', TType.BOOL, 43)
            oprot.writeBool(self.availableForPresent)
            oprot.writeFieldEnd()
        if self.availableForMyself is not None:
            oprot.writeFieldBegin('availableForMyself', TType.BOOL, 44)
            oprot.writeBool(self.availableForMyself)
            oprot.writeFieldEnd()
        if self.hasAnimation is not None:
            oprot.writeFieldBegin('hasAnimation', TType.BOOL, 51)
            oprot.writeBool(self.hasAnimation)
            oprot.writeFieldEnd()
        if self.hasSound is not None:
            oprot.writeFieldBegin('hasSound', TType.BOOL, 52)
            oprot.writeBool(self.hasSound)
            oprot.writeFieldEnd()
        if self.recommendationsEnabled is not None:
            oprot.writeFieldBegin('recommendationsEnabled', TType.BOOL, 53)
            oprot.writeBool(self.recommendationsEnabled)
            oprot.writeFieldEnd()
        if self.stickerResourceType is not None:
            oprot.writeFieldBegin('stickerResourceType', TType.I32, 54)
            oprot.writeI32(self.stickerResourceType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.productId))
        value = (value * 31) ^ hash(make_hashable(self.packageId))
        value = (value * 31) ^ hash(make_hashable(self.version))
        value = (value * 31) ^ hash(make_hashable(self.authorName))
        value = (value * 31) ^ hash(make_hashable(self.onSale))
        value = (value * 31) ^ hash(make_hashable(self.validDays))
        value = (value * 31) ^ hash(make_hashable(self.saleType))
        value = (value * 31) ^ hash(make_hashable(self.copyright))
        value = (value * 31) ^ hash(make_hashable(self.title))
        value = (value * 31) ^ hash(make_hashable(self.descriptionText))
        value = (value * 31) ^ hash(make_hashable(self.shopOrderId))
        value = (value * 31) ^ hash(make_hashable(self.fromMid))
        value = (value * 31) ^ hash(make_hashable(self.toMid))
        value = (value * 31) ^ hash(make_hashable(self.validUntil))
        value = (value * 31) ^ hash(make_hashable(self.priceTier))
        value = (value * 31) ^ hash(make_hashable(self.price))
        value = (value * 31) ^ hash(make_hashable(self.currency))
        value = (value * 31) ^ hash(make_hashable(self.currencySymbol))
        value = (value * 31) ^ hash(make_hashable(self.paymentType))
        value = (value * 31) ^ hash(make_hashable(self.createDate))
        value = (value * 31) ^ hash(make_hashable(self.ownFlag))
        value = (value * 31) ^ hash(make_hashable(self.eventType))
        value = (value * 31) ^ hash(make_hashable(self.urlSchema))
        value = (value * 31) ^ hash(make_hashable(self.downloadUrl))
        value = (value * 31) ^ hash(make_hashable(self.buddyMid))
        value = (value * 31) ^ hash(make_hashable(self.publishSince))
        value = (value * 31) ^ hash(make_hashable(self.newFlag))
        value = (value * 31) ^ hash(make_hashable(self.missionFlag))
        value = (value * 31) ^ hash(make_hashable(self.categories))
        value = (value * 31) ^ hash(make_hashable(self.missionButtonText))
        value = (value * 31) ^ hash(make_hashable(self.missionShortDescription))
        value = (value * 31) ^ hash(make_hashable(self.authorId))
        value = (value * 31) ^ hash(make_hashable(self.grantedByDefault))
        value = (value * 31) ^ hash(make_hashable(self.displayOrder))
        value = (value * 31) ^ hash(make_hashable(self.availableForPresent))
        value = (value * 31) ^ hash(make_hashable(self.availableForMyself))
        value = (value * 31) ^ hash(make_hashable(self.hasAnimation))
        value = (value * 31) ^ hash(make_hashable(self.hasSound))
        value = (value * 31) ^ hash(make_hashable(self.recommendationsEnabled))
        value = (value * 31) ^ hash(make_hashable(self.stickerResourceType))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ProductList(object):
    """
    Attributes:
     - hasNext
     - bannerSequence
     - bannerTargetType
     - bannerTargetPath
     - productList
     - bannerLang
    """
    def __init__(self, hasNext=None, bannerSequence=None, bannerTargetType=None, bannerTargetPath=None, productList=None, bannerLang=None):
        self.hasNext = hasNext
        self.bannerSequence = bannerSequence
        self.bannerTargetType = bannerTargetType
        self.bannerTargetPath = bannerTargetPath
        self.productList = productList
        self.bannerLang = bannerLang

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.hasNext = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.bannerSequence = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.bannerTargetType = ProductBannerLinkType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.bannerTargetPath = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.productList = []
                    (_, elem159) = iprot.readListBegin()
                    for _ in range(elem159):
                        elem160 = Product()
                        elem160.read(iprot)
                        self.productList.append(elem160)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.bannerLang = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ProductList')
        if self.hasNext is not None:
            oprot.writeFieldBegin('hasNext', TType.BOOL, 1)
            oprot.writeBool(self.hasNext)
            oprot.writeFieldEnd()
        if self.bannerSequence is not None:
            oprot.writeFieldBegin('bannerSequence', TType.I64, 4)
            oprot.writeI64(self.bannerSequence)
            oprot.writeFieldEnd()
        if self.bannerTargetType is not None:
            oprot.writeFieldBegin('bannerTargetType', TType.I32, 5)
            oprot.writeI32(self.bannerTargetType)
            oprot.writeFieldEnd()
        if self.bannerTargetPath is not None:
            oprot.writeFieldBegin('bannerTargetPath', TType.STRING, 6)
            oprot.writeString(self.bannerTargetPath)
            oprot.writeFieldEnd()
        if self.productList is not None:
            oprot.writeFieldBegin('productList', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.productList))
            for elem161 in self.productList:
                elem161.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bannerLang is not None:
            oprot.writeFieldBegin('bannerLang', TType.STRING, 8)
            oprot.writeString(self.bannerLang)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.hasNext))
        value = (value * 31) ^ hash(make_hashable(self.bannerSequence))
        value = (value * 31) ^ hash(make_hashable(self.bannerTargetType))
        value = (value * 31) ^ hash(make_hashable(self.bannerTargetPath))
        value = (value * 31) ^ hash(make_hashable(self.productList))
        value = (value * 31) ^ hash(make_hashable(self.bannerLang))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class StickerIdRange(object):
    """
    Attributes:
     - start
     - size
    """
    def __init__(self, start=None, size=None):
        self.start = start
        self.size = size

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.start = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('StickerIdRange')
        if self.start is not None:
            oprot.writeFieldBegin('start', TType.I64, 1)
            oprot.writeI64(self.start)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I32, 2)
            oprot.writeI32(self.size)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.start))
        value = (value * 31) ^ hash(make_hashable(self.size))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ProductSimple(object):
    """
    Attributes:
     - productId
     - packageId
     - version
     - onSale
     - validUntil
     - stickerIdRanges
     - grantedByDefault
     - displayOrder
    """
    def __init__(self, productId=None, packageId=None, version=None, onSale=None, validUntil=None, stickerIdRanges=None, grantedByDefault=None, displayOrder=None):
        self.productId = productId
        self.packageId = packageId
        self.version = version
        self.onSale = onSale
        self.validUntil = validUntil
        self.stickerIdRanges = stickerIdRanges
        self.grantedByDefault = grantedByDefault
        self.displayOrder = displayOrder

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.productId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.packageId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.onSale = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.validUntil = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.stickerIdRanges = []
                    (_, elem162) = iprot.readListBegin()
                    for _ in range(elem162):
                        elem163 = StickerIdRange()
                        elem163.read(iprot)
                        self.stickerIdRanges.append(elem163)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.BOOL:
                    self.grantedByDefault = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.I32:
                    self.displayOrder = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ProductSimple')
        if self.productId is not None:
            oprot.writeFieldBegin('productId', TType.STRING, 1)
            oprot.writeString(self.productId)
            oprot.writeFieldEnd()
        if self.packageId is not None:
            oprot.writeFieldBegin('packageId', TType.I64, 2)
            oprot.writeI64(self.packageId)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.I32, 3)
            oprot.writeI32(self.version)
            oprot.writeFieldEnd()
        if self.onSale is not None:
            oprot.writeFieldBegin('onSale', TType.BOOL, 4)
            oprot.writeBool(self.onSale)
            oprot.writeFieldEnd()
        if self.validUntil is not None:
            oprot.writeFieldBegin('validUntil', TType.I64, 5)
            oprot.writeI64(self.validUntil)
            oprot.writeFieldEnd()
        if self.stickerIdRanges is not None:
            oprot.writeFieldBegin('stickerIdRanges', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.stickerIdRanges))
            for elem164 in self.stickerIdRanges:
                elem164.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.grantedByDefault is not None:
            oprot.writeFieldBegin('grantedByDefault', TType.BOOL, 41)
            oprot.writeBool(self.grantedByDefault)
            oprot.writeFieldEnd()
        if self.displayOrder is not None:
            oprot.writeFieldBegin('displayOrder', TType.I32, 42)
            oprot.writeI32(self.displayOrder)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.productId))
        value = (value * 31) ^ hash(make_hashable(self.packageId))
        value = (value * 31) ^ hash(make_hashable(self.version))
        value = (value * 31) ^ hash(make_hashable(self.onSale))
        value = (value * 31) ^ hash(make_hashable(self.validUntil))
        value = (value * 31) ^ hash(make_hashable(self.stickerIdRanges))
        value = (value * 31) ^ hash(make_hashable(self.grantedByDefault))
        value = (value * 31) ^ hash(make_hashable(self.displayOrder))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ProductSimpleList(object):
    """
    Attributes:
     - hasNext
     - reinvokeHour
     - lastVersionSeq
     - productList
     - recentNewReleaseDate
     - recentEventReleaseDate
    """
    def __init__(self, hasNext=None, reinvokeHour=None, lastVersionSeq=None, productList=None, recentNewReleaseDate=None, recentEventReleaseDate=None):
        self.hasNext = hasNext
        self.reinvokeHour = reinvokeHour
        self.lastVersionSeq = lastVersionSeq
        self.productList = productList
        self.recentNewReleaseDate = recentNewReleaseDate
        self.recentEventReleaseDate = recentEventReleaseDate

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.hasNext = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.reinvokeHour = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.lastVersionSeq = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.productList = []
                    (_, elem165) = iprot.readListBegin()
                    for _ in range(elem165):
                        elem166 = ProductSimple()
                        elem166.read(iprot)
                        self.productList.append(elem166)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.recentNewReleaseDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.recentEventReleaseDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ProductSimpleList')
        if self.hasNext is not None:
            oprot.writeFieldBegin('hasNext', TType.BOOL, 1)
            oprot.writeBool(self.hasNext)
            oprot.writeFieldEnd()
        if self.reinvokeHour is not None:
            oprot.writeFieldBegin('reinvokeHour', TType.I32, 2)
            oprot.writeI32(self.reinvokeHour)
            oprot.writeFieldEnd()
        if self.lastVersionSeq is not None:
            oprot.writeFieldBegin('lastVersionSeq', TType.I64, 3)
            oprot.writeI64(self.lastVersionSeq)
            oprot.writeFieldEnd()
        if self.productList is not None:
            oprot.writeFieldBegin('productList', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.productList))
            for elem167 in self.productList:
                elem167.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.recentNewReleaseDate is not None:
            oprot.writeFieldBegin('recentNewReleaseDate', TType.I64, 5)
            oprot.writeI64(self.recentNewReleaseDate)
            oprot.writeFieldEnd()
        if self.recentEventReleaseDate is not None:
            oprot.writeFieldBegin('recentEventReleaseDate', TType.I64, 6)
            oprot.writeI64(self.recentEventReleaseDate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.hasNext))
        value = (value * 31) ^ hash(make_hashable(self.reinvokeHour))
        value = (value * 31) ^ hash(make_hashable(self.lastVersionSeq))
        value = (value * 31) ^ hash(make_hashable(self.productList))
        value = (value * 31) ^ hash(make_hashable(self.recentNewReleaseDate))
        value = (value * 31) ^ hash(make_hashable(self.recentEventReleaseDate))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Profile(object):
    """
    Attributes:
     - mid
     - userid
     - phone
     - email
     - regionCode
     - displayName
     - phoneticName
     - pictureStatus
     - thumbnailUrl
     - statusMessage
     - allowSearchByUserid
     - allowSearchByEmail
     - picturePath
     - musicProfile
     - videoProfile
    """
    def __init__(self, mid=None, userid=None, phone=None, email=None, regionCode=None, displayName=None, phoneticName=None, pictureStatus=None, thumbnailUrl=None, statusMessage=None, allowSearchByUserid=None, allowSearchByEmail=None, picturePath=None, musicProfile=None, videoProfile=None):
        self.mid = mid
        self.userid = userid
        self.phone = phone
        self.email = email
        self.regionCode = regionCode
        self.displayName = displayName
        self.phoneticName = phoneticName
        self.pictureStatus = pictureStatus
        self.thumbnailUrl = thumbnailUrl
        self.statusMessage = statusMessage
        self.allowSearchByUserid = allowSearchByUserid
        self.allowSearchByEmail = allowSearchByEmail
        self.picturePath = picturePath
        self.musicProfile = musicProfile
        self.videoProfile = videoProfile

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.userid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.phone = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.email = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.regionCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.phoneticName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.pictureStatus = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.thumbnailUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRING:
                    self.statusMessage = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.BOOL:
                    self.allowSearchByUserid = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.BOOL:
                    self.allowSearchByEmail = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRING:
                    self.picturePath = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.STRING:
                    self.musicProfile = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.STRING:
                    self.videoProfile = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Profile')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.userid is not None:
            oprot.writeFieldBegin('userid', TType.STRING, 3)
            oprot.writeString(self.userid)
            oprot.writeFieldEnd()
        if self.phone is not None:
            oprot.writeFieldBegin('phone', TType.STRING, 10)
            oprot.writeString(self.phone)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 11)
            oprot.writeString(self.email)
            oprot.writeFieldEnd()
        if self.regionCode is not None:
            oprot.writeFieldBegin('regionCode', TType.STRING, 12)
            oprot.writeString(self.regionCode)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 20)
            oprot.writeString(self.displayName)
            oprot.writeFieldEnd()
        if self.phoneticName is not None:
            oprot.writeFieldBegin('phoneticName', TType.STRING, 21)
            oprot.writeString(self.phoneticName)
            oprot.writeFieldEnd()
        if self.pictureStatus is not None:
            oprot.writeFieldBegin('pictureStatus', TType.STRING, 22)
            oprot.writeString(self.pictureStatus)
            oprot.writeFieldEnd()
        if self.thumbnailUrl is not None:
            oprot.writeFieldBegin('thumbnailUrl', TType.STRING, 23)
            oprot.writeString(self.thumbnailUrl)
            oprot.writeFieldEnd()
        if self.statusMessage is not None:
            oprot.writeFieldBegin('statusMessage', TType.STRING, 24)
            oprot.writeString(self.statusMessage)
            oprot.writeFieldEnd()
        if self.allowSearchByUserid is not None:
            oprot.writeFieldBegin('allowSearchByUserid', TType.BOOL, 31)
            oprot.writeBool(self.allowSearchByUserid)
            oprot.writeFieldEnd()
        if self.allowSearchByEmail is not None:
            oprot.writeFieldBegin('allowSearchByEmail', TType.BOOL, 32)
            oprot.writeBool(self.allowSearchByEmail)
            oprot.writeFieldEnd()
        if self.picturePath is not None:
            oprot.writeFieldBegin('picturePath', TType.STRING, 33)
            oprot.writeString(self.picturePath)
            oprot.writeFieldEnd()
        if self.musicProfile is not None:
            oprot.writeFieldBegin('musicProfile', TType.STRING, 34)
            oprot.writeString(self.musicProfile)
            oprot.writeFieldEnd()
        if self.videoProfile is not None:
            oprot.writeFieldBegin('videoProfile', TType.STRING, 35)
            oprot.writeString(self.videoProfile)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.userid))
        value = (value * 31) ^ hash(make_hashable(self.phone))
        value = (value * 31) ^ hash(make_hashable(self.email))
        value = (value * 31) ^ hash(make_hashable(self.regionCode))
        value = (value * 31) ^ hash(make_hashable(self.displayName))
        value = (value * 31) ^ hash(make_hashable(self.phoneticName))
        value = (value * 31) ^ hash(make_hashable(self.pictureStatus))
        value = (value * 31) ^ hash(make_hashable(self.thumbnailUrl))
        value = (value * 31) ^ hash(make_hashable(self.statusMessage))
        value = (value * 31) ^ hash(make_hashable(self.allowSearchByUserid))
        value = (value * 31) ^ hash(make_hashable(self.allowSearchByEmail))
        value = (value * 31) ^ hash(make_hashable(self.picturePath))
        value = (value * 31) ^ hash(make_hashable(self.musicProfile))
        value = (value * 31) ^ hash(make_hashable(self.videoProfile))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ProximityMatchCandidateResult(object):
    """
    Attributes:
     - users
     - buddies
    """
    def __init__(self, users=None, buddies=None):
        self.users = users
        self.buddies = buddies

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.users = []
                    (_, elem168) = iprot.readListBegin()
                    for _ in range(elem168):
                        elem169 = Contact()
                        elem169.read(iprot)
                        self.users.append(elem169)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.buddies = []
                    (_, elem170) = iprot.readListBegin()
                    for _ in range(elem170):
                        elem171 = Contact()
                        elem171.read(iprot)
                        self.buddies.append(elem171)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ProximityMatchCandidateResult')
        if self.users is not None:
            oprot.writeFieldBegin('users', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.users))
            for elem172 in self.users:
                elem172.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.buddies is not None:
            oprot.writeFieldBegin('buddies', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.buddies))
            for elem173 in self.buddies:
                elem173.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.users))
        value = (value * 31) ^ hash(make_hashable(self.buddies))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class RegisterWithSnsIdResult(object):
    """
    Attributes:
     - authToken
     - userCreated
    """
    def __init__(self, authToken=None, userCreated=None):
        self.authToken = authToken
        self.userCreated = userCreated

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.userCreated = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('RegisterWithSnsIdResult')
        if self.authToken is not None:
            oprot.writeFieldBegin('authToken', TType.STRING, 1)
            oprot.writeString(self.authToken)
            oprot.writeFieldEnd()
        if self.userCreated is not None:
            oprot.writeFieldBegin('userCreated', TType.BOOL, 2)
            oprot.writeBool(self.userCreated)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.authToken))
        value = (value * 31) ^ hash(make_hashable(self.userCreated))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class RequestTokenResponse(object):
    """
    Attributes:
     - requestToken
     - returnUrl
    """
    def __init__(self, requestToken=None, returnUrl=None):
        self.requestToken = requestToken
        self.returnUrl = returnUrl

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.returnUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('RequestTokenResponse')
        if self.requestToken is not None:
            oprot.writeFieldBegin('requestToken', TType.STRING, 1)
            oprot.writeString(self.requestToken)
            oprot.writeFieldEnd()
        if self.returnUrl is not None:
            oprot.writeFieldBegin('returnUrl', TType.STRING, 2)
            oprot.writeString(self.returnUrl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestToken))
        value = (value * 31) ^ hash(make_hashable(self.returnUrl))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Room(object):
    """
    Attributes:
     - mid
     - createdTime
     - contacts
     - notificationDisabled
     - memberMids
    """
    def __init__(self, mid=None, createdTime=None, contacts=None, notificationDisabled=None, memberMids=None):
        self.mid = mid
        self.createdTime = createdTime
        self.contacts = contacts
        self.notificationDisabled = notificationDisabled
        self.memberMids = memberMids

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.contacts = []
                    (_, elem174) = iprot.readListBegin()
                    for _ in range(elem174):
                        elem175 = Contact()
                        elem175.read(iprot)
                        self.contacts.append(elem175)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.BOOL:
                    self.notificationDisabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.LIST:
                    self.memberMids = []
                    (_, elem176) = iprot.readListBegin()
                    for _ in range(elem176):
                        elem177 = iprot.readString()
                        self.memberMids.append(elem177)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Room')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 2)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.contacts is not None:
            oprot.writeFieldBegin('contacts', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.contacts))
            for elem178 in self.contacts:
                elem178.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.notificationDisabled is not None:
            oprot.writeFieldBegin('notificationDisabled', TType.BOOL, 31)
            oprot.writeBool(self.notificationDisabled)
            oprot.writeFieldEnd()
        if self.memberMids is not None:
            oprot.writeFieldBegin('memberMids', TType.LIST, 40)
            oprot.writeListBegin(TType.STRING, len(self.memberMids))
            for elem179 in self.memberMids:
                oprot.writeString(elem179)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.createdTime))
        value = (value * 31) ^ hash(make_hashable(self.contacts))
        value = (value * 31) ^ hash(make_hashable(self.notificationDisabled))
        value = (value * 31) ^ hash(make_hashable(self.memberMids))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SuggestDictionary(object):
    """
    Attributes:
     - language
     - name
    """
    def __init__(self, language=None, name=None):
        self.language = language
        self.name = name

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.language = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SuggestDictionary')
        if self.language is not None:
            oprot.writeFieldBegin('language', TType.STRING, 1)
            oprot.writeString(self.language)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.language))
        value = (value * 31) ^ hash(make_hashable(self.name))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SuggestItemDictionaryIncrement(object):
    """
    Attributes:
     - status
     - revision
     - scheme
     - data
    """
    def __init__(self, status=None, revision=None, scheme=None, data=None):
        self.status = status
        self.revision = revision
        self.scheme = scheme
        self.data = data

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = SuggestDictionaryIncrementStatus(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.scheme = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.data = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SuggestItemDictionaryIncrement')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 2)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        if self.scheme is not None:
            oprot.writeFieldBegin('scheme', TType.STRING, 3)
            oprot.writeString(self.scheme)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRING, 4)
            oprot.writeBinary(self.data)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.status))
        value = (value * 31) ^ hash(make_hashable(self.revision))
        value = (value * 31) ^ hash(make_hashable(self.scheme))
        value = (value * 31) ^ hash(make_hashable(self.data))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SuggestTagDictionaryIncrement(object):
    """
    Attributes:
     - status
     - language
     - revision
     - scheme
     - data
    """
    def __init__(self, status=None, language=None, revision=None, scheme=None, data=None):
        self.status = status
        self.language = language
        self.revision = revision
        self.scheme = scheme
        self.data = data

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = SuggestDictionaryIncrementStatus(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.language = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.scheme = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.data = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SuggestTagDictionaryIncrement')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.language is not None:
            oprot.writeFieldBegin('language', TType.STRING, 2)
            oprot.writeString(self.language)
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 3)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        if self.scheme is not None:
            oprot.writeFieldBegin('scheme', TType.STRING, 4)
            oprot.writeString(self.scheme)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRING, 5)
            oprot.writeBinary(self.data)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.status))
        value = (value * 31) ^ hash(make_hashable(self.language))
        value = (value * 31) ^ hash(make_hashable(self.revision))
        value = (value * 31) ^ hash(make_hashable(self.scheme))
        value = (value * 31) ^ hash(make_hashable(self.data))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SuggestDictionaryIncrements(object):
    """
    Attributes:
     - itemIncrement
     - tagIncrements
    """
    def __init__(self, itemIncrement=None, tagIncrements=None):
        self.itemIncrement = itemIncrement
        self.tagIncrements = tagIncrements

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.itemIncrement = SuggestItemDictionaryIncrement()
                    self.itemIncrement.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.tagIncrements = []
                    (_, elem180) = iprot.readListBegin()
                    for _ in range(elem180):
                        elem181 = SuggestTagDictionaryIncrement()
                        elem181.read(iprot)
                        self.tagIncrements.append(elem181)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SuggestDictionaryIncrements')
        if self.itemIncrement is not None:
            oprot.writeFieldBegin('itemIncrement', TType.STRUCT, 1)
            self.itemIncrement.write(oprot)
            oprot.writeFieldEnd()
        if self.tagIncrements is not None:
            oprot.writeFieldBegin('tagIncrements', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.tagIncrements))
            for elem182 in self.tagIncrements:
                elem182.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.itemIncrement))
        value = (value * 31) ^ hash(make_hashable(self.tagIncrements))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SuggestItemDictionaryRevision(object):
    """
    Attributes:
     - revision
     - scheme
    """
    def __init__(self, revision=None, scheme=None):
        self.revision = revision
        self.scheme = scheme

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.scheme = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SuggestItemDictionaryRevision')
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 1)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        if self.scheme is not None:
            oprot.writeFieldBegin('scheme', TType.STRING, 2)
            oprot.writeString(self.scheme)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.revision))
        value = (value * 31) ^ hash(make_hashable(self.scheme))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SuggestTagDictionaryRevision(object):
    """
    Attributes:
     - language
     - revision
     - scheme
    """
    def __init__(self, language=None, revision=None, scheme=None):
        self.language = language
        self.revision = revision
        self.scheme = scheme

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.language = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.scheme = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SuggestTagDictionaryRevision')
        if self.language is not None:
            oprot.writeFieldBegin('language', TType.STRING, 1)
            oprot.writeString(self.language)
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 2)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        if self.scheme is not None:
            oprot.writeFieldBegin('scheme', TType.STRING, 3)
            oprot.writeString(self.scheme)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.language))
        value = (value * 31) ^ hash(make_hashable(self.revision))
        value = (value * 31) ^ hash(make_hashable(self.scheme))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SuggestDictionaryRevisions(object):
    """
    Attributes:
     - itemRevision
     - tagRevisions
    """
    def __init__(self, itemRevision=None, tagRevisions=None):
        self.itemRevision = itemRevision
        self.tagRevisions = tagRevisions

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.itemRevision = SuggestItemDictionaryRevision()
                    self.itemRevision.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.tagRevisions = []
                    (_, elem183) = iprot.readListBegin()
                    for _ in range(elem183):
                        elem184 = SuggestTagDictionaryRevision()
                        elem184.read(iprot)
                        self.tagRevisions.append(elem184)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SuggestDictionaryRevisions')
        if self.itemRevision is not None:
            oprot.writeFieldBegin('itemRevision', TType.STRUCT, 1)
            self.itemRevision.write(oprot)
            oprot.writeFieldEnd()
        if self.tagRevisions is not None:
            oprot.writeFieldBegin('tagRevisions', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.tagRevisions))
            for elem185 in self.tagRevisions:
                elem185.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.itemRevision))
        value = (value * 31) ^ hash(make_hashable(self.tagRevisions))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SuggestDictionarySettings(object):
    """
    Attributes:
     - revision
     - newRevision
     - dictionaries
     - preloadedDictionaries
    """
    def __init__(self, revision=None, newRevision=None, dictionaries=None, preloadedDictionaries=None):
        self.revision = revision
        self.newRevision = newRevision
        self.dictionaries = dictionaries
        self.preloadedDictionaries = preloadedDictionaries

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.newRevision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.dictionaries = []
                    (_, elem186) = iprot.readListBegin()
                    for _ in range(elem186):
                        elem187 = SuggestDictionary()
                        elem187.read(iprot)
                        self.dictionaries.append(elem187)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.preloadedDictionaries = []
                    (_, elem188) = iprot.readListBegin()
                    for _ in range(elem188):
                        elem189 = iprot.readString()
                        self.preloadedDictionaries.append(elem189)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SuggestDictionarySettings')
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 1)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        if self.newRevision is not None:
            oprot.writeFieldBegin('newRevision', TType.I64, 2)
            oprot.writeI64(self.newRevision)
            oprot.writeFieldEnd()
        if self.dictionaries is not None:
            oprot.writeFieldBegin('dictionaries', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.dictionaries))
            for elem190 in self.dictionaries:
                elem190.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.preloadedDictionaries is not None:
            oprot.writeFieldBegin('preloadedDictionaries', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.preloadedDictionaries))
            for elem191 in self.preloadedDictionaries:
                oprot.writeString(elem191)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.revision))
        value = (value * 31) ^ hash(make_hashable(self.newRevision))
        value = (value * 31) ^ hash(make_hashable(self.dictionaries))
        value = (value * 31) ^ hash(make_hashable(self.preloadedDictionaries))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PhoneInfoForChannel(object):
    """
    Attributes:
     - mid
     - normalizedPhoneNumber
     - allowedToSearchByPhoneNumber
     - allowedToReceiveMessageFromNonFriend
     - region
    """
    def __init__(self, mid=None, normalizedPhoneNumber=None, allowedToSearchByPhoneNumber=None, allowedToReceiveMessageFromNonFriend=None, region=None):
        self.mid = mid
        self.normalizedPhoneNumber = normalizedPhoneNumber
        self.allowedToSearchByPhoneNumber = allowedToSearchByPhoneNumber
        self.allowedToReceiveMessageFromNonFriend = allowedToReceiveMessageFromNonFriend
        self.region = region

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.normalizedPhoneNumber = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.allowedToSearchByPhoneNumber = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.allowedToReceiveMessageFromNonFriend = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.region = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PhoneInfoForChannel')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.normalizedPhoneNumber is not None:
            oprot.writeFieldBegin('normalizedPhoneNumber', TType.STRING, 2)
            oprot.writeString(self.normalizedPhoneNumber)
            oprot.writeFieldEnd()
        if self.allowedToSearchByPhoneNumber is not None:
            oprot.writeFieldBegin('allowedToSearchByPhoneNumber', TType.BOOL, 3)
            oprot.writeBool(self.allowedToSearchByPhoneNumber)
            oprot.writeFieldEnd()
        if self.allowedToReceiveMessageFromNonFriend is not None:
            oprot.writeFieldBegin('allowedToReceiveMessageFromNonFriend', TType.BOOL, 4)
            oprot.writeBool(self.allowedToReceiveMessageFromNonFriend)
            oprot.writeFieldEnd()
        if self.region is not None:
            oprot.writeFieldBegin('region', TType.STRING, 5)
            oprot.writeString(self.region)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.normalizedPhoneNumber))
        value = (value * 31) ^ hash(make_hashable(self.allowedToSearchByPhoneNumber))
        value = (value * 31) ^ hash(make_hashable(self.allowedToReceiveMessageFromNonFriend))
        value = (value * 31) ^ hash(make_hashable(self.region))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PhoneVerificationResult(object):
    """
    Attributes:
     - verificationResult
     - accountMigrationCheckType
     - recommendAddFriends
    """
    def __init__(self, verificationResult=None, accountMigrationCheckType=None, recommendAddFriends=None):
        self.verificationResult = verificationResult
        self.accountMigrationCheckType = accountMigrationCheckType
        self.recommendAddFriends = recommendAddFriends

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.verificationResult = VerificationResult(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.accountMigrationCheckType = AccountMigrationCheckType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.recommendAddFriends = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PhoneVerificationResult')
        if self.verificationResult is not None:
            oprot.writeFieldBegin('verificationResult', TType.I32, 1)
            oprot.writeI32(self.verificationResult)
            oprot.writeFieldEnd()
        if self.accountMigrationCheckType is not None:
            oprot.writeFieldBegin('accountMigrationCheckType', TType.I32, 2)
            oprot.writeI32(self.accountMigrationCheckType)
            oprot.writeFieldEnd()
        if self.recommendAddFriends is not None:
            oprot.writeFieldBegin('recommendAddFriends', TType.BOOL, 3)
            oprot.writeBool(self.recommendAddFriends)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.verificationResult))
        value = (value * 31) ^ hash(make_hashable(self.accountMigrationCheckType))
        value = (value * 31) ^ hash(make_hashable(self.recommendAddFriends))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PlaceSearchInfo(object):
    """
    Attributes:
     - name
     - address
     - latitude
     - longitude
    """
    def __init__(self, name=None, address=None, latitude=None, longitude=None):
        self.name = name
        self.address = address
        self.latitude = latitude
        self.longitude = longitude

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.address = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.latitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.longitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PlaceSearchInfo')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 2)
            oprot.writeString(self.address)
            oprot.writeFieldEnd()
        if self.latitude is not None:
            oprot.writeFieldBegin('latitude', TType.DOUBLE, 3)
            oprot.writeDouble(self.latitude)
            oprot.writeFieldEnd()
        if self.longitude is not None:
            oprot.writeFieldBegin('longitude', TType.DOUBLE, 4)
            oprot.writeDouble(self.longitude)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.name))
        value = (value * 31) ^ hash(make_hashable(self.address))
        value = (value * 31) ^ hash(make_hashable(self.latitude))
        value = (value * 31) ^ hash(make_hashable(self.longitude))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class RSAKey(object):
    """
    Attributes:
     - keynm
     - nvalue
     - evalue
     - sessionKey
    """
    def __init__(self, keynm=None, nvalue=None, evalue=None, sessionKey=None):
        self.keynm = keynm
        self.nvalue = nvalue
        self.evalue = evalue
        self.sessionKey = sessionKey

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.keynm = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nvalue = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.evalue = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.sessionKey = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('RSAKey')
        if self.keynm is not None:
            oprot.writeFieldBegin('keynm', TType.STRING, 1)
            oprot.writeString(self.keynm)
            oprot.writeFieldEnd()
        if self.nvalue is not None:
            oprot.writeFieldBegin('nvalue', TType.STRING, 2)
            oprot.writeString(self.nvalue)
            oprot.writeFieldEnd()
        if self.evalue is not None:
            oprot.writeFieldBegin('evalue', TType.STRING, 3)
            oprot.writeString(self.evalue)
            oprot.writeFieldEnd()
        if self.sessionKey is not None:
            oprot.writeFieldBegin('sessionKey', TType.STRING, 4)
            oprot.writeString(self.sessionKey)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.keynm))
        value = (value * 31) ^ hash(make_hashable(self.nvalue))
        value = (value * 31) ^ hash(make_hashable(self.evalue))
        value = (value * 31) ^ hash(make_hashable(self.sessionKey))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SecurityCenterResult(object):
    """
    Attributes:
     - uri
     - token
     - cookiePath
     - skip
    """
    def __init__(self, uri=None, token=None, cookiePath=None, skip=None):
        self.uri = uri
        self.token = token
        self.cookiePath = cookiePath
        self.skip = skip

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.uri = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.token = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cookiePath = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.skip = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SecurityCenterResult')
        if self.uri is not None:
            oprot.writeFieldBegin('uri', TType.STRING, 1)
            oprot.writeString(self.uri)
            oprot.writeFieldEnd()
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 2)
            oprot.writeString(self.token)
            oprot.writeFieldEnd()
        if self.cookiePath is not None:
            oprot.writeFieldBegin('cookiePath', TType.STRING, 3)
            oprot.writeString(self.cookiePath)
            oprot.writeFieldEnd()
        if self.skip is not None:
            oprot.writeFieldBegin('skip', TType.BOOL, 4)
            oprot.writeBool(self.skip)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.uri))
        value = (value * 31) ^ hash(make_hashable(self.token))
        value = (value * 31) ^ hash(make_hashable(self.cookiePath))
        value = (value * 31) ^ hash(make_hashable(self.skip))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SendBuddyMessageResult(object):
    """
    Attributes:
     - requestId
     - state
     - messageId
     - eventNo
     - receiverCount
     - successCount
     - failCount
     - cancelCount
     - blockCount
     - unregisterCount
     - timestamp
     - message
    """
    def __init__(self, requestId=None, state=None, messageId=None, eventNo=None, receiverCount=None, successCount=None, failCount=None, cancelCount=None, blockCount=None, unregisterCount=None, timestamp=None, message=None):
        self.requestId = requestId
        self.state = state
        self.messageId = messageId
        self.eventNo = eventNo
        self.receiverCount = receiverCount
        self.successCount = successCount
        self.failCount = failCount
        self.cancelCount = cancelCount
        self.blockCount = blockCount
        self.unregisterCount = unregisterCount
        self.timestamp = timestamp
        self.message = message

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.state = BuddyResultState(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.messageId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.eventNo = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.receiverCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.successCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I64:
                    self.failCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I64:
                    self.cancelCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I64:
                    self.blockCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I64:
                    self.unregisterCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.message = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SendBuddyMessageResult')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 2)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.messageId is not None:
            oprot.writeFieldBegin('messageId', TType.STRING, 3)
            oprot.writeString(self.messageId)
            oprot.writeFieldEnd()
        if self.eventNo is not None:
            oprot.writeFieldBegin('eventNo', TType.I32, 4)
            oprot.writeI32(self.eventNo)
            oprot.writeFieldEnd()
        if self.receiverCount is not None:
            oprot.writeFieldBegin('receiverCount', TType.I64, 11)
            oprot.writeI64(self.receiverCount)
            oprot.writeFieldEnd()
        if self.successCount is not None:
            oprot.writeFieldBegin('successCount', TType.I64, 12)
            oprot.writeI64(self.successCount)
            oprot.writeFieldEnd()
        if self.failCount is not None:
            oprot.writeFieldBegin('failCount', TType.I64, 13)
            oprot.writeI64(self.failCount)
            oprot.writeFieldEnd()
        if self.cancelCount is not None:
            oprot.writeFieldBegin('cancelCount', TType.I64, 14)
            oprot.writeI64(self.cancelCount)
            oprot.writeFieldEnd()
        if self.blockCount is not None:
            oprot.writeFieldBegin('blockCount', TType.I64, 15)
            oprot.writeI64(self.blockCount)
            oprot.writeFieldEnd()
        if self.unregisterCount is not None:
            oprot.writeFieldBegin('unregisterCount', TType.I64, 16)
            oprot.writeI64(self.unregisterCount)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 21)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 22)
            oprot.writeString(self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.state))
        value = (value * 31) ^ hash(make_hashable(self.messageId))
        value = (value * 31) ^ hash(make_hashable(self.eventNo))
        value = (value * 31) ^ hash(make_hashable(self.receiverCount))
        value = (value * 31) ^ hash(make_hashable(self.successCount))
        value = (value * 31) ^ hash(make_hashable(self.failCount))
        value = (value * 31) ^ hash(make_hashable(self.cancelCount))
        value = (value * 31) ^ hash(make_hashable(self.blockCount))
        value = (value * 31) ^ hash(make_hashable(self.unregisterCount))
        value = (value * 31) ^ hash(make_hashable(self.timestamp))
        value = (value * 31) ^ hash(make_hashable(self.message))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SetBuddyOnAirResult(object):
    """
    Attributes:
     - requestId
     - state
     - eventNo
     - receiverCount
     - successCount
     - failCount
     - cancelCount
     - unregisterCount
     - timestamp
     - message
    """
    def __init__(self, requestId=None, state=None, eventNo=None, receiverCount=None, successCount=None, failCount=None, cancelCount=None, unregisterCount=None, timestamp=None, message=None):
        self.requestId = requestId
        self.state = state
        self.eventNo = eventNo
        self.receiverCount = receiverCount
        self.successCount = successCount
        self.failCount = failCount
        self.cancelCount = cancelCount
        self.unregisterCount = unregisterCount
        self.timestamp = timestamp
        self.message = message

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.state = BuddyResultState(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.eventNo = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.receiverCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.successCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I64:
                    self.failCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I64:
                    self.cancelCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I64:
                    self.unregisterCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.message = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SetBuddyOnAirResult')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 2)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.eventNo is not None:
            oprot.writeFieldBegin('eventNo', TType.I32, 3)
            oprot.writeI32(self.eventNo)
            oprot.writeFieldEnd()
        if self.receiverCount is not None:
            oprot.writeFieldBegin('receiverCount', TType.I64, 11)
            oprot.writeI64(self.receiverCount)
            oprot.writeFieldEnd()
        if self.successCount is not None:
            oprot.writeFieldBegin('successCount', TType.I64, 12)
            oprot.writeI64(self.successCount)
            oprot.writeFieldEnd()
        if self.failCount is not None:
            oprot.writeFieldBegin('failCount', TType.I64, 13)
            oprot.writeI64(self.failCount)
            oprot.writeFieldEnd()
        if self.cancelCount is not None:
            oprot.writeFieldBegin('cancelCount', TType.I64, 14)
            oprot.writeI64(self.cancelCount)
            oprot.writeFieldEnd()
        if self.unregisterCount is not None:
            oprot.writeFieldBegin('unregisterCount', TType.I64, 15)
            oprot.writeI64(self.unregisterCount)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 21)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 22)
            oprot.writeString(self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.state))
        value = (value * 31) ^ hash(make_hashable(self.eventNo))
        value = (value * 31) ^ hash(make_hashable(self.receiverCount))
        value = (value * 31) ^ hash(make_hashable(self.successCount))
        value = (value * 31) ^ hash(make_hashable(self.failCount))
        value = (value * 31) ^ hash(make_hashable(self.cancelCount))
        value = (value * 31) ^ hash(make_hashable(self.unregisterCount))
        value = (value * 31) ^ hash(make_hashable(self.timestamp))
        value = (value * 31) ^ hash(make_hashable(self.message))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Settings(object):
    """
    Attributes:
     - notificationEnable
     - notificationMuteExpiration
     - notificationNewMessage
     - notificationGroupInvitation
     - notificationShowMessage
     - notificationIncomingCall
     - notificationSoundMessage
     - notificationSoundGroup
     - notificationDisabledWithSub
     - privacySyncContacts
     - privacySearchByPhoneNumber
     - privacySearchByUserid
     - privacySearchByEmail
     - privacyAllowSecondaryDeviceLogin
     - privacyProfileImagePostToMyhome
     - privacyReceiveMessagesFromNotFriend
     - contactMyTicket
     - identityProvider
     - identityIdentifier
     - snsAccounts
     - phoneRegistration
     - emailConfirmationStatus
     - preferenceLocale
     - customModes
     - e2eeEnable
     - hitokotoBackupRequested
     - privacyProfileMusicPostToMyhome
     - privacyAllowNearby
     - agreementNearbyTime
     - agreementSquareTime
     - notificationMention
     - botUseAgreementAcceptedAt
    """
    def __init__(self, notificationEnable=None, notificationMuteExpiration=None, notificationNewMessage=None, notificationGroupInvitation=None, notificationShowMessage=None, notificationIncomingCall=None, notificationSoundMessage=None, notificationSoundGroup=None, notificationDisabledWithSub=None, privacySyncContacts=None, privacySearchByPhoneNumber=None, privacySearchByUserid=None, privacySearchByEmail=None, privacyAllowSecondaryDeviceLogin=None, privacyProfileImagePostToMyhome=None, privacyReceiveMessagesFromNotFriend=None, contactMyTicket=None, identityProvider=None, identityIdentifier=None, snsAccounts=None, phoneRegistration=None, emailConfirmationStatus=None, preferenceLocale=None, customModes=None, e2eeEnable=None, hitokotoBackupRequested=None, privacyProfileMusicPostToMyhome=None, privacyAllowNearby=None, agreementNearbyTime=None, agreementSquareTime=None, notificationMention=None, botUseAgreementAcceptedAt=None):
        self.notificationEnable = notificationEnable
        self.notificationMuteExpiration = notificationMuteExpiration
        self.notificationNewMessage = notificationNewMessage
        self.notificationGroupInvitation = notificationGroupInvitation
        self.notificationShowMessage = notificationShowMessage
        self.notificationIncomingCall = notificationIncomingCall
        self.notificationSoundMessage = notificationSoundMessage
        self.notificationSoundGroup = notificationSoundGroup
        self.notificationDisabledWithSub = notificationDisabledWithSub
        self.privacySyncContacts = privacySyncContacts
        self.privacySearchByPhoneNumber = privacySearchByPhoneNumber
        self.privacySearchByUserid = privacySearchByUserid
        self.privacySearchByEmail = privacySearchByEmail
        self.privacyAllowSecondaryDeviceLogin = privacyAllowSecondaryDeviceLogin
        self.privacyProfileImagePostToMyhome = privacyProfileImagePostToMyhome
        self.privacyReceiveMessagesFromNotFriend = privacyReceiveMessagesFromNotFriend
        self.contactMyTicket = contactMyTicket
        self.identityProvider = identityProvider
        self.identityIdentifier = identityIdentifier
        self.snsAccounts = snsAccounts
        self.phoneRegistration = phoneRegistration
        self.emailConfirmationStatus = emailConfirmationStatus
        self.preferenceLocale = preferenceLocale
        self.customModes = customModes
        self.e2eeEnable = e2eeEnable
        self.hitokotoBackupRequested = hitokotoBackupRequested
        self.privacyProfileMusicPostToMyhome = privacyProfileMusicPostToMyhome
        self.privacyAllowNearby = privacyAllowNearby
        self.agreementNearbyTime = agreementNearbyTime
        self.agreementSquareTime = agreementSquareTime
        self.notificationMention = notificationMention
        self.botUseAgreementAcceptedAt = botUseAgreementAcceptedAt

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 10:
                if ftype == TType.BOOL:
                    self.notificationEnable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.notificationMuteExpiration = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.notificationNewMessage = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BOOL:
                    self.notificationGroupInvitation = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BOOL:
                    self.notificationShowMessage = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.BOOL:
                    self.notificationIncomingCall = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.notificationSoundMessage = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.notificationSoundGroup = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.BOOL:
                    self.notificationDisabledWithSub = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.BOOL:
                    self.privacySyncContacts = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.BOOL:
                    self.privacySearchByPhoneNumber = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.BOOL:
                    self.privacySearchByUserid = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.BOOL:
                    self.privacySearchByEmail = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.BOOL:
                    self.privacyAllowSecondaryDeviceLogin = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.BOOL:
                    self.privacyProfileImagePostToMyhome = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.BOOL:
                    self.privacyReceiveMessagesFromNotFriend = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRING:
                    self.contactMyTicket = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.I32:
                    self.identityProvider = IdentityProvider(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.STRING:
                    self.identityIdentifier = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.MAP:
                    self.snsAccounts = {}
                    (_, _, elem192) = iprot.readMapBegin()
                    for _ in range(elem192):
                        elem194 = SnsIdType(iprot.readI32())
                        elem193 = iprot.readString()
                        self.snsAccounts[elem194] = elem193
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.BOOL:
                    self.phoneRegistration = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 44:
                if ftype == TType.I32:
                    self.emailConfirmationStatus = EmailConfirmationStatus(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 50:
                if ftype == TType.STRING:
                    self.preferenceLocale = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 60:
                if ftype == TType.MAP:
                    self.customModes = {}
                    (_, _, elem195) = iprot.readMapBegin()
                    for _ in range(elem195):
                        elem197 = CustomMode(iprot.readI32())
                        elem196 = iprot.readString()
                        self.customModes[elem197] = elem196
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 61:
                if ftype == TType.BOOL:
                    self.e2eeEnable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 62:
                if ftype == TType.BOOL:
                    self.hitokotoBackupRequested = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 63:
                if ftype == TType.BOOL:
                    self.privacyProfileMusicPostToMyhome = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 65:
                if ftype == TType.BOOL:
                    self.privacyAllowNearby = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 66:
                if ftype == TType.I64:
                    self.agreementNearbyTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 67:
                if ftype == TType.I64:
                    self.agreementSquareTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 68:
                if ftype == TType.BOOL:
                    self.notificationMention = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 69:
                if ftype == TType.I64:
                    self.botUseAgreementAcceptedAt = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Settings')
        if self.notificationEnable is not None:
            oprot.writeFieldBegin('notificationEnable', TType.BOOL, 10)
            oprot.writeBool(self.notificationEnable)
            oprot.writeFieldEnd()
        if self.notificationMuteExpiration is not None:
            oprot.writeFieldBegin('notificationMuteExpiration', TType.I64, 11)
            oprot.writeI64(self.notificationMuteExpiration)
            oprot.writeFieldEnd()
        if self.notificationNewMessage is not None:
            oprot.writeFieldBegin('notificationNewMessage', TType.BOOL, 12)
            oprot.writeBool(self.notificationNewMessage)
            oprot.writeFieldEnd()
        if self.notificationGroupInvitation is not None:
            oprot.writeFieldBegin('notificationGroupInvitation', TType.BOOL, 13)
            oprot.writeBool(self.notificationGroupInvitation)
            oprot.writeFieldEnd()
        if self.notificationShowMessage is not None:
            oprot.writeFieldBegin('notificationShowMessage', TType.BOOL, 14)
            oprot.writeBool(self.notificationShowMessage)
            oprot.writeFieldEnd()
        if self.notificationIncomingCall is not None:
            oprot.writeFieldBegin('notificationIncomingCall', TType.BOOL, 15)
            oprot.writeBool(self.notificationIncomingCall)
            oprot.writeFieldEnd()
        if self.notificationSoundMessage is not None:
            oprot.writeFieldBegin('notificationSoundMessage', TType.STRING, 16)
            oprot.writeString(self.notificationSoundMessage)
            oprot.writeFieldEnd()
        if self.notificationSoundGroup is not None:
            oprot.writeFieldBegin('notificationSoundGroup', TType.STRING, 17)
            oprot.writeString(self.notificationSoundGroup)
            oprot.writeFieldEnd()
        if self.notificationDisabledWithSub is not None:
            oprot.writeFieldBegin('notificationDisabledWithSub', TType.BOOL, 18)
            oprot.writeBool(self.notificationDisabledWithSub)
            oprot.writeFieldEnd()
        if self.privacySyncContacts is not None:
            oprot.writeFieldBegin('privacySyncContacts', TType.BOOL, 20)
            oprot.writeBool(self.privacySyncContacts)
            oprot.writeFieldEnd()
        if self.privacySearchByPhoneNumber is not None:
            oprot.writeFieldBegin('privacySearchByPhoneNumber', TType.BOOL, 21)
            oprot.writeBool(self.privacySearchByPhoneNumber)
            oprot.writeFieldEnd()
        if self.privacySearchByUserid is not None:
            oprot.writeFieldBegin('privacySearchByUserid', TType.BOOL, 22)
            oprot.writeBool(self.privacySearchByUserid)
            oprot.writeFieldEnd()
        if self.privacySearchByEmail is not None:
            oprot.writeFieldBegin('privacySearchByEmail', TType.BOOL, 23)
            oprot.writeBool(self.privacySearchByEmail)
            oprot.writeFieldEnd()
        if self.privacyAllowSecondaryDeviceLogin is not None:
            oprot.writeFieldBegin('privacyAllowSecondaryDeviceLogin', TType.BOOL, 24)
            oprot.writeBool(self.privacyAllowSecondaryDeviceLogin)
            oprot.writeFieldEnd()
        if self.privacyProfileImagePostToMyhome is not None:
            oprot.writeFieldBegin('privacyProfileImagePostToMyhome', TType.BOOL, 25)
            oprot.writeBool(self.privacyProfileImagePostToMyhome)
            oprot.writeFieldEnd()
        if self.privacyReceiveMessagesFromNotFriend is not None:
            oprot.writeFieldBegin('privacyReceiveMessagesFromNotFriend', TType.BOOL, 26)
            oprot.writeBool(self.privacyReceiveMessagesFromNotFriend)
            oprot.writeFieldEnd()
        if self.contactMyTicket is not None:
            oprot.writeFieldBegin('contactMyTicket', TType.STRING, 30)
            oprot.writeString(self.contactMyTicket)
            oprot.writeFieldEnd()
        if self.identityProvider is not None:
            oprot.writeFieldBegin('identityProvider', TType.I32, 40)
            oprot.writeI32(self.identityProvider)
            oprot.writeFieldEnd()
        if self.identityIdentifier is not None:
            oprot.writeFieldBegin('identityIdentifier', TType.STRING, 41)
            oprot.writeString(self.identityIdentifier)
            oprot.writeFieldEnd()
        if self.snsAccounts is not None:
            oprot.writeFieldBegin('snsAccounts', TType.MAP, 42)
            oprot.writeMapBegin(TType.I32, TType.STRING, len(self.snsAccounts))
            for elem199, elem198 in self.snsAccounts.items():
                oprot.writeI32(elem199)
                oprot.writeString(elem198)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.phoneRegistration is not None:
            oprot.writeFieldBegin('phoneRegistration', TType.BOOL, 43)
            oprot.writeBool(self.phoneRegistration)
            oprot.writeFieldEnd()
        if self.emailConfirmationStatus is not None:
            oprot.writeFieldBegin('emailConfirmationStatus', TType.I32, 44)
            oprot.writeI32(self.emailConfirmationStatus)
            oprot.writeFieldEnd()
        if self.preferenceLocale is not None:
            oprot.writeFieldBegin('preferenceLocale', TType.STRING, 50)
            oprot.writeString(self.preferenceLocale)
            oprot.writeFieldEnd()
        if self.customModes is not None:
            oprot.writeFieldBegin('customModes', TType.MAP, 60)
            oprot.writeMapBegin(TType.I32, TType.STRING, len(self.customModes))
            for elem201, elem200 in self.customModes.items():
                oprot.writeI32(elem201)
                oprot.writeString(elem200)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.e2eeEnable is not None:
            oprot.writeFieldBegin('e2eeEnable', TType.BOOL, 61)
            oprot.writeBool(self.e2eeEnable)
            oprot.writeFieldEnd()
        if self.hitokotoBackupRequested is not None:
            oprot.writeFieldBegin('hitokotoBackupRequested', TType.BOOL, 62)
            oprot.writeBool(self.hitokotoBackupRequested)
            oprot.writeFieldEnd()
        if self.privacyProfileMusicPostToMyhome is not None:
            oprot.writeFieldBegin('privacyProfileMusicPostToMyhome', TType.BOOL, 63)
            oprot.writeBool(self.privacyProfileMusicPostToMyhome)
            oprot.writeFieldEnd()
        if self.privacyAllowNearby is not None:
            oprot.writeFieldBegin('privacyAllowNearby', TType.BOOL, 65)
            oprot.writeBool(self.privacyAllowNearby)
            oprot.writeFieldEnd()
        if self.agreementNearbyTime is not None:
            oprot.writeFieldBegin('agreementNearbyTime', TType.I64, 66)
            oprot.writeI64(self.agreementNearbyTime)
            oprot.writeFieldEnd()
        if self.agreementSquareTime is not None:
            oprot.writeFieldBegin('agreementSquareTime', TType.I64, 67)
            oprot.writeI64(self.agreementSquareTime)
            oprot.writeFieldEnd()
        if self.notificationMention is not None:
            oprot.writeFieldBegin('notificationMention', TType.BOOL, 68)
            oprot.writeBool(self.notificationMention)
            oprot.writeFieldEnd()
        if self.botUseAgreementAcceptedAt is not None:
            oprot.writeFieldBegin('botUseAgreementAcceptedAt', TType.I64, 69)
            oprot.writeI64(self.botUseAgreementAcceptedAt)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.notificationEnable))
        value = (value * 31) ^ hash(make_hashable(self.notificationMuteExpiration))
        value = (value * 31) ^ hash(make_hashable(self.notificationNewMessage))
        value = (value * 31) ^ hash(make_hashable(self.notificationGroupInvitation))
        value = (value * 31) ^ hash(make_hashable(self.notificationShowMessage))
        value = (value * 31) ^ hash(make_hashable(self.notificationIncomingCall))
        value = (value * 31) ^ hash(make_hashable(self.notificationSoundMessage))
        value = (value * 31) ^ hash(make_hashable(self.notificationSoundGroup))
        value = (value * 31) ^ hash(make_hashable(self.notificationDisabledWithSub))
        value = (value * 31) ^ hash(make_hashable(self.privacySyncContacts))
        value = (value * 31) ^ hash(make_hashable(self.privacySearchByPhoneNumber))
        value = (value * 31) ^ hash(make_hashable(self.privacySearchByUserid))
        value = (value * 31) ^ hash(make_hashable(self.privacySearchByEmail))
        value = (value * 31) ^ hash(make_hashable(self.privacyAllowSecondaryDeviceLogin))
        value = (value * 31) ^ hash(make_hashable(self.privacyProfileImagePostToMyhome))
        value = (value * 31) ^ hash(make_hashable(self.privacyReceiveMessagesFromNotFriend))
        value = (value * 31) ^ hash(make_hashable(self.contactMyTicket))
        value = (value * 31) ^ hash(make_hashable(self.identityProvider))
        value = (value * 31) ^ hash(make_hashable(self.identityIdentifier))
        value = (value * 31) ^ hash(make_hashable(self.snsAccounts))
        value = (value * 31) ^ hash(make_hashable(self.phoneRegistration))
        value = (value * 31) ^ hash(make_hashable(self.emailConfirmationStatus))
        value = (value * 31) ^ hash(make_hashable(self.preferenceLocale))
        value = (value * 31) ^ hash(make_hashable(self.customModes))
        value = (value * 31) ^ hash(make_hashable(self.e2eeEnable))
        value = (value * 31) ^ hash(make_hashable(self.hitokotoBackupRequested))
        value = (value * 31) ^ hash(make_hashable(self.privacyProfileMusicPostToMyhome))
        value = (value * 31) ^ hash(make_hashable(self.privacyAllowNearby))
        value = (value * 31) ^ hash(make_hashable(self.agreementNearbyTime))
        value = (value * 31) ^ hash(make_hashable(self.agreementSquareTime))
        value = (value * 31) ^ hash(make_hashable(self.notificationMention))
        value = (value * 31) ^ hash(make_hashable(self.botUseAgreementAcceptedAt))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SimpleChannelClient(object):
    """
    Attributes:
     - applicationType
     - applicationVersion
     - locale
    """
    def __init__(self, applicationType=None, applicationVersion=None, locale=None):
        self.applicationType = applicationType
        self.applicationVersion = applicationVersion
        self.locale = locale

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.applicationType = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.applicationVersion = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.locale = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SimpleChannelClient')
        if self.applicationType is not None:
            oprot.writeFieldBegin('applicationType', TType.STRING, 1)
            oprot.writeString(self.applicationType)
            oprot.writeFieldEnd()
        if self.applicationVersion is not None:
            oprot.writeFieldBegin('applicationVersion', TType.STRING, 2)
            oprot.writeString(self.applicationVersion)
            oprot.writeFieldEnd()
        if self.locale is not None:
            oprot.writeFieldBegin('locale', TType.STRING, 3)
            oprot.writeString(self.locale)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.applicationType))
        value = (value * 31) ^ hash(make_hashable(self.applicationVersion))
        value = (value * 31) ^ hash(make_hashable(self.locale))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SimpleChannelContact(object):
    """
    Attributes:
     - mid
     - displayName
     - pictureStatus
     - picturePath
     - statusMessage
    """
    def __init__(self, mid=None, displayName=None, pictureStatus=None, picturePath=None, statusMessage=None):
        self.mid = mid
        self.displayName = displayName
        self.pictureStatus = pictureStatus
        self.picturePath = picturePath
        self.statusMessage = statusMessage

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.pictureStatus = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.picturePath = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.statusMessage = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SimpleChannelContact')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 2)
            oprot.writeString(self.displayName)
            oprot.writeFieldEnd()
        if self.pictureStatus is not None:
            oprot.writeFieldBegin('pictureStatus', TType.STRING, 3)
            oprot.writeString(self.pictureStatus)
            oprot.writeFieldEnd()
        if self.picturePath is not None:
            oprot.writeFieldBegin('picturePath', TType.STRING, 4)
            oprot.writeString(self.picturePath)
            oprot.writeFieldEnd()
        if self.statusMessage is not None:
            oprot.writeFieldBegin('statusMessage', TType.STRING, 5)
            oprot.writeString(self.statusMessage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.displayName))
        value = (value * 31) ^ hash(make_hashable(self.pictureStatus))
        value = (value * 31) ^ hash(make_hashable(self.picturePath))
        value = (value * 31) ^ hash(make_hashable(self.statusMessage))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SnsFriend(object):
    """
    Attributes:
     - snsUserId
     - snsUserName
     - snsIdType
    """
    def __init__(self, snsUserId=None, snsUserName=None, snsIdType=None):
        self.snsUserId = snsUserId
        self.snsUserName = snsUserName
        self.snsIdType = snsIdType

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.snsUserId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.snsUserName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.snsIdType = SnsIdType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SnsFriend')
        if self.snsUserId is not None:
            oprot.writeFieldBegin('snsUserId', TType.STRING, 1)
            oprot.writeString(self.snsUserId)
            oprot.writeFieldEnd()
        if self.snsUserName is not None:
            oprot.writeFieldBegin('snsUserName', TType.STRING, 2)
            oprot.writeString(self.snsUserName)
            oprot.writeFieldEnd()
        if self.snsIdType is not None:
            oprot.writeFieldBegin('snsIdType', TType.I32, 3)
            oprot.writeI32(self.snsIdType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.snsUserId))
        value = (value * 31) ^ hash(make_hashable(self.snsUserName))
        value = (value * 31) ^ hash(make_hashable(self.snsIdType))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SnsFriendContactRegistration(object):
    """
    Attributes:
     - contact
     - snsIdType
     - snsUserId
    """
    def __init__(self, contact=None, snsIdType=None, snsUserId=None):
        self.contact = contact
        self.snsIdType = snsIdType
        self.snsUserId = snsUserId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.contact = Contact()
                    self.contact.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.snsIdType = SnsIdType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.snsUserId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SnsFriendContactRegistration')
        if self.contact is not None:
            oprot.writeFieldBegin('contact', TType.STRUCT, 1)
            self.contact.write(oprot)
            oprot.writeFieldEnd()
        if self.snsIdType is not None:
            oprot.writeFieldBegin('snsIdType', TType.I32, 2)
            oprot.writeI32(self.snsIdType)
            oprot.writeFieldEnd()
        if self.snsUserId is not None:
            oprot.writeFieldBegin('snsUserId', TType.STRING, 3)
            oprot.writeString(self.snsUserId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.contact))
        value = (value * 31) ^ hash(make_hashable(self.snsIdType))
        value = (value * 31) ^ hash(make_hashable(self.snsUserId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SnsFriendModification(object):
    """
    Attributes:
     - type
     - snsFriend
    """
    def __init__(self, type=None, snsFriend=None):
        self.type = type
        self.snsFriend = snsFriend

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = ModificationType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.snsFriend = SnsFriend()
                    self.snsFriend.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SnsFriendModification')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.snsFriend is not None:
            oprot.writeFieldBegin('snsFriend', TType.STRUCT, 2)
            self.snsFriend.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.snsFriend))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SnsFriends(object):
    """
    Attributes:
     - snsFriends
     - hasMore
    """
    def __init__(self, snsFriends=None, hasMore=None):
        self.snsFriends = snsFriends
        self.hasMore = hasMore

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.snsFriends = []
                    (_, elem202) = iprot.readListBegin()
                    for _ in range(elem202):
                        elem203 = SnsFriend()
                        elem203.read(iprot)
                        self.snsFriends.append(elem203)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.hasMore = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SnsFriends')
        if self.snsFriends is not None:
            oprot.writeFieldBegin('snsFriends', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.snsFriends))
            for elem204 in self.snsFriends:
                elem204.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.hasMore is not None:
            oprot.writeFieldBegin('hasMore', TType.BOOL, 2)
            oprot.writeBool(self.hasMore)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.snsFriends))
        value = (value * 31) ^ hash(make_hashable(self.hasMore))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SnsIdUserStatus(object):
    """
    Attributes:
     - userExisting
     - phoneNumberRegistered
     - sameDevice
    """
    def __init__(self, userExisting=None, phoneNumberRegistered=None, sameDevice=None):
        self.userExisting = userExisting
        self.phoneNumberRegistered = phoneNumberRegistered
        self.sameDevice = sameDevice

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.userExisting = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.phoneNumberRegistered = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.sameDevice = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SnsIdUserStatus')
        if self.userExisting is not None:
            oprot.writeFieldBegin('userExisting', TType.BOOL, 1)
            oprot.writeBool(self.userExisting)
            oprot.writeFieldEnd()
        if self.phoneNumberRegistered is not None:
            oprot.writeFieldBegin('phoneNumberRegistered', TType.BOOL, 2)
            oprot.writeBool(self.phoneNumberRegistered)
            oprot.writeFieldEnd()
        if self.sameDevice is not None:
            oprot.writeFieldBegin('sameDevice', TType.BOOL, 3)
            oprot.writeBool(self.sameDevice)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.userExisting))
        value = (value * 31) ^ hash(make_hashable(self.phoneNumberRegistered))
        value = (value * 31) ^ hash(make_hashable(self.sameDevice))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SnsProfile(object):
    """
    Attributes:
     - snsUserId
     - snsUserName
     - email
     - thumbnailUrl
    """
    def __init__(self, snsUserId=None, snsUserName=None, email=None, thumbnailUrl=None):
        self.snsUserId = snsUserId
        self.snsUserName = snsUserName
        self.email = email
        self.thumbnailUrl = thumbnailUrl

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.snsUserId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.snsUserName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.email = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.thumbnailUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SnsProfile')
        if self.snsUserId is not None:
            oprot.writeFieldBegin('snsUserId', TType.STRING, 1)
            oprot.writeString(self.snsUserId)
            oprot.writeFieldEnd()
        if self.snsUserName is not None:
            oprot.writeFieldBegin('snsUserName', TType.STRING, 2)
            oprot.writeString(self.snsUserName)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 3)
            oprot.writeString(self.email)
            oprot.writeFieldEnd()
        if self.thumbnailUrl is not None:
            oprot.writeFieldBegin('thumbnailUrl', TType.STRING, 4)
            oprot.writeString(self.thumbnailUrl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.snsUserId))
        value = (value * 31) ^ hash(make_hashable(self.snsUserName))
        value = (value * 31) ^ hash(make_hashable(self.email))
        value = (value * 31) ^ hash(make_hashable(self.thumbnailUrl))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SystemConfiguration(object):
    """
    Attributes:
     - endpoint
     - endpointSsl
     - updateUrl
     - c2dmAccount
     - nniServer
    """
    def __init__(self, endpoint=None, endpointSsl=None, updateUrl=None, c2dmAccount=None, nniServer=None):
        self.endpoint = endpoint
        self.endpointSsl = endpointSsl
        self.updateUrl = updateUrl
        self.c2dmAccount = c2dmAccount
        self.nniServer = nniServer

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.endpoint = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.endpointSsl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.updateUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.c2dmAccount = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.nniServer = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SystemConfiguration')
        if self.endpoint is not None:
            oprot.writeFieldBegin('endpoint', TType.STRING, 1)
            oprot.writeString(self.endpoint)
            oprot.writeFieldEnd()
        if self.endpointSsl is not None:
            oprot.writeFieldBegin('endpointSsl', TType.STRING, 2)
            oprot.writeString(self.endpointSsl)
            oprot.writeFieldEnd()
        if self.updateUrl is not None:
            oprot.writeFieldBegin('updateUrl', TType.STRING, 3)
            oprot.writeString(self.updateUrl)
            oprot.writeFieldEnd()
        if self.c2dmAccount is not None:
            oprot.writeFieldBegin('c2dmAccount', TType.STRING, 11)
            oprot.writeString(self.c2dmAccount)
            oprot.writeFieldEnd()
        if self.nniServer is not None:
            oprot.writeFieldBegin('nniServer', TType.STRING, 12)
            oprot.writeString(self.nniServer)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.endpoint))
        value = (value * 31) ^ hash(make_hashable(self.endpointSsl))
        value = (value * 31) ^ hash(make_hashable(self.updateUrl))
        value = (value * 31) ^ hash(make_hashable(self.c2dmAccount))
        value = (value * 31) ^ hash(make_hashable(self.nniServer))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Ticket(object):
    """
    Attributes:
     - id
     - expirationTime
     - maxUseCount
    """
    def __init__(self, id=None, expirationTime=None, maxUseCount=None):
        self.id = id
        self.expirationTime = expirationTime
        self.maxUseCount = maxUseCount

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.expirationTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.maxUseCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Ticket')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id)
            oprot.writeFieldEnd()
        if self.expirationTime is not None:
            oprot.writeFieldBegin('expirationTime', TType.I64, 10)
            oprot.writeI64(self.expirationTime)
            oprot.writeFieldEnd()
        if self.maxUseCount is not None:
            oprot.writeFieldBegin('maxUseCount', TType.I32, 21)
            oprot.writeI32(self.maxUseCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.id))
        value = (value * 31) ^ hash(make_hashable(self.expirationTime))
        value = (value * 31) ^ hash(make_hashable(self.maxUseCount))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class TMessageBox(object):
    """
    Attributes:
     - id
     - channelId
     - lastSeq
     - unreadCount
     - lastModifiedTime
     - status
     - midType
     - lastMessages
    """
    def __init__(self, id=None, channelId=None, lastSeq=None, unreadCount=None, lastModifiedTime=None, status=None, midType=None, lastMessages=None):
        self.id = id
        self.channelId = channelId
        self.lastSeq = lastSeq
        self.unreadCount = unreadCount
        self.lastModifiedTime = lastModifiedTime
        self.status = status
        self.midType = midType
        self.lastMessages = lastMessages

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.lastSeq = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.unreadCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.lastModifiedTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.midType = MIDType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.lastMessages = []
                    (_, elem205) = iprot.readListBegin()
                    for _ in range(elem205):
                        elem206 = Message()
                        elem206.read(iprot)
                        self.lastMessages.append(elem206)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('TMessageBox')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id)
            oprot.writeFieldEnd()
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 2)
            oprot.writeString(self.channelId)
            oprot.writeFieldEnd()
        if self.lastSeq is not None:
            oprot.writeFieldBegin('lastSeq', TType.I64, 5)
            oprot.writeI64(self.lastSeq)
            oprot.writeFieldEnd()
        if self.unreadCount is not None:
            oprot.writeFieldBegin('unreadCount', TType.I64, 6)
            oprot.writeI64(self.unreadCount)
            oprot.writeFieldEnd()
        if self.lastModifiedTime is not None:
            oprot.writeFieldBegin('lastModifiedTime', TType.I64, 7)
            oprot.writeI64(self.lastModifiedTime)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 8)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.midType is not None:
            oprot.writeFieldBegin('midType', TType.I32, 9)
            oprot.writeI32(self.midType)
            oprot.writeFieldEnd()
        if self.lastMessages is not None:
            oprot.writeFieldBegin('lastMessages', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.lastMessages))
            for elem207 in self.lastMessages:
                elem207.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.id))
        value = (value * 31) ^ hash(make_hashable(self.channelId))
        value = (value * 31) ^ hash(make_hashable(self.lastSeq))
        value = (value * 31) ^ hash(make_hashable(self.unreadCount))
        value = (value * 31) ^ hash(make_hashable(self.lastModifiedTime))
        value = (value * 31) ^ hash(make_hashable(self.status))
        value = (value * 31) ^ hash(make_hashable(self.midType))
        value = (value * 31) ^ hash(make_hashable(self.lastMessages))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class TMessageBoxWrapUp(object):
    """
    Attributes:
     - messageBox
     - name
     - contacts
     - pictureRevision
    """
    def __init__(self, messageBox=None, name=None, contacts=None, pictureRevision=None):
        self.messageBox = messageBox
        self.name = name
        self.contacts = contacts
        self.pictureRevision = pictureRevision

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.messageBox = TMessageBox()
                    self.messageBox.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.contacts = []
                    (_, elem208) = iprot.readListBegin()
                    for _ in range(elem208):
                        elem209 = Contact()
                        elem209.read(iprot)
                        self.contacts.append(elem209)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.pictureRevision = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('TMessageBoxWrapUp')
        if self.messageBox is not None:
            oprot.writeFieldBegin('messageBox', TType.STRUCT, 1)
            self.messageBox.write(oprot)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        if self.contacts is not None:
            oprot.writeFieldBegin('contacts', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.contacts))
            for elem210 in self.contacts:
                elem210.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.pictureRevision is not None:
            oprot.writeFieldBegin('pictureRevision', TType.STRING, 4)
            oprot.writeString(self.pictureRevision)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.messageBox))
        value = (value * 31) ^ hash(make_hashable(self.name))
        value = (value * 31) ^ hash(make_hashable(self.contacts))
        value = (value * 31) ^ hash(make_hashable(self.pictureRevision))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class TMessageBoxWrapUpResponse(object):
    """
    Attributes:
     - messageBoxWrapUpList
     - totalSize
    """
    def __init__(self, messageBoxWrapUpList=None, totalSize=None):
        self.messageBoxWrapUpList = messageBoxWrapUpList
        self.totalSize = totalSize

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.messageBoxWrapUpList = []
                    (_, elem211) = iprot.readListBegin()
                    for _ in range(elem211):
                        elem212 = TMessageBoxWrapUp()
                        elem212.read(iprot)
                        self.messageBoxWrapUpList.append(elem212)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.totalSize = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('TMessageBoxWrapUpResponse')
        if self.messageBoxWrapUpList is not None:
            oprot.writeFieldBegin('messageBoxWrapUpList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.messageBoxWrapUpList))
            for elem213 in self.messageBoxWrapUpList:
                elem213.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.totalSize is not None:
            oprot.writeFieldBegin('totalSize', TType.I32, 2)
            oprot.writeI32(self.totalSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.messageBoxWrapUpList))
        value = (value * 31) ^ hash(make_hashable(self.totalSize))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class TMessageReadRangeEntry(object):
    """
    Attributes:
     - startMessageId
     - endMessageId
     - startTime
     - endTime
    """
    def __init__(self, startMessageId=None, endMessageId=None, startTime=None, endTime=None):
        self.startMessageId = startMessageId
        self.endMessageId = endMessageId
        self.startTime = startTime
        self.endTime = endTime

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.startMessageId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.endMessageId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.startTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.endTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('TMessageReadRangeEntry')
        if self.startMessageId is not None:
            oprot.writeFieldBegin('startMessageId', TType.I64, 1)
            oprot.writeI64(self.startMessageId)
            oprot.writeFieldEnd()
        if self.endMessageId is not None:
            oprot.writeFieldBegin('endMessageId', TType.I64, 2)
            oprot.writeI64(self.endMessageId)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.I64, 3)
            oprot.writeI64(self.startTime)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.I64, 4)
            oprot.writeI64(self.endTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.startMessageId))
        value = (value * 31) ^ hash(make_hashable(self.endMessageId))
        value = (value * 31) ^ hash(make_hashable(self.startTime))
        value = (value * 31) ^ hash(make_hashable(self.endTime))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class TMessageReadRange(object):
    """
    Attributes:
     - chatId
     - ranges
    """
    def __init__(self, chatId=None, ranges=None):
        self.chatId = chatId
        self.ranges = ranges

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.chatId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.ranges = {}
                    (_, _, elem214) = iprot.readMapBegin()
                    for _ in range(elem214):
                        elem216 = iprot.readString()
                        elem215 = []
                        (_, elem217) = iprot.readListBegin()
                        for _ in range(elem217):
                            elem218 = TMessageReadRangeEntry()
                            elem218.read(iprot)
                            elem215.append(elem218)
                        iprot.readListEnd()
                        self.ranges[elem216] = elem215
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('TMessageReadRange')
        if self.chatId is not None:
            oprot.writeFieldBegin('chatId', TType.STRING, 1)
            oprot.writeString(self.chatId)
            oprot.writeFieldEnd()
        if self.ranges is not None:
            oprot.writeFieldBegin('ranges', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.ranges))
            for elem220, elem219 in self.ranges.items():
                oprot.writeString(elem220)
                oprot.writeListBegin(TType.STRUCT, len(elem219))
                for elem221 in elem219:
                    elem221.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.chatId))
        value = (value * 31) ^ hash(make_hashable(self.ranges))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChatRoomAnnouncementContents(object):
    """
    Attributes:
     - displayFields
     - text
     - link
     - thumbnail
    """
    def __init__(self, displayFields=None, text=None, link=None, thumbnail=None):
        self.displayFields = displayFields
        self.text = text
        self.link = link
        self.thumbnail = thumbnail

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.displayFields = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.text = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.link = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.thumbnail = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChatRoomAnnouncementContents')
        if self.displayFields is not None:
            oprot.writeFieldBegin('displayFields', TType.I32, 1)
            oprot.writeI32(self.displayFields)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 2)
            oprot.writeString(self.text)
            oprot.writeFieldEnd()
        if self.link is not None:
            oprot.writeFieldBegin('link', TType.STRING, 3)
            oprot.writeString(self.link)
            oprot.writeFieldEnd()
        if self.thumbnail is not None:
            oprot.writeFieldBegin('thumbnail', TType.STRING, 4)
            oprot.writeString(self.thumbnail)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.displayFields))
        value = (value * 31) ^ hash(make_hashable(self.text))
        value = (value * 31) ^ hash(make_hashable(self.link))
        value = (value * 31) ^ hash(make_hashable(self.thumbnail))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChatRoomAnnouncement(object):
    """
    Attributes:
     - announcementSeq
     - type
     - contents
     - creatorMid
     - createdTime
    """
    def __init__(self, announcementSeq=None, type=None, contents=None, creatorMid=None, createdTime=None):
        self.announcementSeq = announcementSeq
        self.type = type
        self.contents = contents
        self.creatorMid = creatorMid
        self.createdTime = createdTime

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.announcementSeq = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = ChatRoomAnnouncementType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.contents = ChatRoomAnnouncementContents()
                    self.contents.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.creatorMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChatRoomAnnouncement')
        if self.announcementSeq is not None:
            oprot.writeFieldBegin('announcementSeq', TType.I64, 1)
            oprot.writeI64(self.announcementSeq)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.contents is not None:
            oprot.writeFieldBegin('contents', TType.STRUCT, 3)
            self.contents.write(oprot)
            oprot.writeFieldEnd()
        if self.creatorMid is not None:
            oprot.writeFieldBegin('creatorMid', TType.STRING, 4)
            oprot.writeString(self.creatorMid)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 5)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.announcementSeq))
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.contents))
        value = (value * 31) ^ hash(make_hashable(self.creatorMid))
        value = (value * 31) ^ hash(make_hashable(self.createdTime))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ErrorExtraInfo(object):
    """
    Attributes:
     - preconditionFailedExtraInfo
    """
    def __init__(self, preconditionFailedExtraInfo=None):
        self.preconditionFailedExtraInfo = preconditionFailedExtraInfo

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.preconditionFailedExtraInfo = PreconditionFailedExtraInfo(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ErrorExtraInfo')
        if self.preconditionFailedExtraInfo is not None:
            oprot.writeFieldBegin('preconditionFailedExtraInfo', TType.I32, 1)
            oprot.writeI32(self.preconditionFailedExtraInfo)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.preconditionFailedExtraInfo))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SyncRelations(object):
    """
    Attributes:
     - syncAll
     - syncParamContact
     - syncParamMid
    """
    def __init__(self, syncAll=None, syncParamContact=None, syncParamMid=None):
        self.syncAll = syncAll
        self.syncParamContact = syncParamContact
        self.syncParamMid = syncParamMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.syncAll = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.syncParamContact = []
                    (_, elem222) = iprot.readListBegin()
                    for _ in range(elem222):
                        elem223 = SyncParamContact()
                        elem223.read(iprot)
                        self.syncParamContact.append(elem223)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.syncParamMid = []
                    (_, elem224) = iprot.readListBegin()
                    for _ in range(elem224):
                        elem225 = SyncParamMid()
                        elem225.read(iprot)
                        self.syncParamMid.append(elem225)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SyncRelations')
        if self.syncAll is not None:
            oprot.writeFieldBegin('syncAll', TType.BOOL, 1)
            oprot.writeBool(self.syncAll)
            oprot.writeFieldEnd()
        if self.syncParamContact is not None:
            oprot.writeFieldBegin('syncParamContact', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.syncParamContact))
            for elem226 in self.syncParamContact:
                elem226.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.syncParamMid is not None:
            oprot.writeFieldBegin('syncParamMid', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.syncParamMid))
            for elem227 in self.syncParamMid:
                elem227.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.syncAll))
        value = (value * 31) ^ hash(make_hashable(self.syncParamContact))
        value = (value * 31) ^ hash(make_hashable(self.syncParamMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SyncScope(object):
    """
    Attributes:
     - syncProfile
     - syncSettings
     - syncSticker
     - syncThemeShop
     - contact
     - group
     - room
     - chat
    """
    def __init__(self, syncProfile=None, syncSettings=None, syncSticker=None, syncThemeShop=None, contact=None, group=None, room=None, chat=None):
        self.syncProfile = syncProfile
        self.syncSettings = syncSettings
        self.syncSticker = syncSticker
        self.syncThemeShop = syncThemeShop
        self.contact = contact
        self.group = group
        self.room = room
        self.chat = chat

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.syncProfile = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.syncSettings = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.syncSticker = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.syncThemeShop = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.contact = SyncRelations()
                    self.contact.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.group = SyncRelations()
                    self.group.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.room = SyncRelations()
                    self.room.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.chat = SyncRelations()
                    self.chat.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SyncScope')
        if self.syncProfile is not None:
            oprot.writeFieldBegin('syncProfile', TType.BOOL, 1)
            oprot.writeBool(self.syncProfile)
            oprot.writeFieldEnd()
        if self.syncSettings is not None:
            oprot.writeFieldBegin('syncSettings', TType.BOOL, 2)
            oprot.writeBool(self.syncSettings)
            oprot.writeFieldEnd()
        if self.syncSticker is not None:
            oprot.writeFieldBegin('syncSticker', TType.BOOL, 3)
            oprot.writeBool(self.syncSticker)
            oprot.writeFieldEnd()
        if self.syncThemeShop is not None:
            oprot.writeFieldBegin('syncThemeShop', TType.BOOL, 4)
            oprot.writeBool(self.syncThemeShop)
            oprot.writeFieldEnd()
        if self.contact is not None:
            oprot.writeFieldBegin('contact', TType.STRUCT, 10)
            self.contact.write(oprot)
            oprot.writeFieldEnd()
        if self.group is not None:
            oprot.writeFieldBegin('group', TType.STRUCT, 11)
            self.group.write(oprot)
            oprot.writeFieldEnd()
        if self.room is not None:
            oprot.writeFieldBegin('room', TType.STRUCT, 12)
            self.room.write(oprot)
            oprot.writeFieldEnd()
        if self.chat is not None:
            oprot.writeFieldBegin('chat', TType.STRUCT, 13)
            self.chat.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.syncProfile))
        value = (value * 31) ^ hash(make_hashable(self.syncSettings))
        value = (value * 31) ^ hash(make_hashable(self.syncSticker))
        value = (value * 31) ^ hash(make_hashable(self.syncThemeShop))
        value = (value * 31) ^ hash(make_hashable(self.contact))
        value = (value * 31) ^ hash(make_hashable(self.group))
        value = (value * 31) ^ hash(make_hashable(self.room))
        value = (value * 31) ^ hash(make_hashable(self.chat))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class JoinSquareResponse(object):
    """
    Attributes:
     - square
     - squareAuthority
     - squareStatus
     - squareMember
     - squareFeatureSet
     - noteStatus
    """
    def __init__(self, square=None, squareAuthority=None, squareStatus=None, squareMember=None, squareFeatureSet=None, noteStatus=None):
        self.square = square
        self.squareAuthority = squareAuthority
        self.squareStatus = squareStatus
        self.squareMember = squareMember
        self.squareFeatureSet = squareFeatureSet
        self.noteStatus = noteStatus

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.square = Square()
                    self.square.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.squareAuthority = SquareAuthority()
                    self.squareAuthority.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.squareStatus = SquareStatus()
                    self.squareStatus.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.squareMember = SquareMember()
                    self.squareMember.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.squareFeatureSet = SquareFeatureSet()
                    self.squareFeatureSet.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.noteStatus = NoteStatus()
                    self.noteStatus.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('JoinSquareResponse')
        if self.square is not None:
            oprot.writeFieldBegin('square', TType.STRUCT, 1)
            self.square.write(oprot)
            oprot.writeFieldEnd()
        if self.squareAuthority is not None:
            oprot.writeFieldBegin('squareAuthority', TType.STRUCT, 2)
            self.squareAuthority.write(oprot)
            oprot.writeFieldEnd()
        if self.squareStatus is not None:
            oprot.writeFieldBegin('squareStatus', TType.STRUCT, 3)
            self.squareStatus.write(oprot)
            oprot.writeFieldEnd()
        if self.squareMember is not None:
            oprot.writeFieldBegin('squareMember', TType.STRUCT, 4)
            self.squareMember.write(oprot)
            oprot.writeFieldEnd()
        if self.squareFeatureSet is not None:
            oprot.writeFieldBegin('squareFeatureSet', TType.STRUCT, 5)
            self.squareFeatureSet.write(oprot)
            oprot.writeFieldEnd()
        if self.noteStatus is not None:
            oprot.writeFieldBegin('noteStatus', TType.STRUCT, 6)
            self.noteStatus.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.square))
        value = (value * 31) ^ hash(make_hashable(self.squareAuthority))
        value = (value * 31) ^ hash(make_hashable(self.squareStatus))
        value = (value * 31) ^ hash(make_hashable(self.squareMember))
        value = (value * 31) ^ hash(make_hashable(self.squareFeatureSet))
        value = (value * 31) ^ hash(make_hashable(self.noteStatus))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class JoinSquareRequest(object):
    """
    Attributes:
     - squareMid
     - member
    """
    def __init__(self, squareMid=None, member=None):
        self.squareMid = squareMid
        self.member = member

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.member = SquareMember()
                    self.member.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('JoinSquareRequest')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 2)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.member is not None:
            oprot.writeFieldBegin('member', TType.STRUCT, 3)
            self.member.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.member))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class JoinSquareChatResponse(object):
    """
    Attributes:
     - squareChat
     - squareChatStatus
     - squareChatMember
    """
    def __init__(self, squareChat=None, squareChatStatus=None, squareChatMember=None):
        self.squareChat = squareChat
        self.squareChatStatus = squareChatStatus
        self.squareChatMember = squareChatMember

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.squareChat = SquareChat()
                    self.squareChat.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.squareChatStatus = SquareChatStatus()
                    self.squareChatStatus.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.squareChatMember = SquareChatMember()
                    self.squareChatMember.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('JoinSquareChatResponse')
        if self.squareChat is not None:
            oprot.writeFieldBegin('squareChat', TType.STRUCT, 1)
            self.squareChat.write(oprot)
            oprot.writeFieldEnd()
        if self.squareChatStatus is not None:
            oprot.writeFieldBegin('squareChatStatus', TType.STRUCT, 2)
            self.squareChatStatus.write(oprot)
            oprot.writeFieldEnd()
        if self.squareChatMember is not None:
            oprot.writeFieldBegin('squareChatMember', TType.STRUCT, 3)
            self.squareChatMember.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChat))
        value = (value * 31) ^ hash(make_hashable(self.squareChatStatus))
        value = (value * 31) ^ hash(make_hashable(self.squareChatMember))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class JoinSquareChatRequest(object):
    """
    Attributes:
     - squareChatMid
    """
    def __init__(self, squareChatMid=None):
        self.squareChatMid = squareChatMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('JoinSquareChatRequest')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 1)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SendMessageResponse(object):
    """
    Attributes:
     - createdSquareMessage
    """
    def __init__(self, createdSquareMessage=None):
        self.createdSquareMessage = createdSquareMessage

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.createdSquareMessage = SquareMessage()
                    self.createdSquareMessage.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SendMessageResponse')
        if self.createdSquareMessage is not None:
            oprot.writeFieldBegin('createdSquareMessage', TType.STRUCT, 1)
            self.createdSquareMessage.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.createdSquareMessage))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SendMessageRequest(object):
    """
    Attributes:
     - reqSeq
     - squareChatMid
     - squareMessage
    """
    def __init__(self, reqSeq=None, squareChatMid=None, squareMessage=None):
        self.reqSeq = reqSeq
        self.squareChatMid = squareChatMid
        self.squareMessage = squareMessage

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.squareMessage = SquareMessage()
                    self.squareMessage.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SendMessageRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 2)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.squareMessage is not None:
            oprot.writeFieldBegin('squareMessage', TType.STRUCT, 3)
            self.squareMessage.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.reqSeq))
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.squareMessage))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class MarkAsReadRequest(object):
    """
    Attributes:
     - squareChatMid
     - messageId
    """
    def __init__(self, squareChatMid=None, messageId=None):
        self.squareChatMid = squareChatMid
        self.messageId = messageId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.messageId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('MarkAsReadRequest')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 2)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.messageId is not None:
            oprot.writeFieldBegin('messageId', TType.STRING, 4)
            oprot.writeString(self.messageId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.messageId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class MarkAsReadResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('MarkAsReadResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SubscriptionState(object):
    """
    Attributes:
     - subscriptionId
     - ttlMillis
    """
    def __init__(self, subscriptionId=None, ttlMillis=None):
        self.subscriptionId = subscriptionId
        self.ttlMillis = ttlMillis

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.subscriptionId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.ttlMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SubscriptionState')
        if self.subscriptionId is not None:
            oprot.writeFieldBegin('subscriptionId', TType.I64, 1)
            oprot.writeI64(self.subscriptionId)
            oprot.writeFieldEnd()
        if self.ttlMillis is not None:
            oprot.writeFieldBegin('ttlMillis', TType.I64, 2)
            oprot.writeI64(self.ttlMillis)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.subscriptionId))
        value = (value * 31) ^ hash(make_hashable(self.ttlMillis))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ApproveSquareMembersResponse(object):
    """
    Attributes:
     - approvedMembers
     - status
    """
    def __init__(self, approvedMembers=None, status=None):
        self.approvedMembers = approvedMembers
        self.status = status

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.approvedMembers = []
                    (_, elem228) = iprot.readListBegin()
                    for _ in range(elem228):
                        elem229 = SquareMember()
                        elem229.read(iprot)
                        self.approvedMembers.append(elem229)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.status = SquareStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ApproveSquareMembersResponse')
        if self.approvedMembers is not None:
            oprot.writeFieldBegin('approvedMembers', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.approvedMembers))
            for elem230 in self.approvedMembers:
                elem230.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 2)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.approvedMembers))
        value = (value * 31) ^ hash(make_hashable(self.status))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ApproveSquareMembersRequest(object):
    """
    Attributes:
     - squareMid
     - requestedMemberMids
    """
    def __init__(self, squareMid=None, requestedMemberMids=None):
        self.squareMid = squareMid
        self.requestedMemberMids = requestedMemberMids

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.requestedMemberMids = []
                    (_, elem231) = iprot.readListBegin()
                    for _ in range(elem231):
                        elem232 = iprot.readString()
                        self.requestedMemberMids.append(elem232)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ApproveSquareMembersRequest')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 2)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.requestedMemberMids is not None:
            oprot.writeFieldBegin('requestedMemberMids', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.requestedMemberMids))
            for elem233 in self.requestedMemberMids:
                oprot.writeString(elem233)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.requestedMemberMids))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CreateSquareChatResponse(object):
    """
    Attributes:
     - squareChat
     - squareChatStatus
     - squareChatMember
    """
    def __init__(self, squareChat=None, squareChatStatus=None, squareChatMember=None):
        self.squareChat = squareChat
        self.squareChatStatus = squareChatStatus
        self.squareChatMember = squareChatMember

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.squareChat = SquareChat()
                    self.squareChat.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.squareChatStatus = SquareChatStatus()
                    self.squareChatStatus.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.squareChatMember = SquareChatMember()
                    self.squareChatMember.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CreateSquareChatResponse')
        if self.squareChat is not None:
            oprot.writeFieldBegin('squareChat', TType.STRUCT, 1)
            self.squareChat.write(oprot)
            oprot.writeFieldEnd()
        if self.squareChatStatus is not None:
            oprot.writeFieldBegin('squareChatStatus', TType.STRUCT, 2)
            self.squareChatStatus.write(oprot)
            oprot.writeFieldEnd()
        if self.squareChatMember is not None:
            oprot.writeFieldBegin('squareChatMember', TType.STRUCT, 3)
            self.squareChatMember.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChat))
        value = (value * 31) ^ hash(make_hashable(self.squareChatStatus))
        value = (value * 31) ^ hash(make_hashable(self.squareChatMember))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CreateSquareChatRequest(object):
    """
    Attributes:
     - reqSeq
     - squareChat
     - squareMemberMids
    """
    def __init__(self, reqSeq=None, squareChat=None, squareMemberMids=None):
        self.reqSeq = reqSeq
        self.squareChat = squareChat
        self.squareMemberMids = squareMemberMids

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.squareChat = SquareChat()
                    self.squareChat.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.squareMemberMids = []
                    (_, elem234) = iprot.readListBegin()
                    for _ in range(elem234):
                        elem235 = iprot.readString()
                        self.squareMemberMids.append(elem235)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CreateSquareChatRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.squareChat is not None:
            oprot.writeFieldBegin('squareChat', TType.STRUCT, 2)
            self.squareChat.write(oprot)
            oprot.writeFieldEnd()
        if self.squareMemberMids is not None:
            oprot.writeFieldBegin('squareMemberMids', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.squareMemberMids))
            for elem236 in self.squareMemberMids:
                oprot.writeString(elem236)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.reqSeq))
        value = (value * 31) ^ hash(make_hashable(self.squareChat))
        value = (value * 31) ^ hash(make_hashable(self.squareMemberMids))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CreateSquareResponse(object):
    """
    Attributes:
     - square
     - creator
     - authority
     - status
    """
    def __init__(self, square=None, creator=None, authority=None, status=None):
        self.square = square
        self.creator = creator
        self.authority = authority
        self.status = status

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.square = Square()
                    self.square.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.creator = SquareMember()
                    self.creator.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.authority = SquareAuthority()
                    self.authority.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.status = SquareStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CreateSquareResponse')
        if self.square is not None:
            oprot.writeFieldBegin('square', TType.STRUCT, 1)
            self.square.write(oprot)
            oprot.writeFieldEnd()
        if self.creator is not None:
            oprot.writeFieldBegin('creator', TType.STRUCT, 2)
            self.creator.write(oprot)
            oprot.writeFieldEnd()
        if self.authority is not None:
            oprot.writeFieldBegin('authority', TType.STRUCT, 3)
            self.authority.write(oprot)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 4)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.square))
        value = (value * 31) ^ hash(make_hashable(self.creator))
        value = (value * 31) ^ hash(make_hashable(self.authority))
        value = (value * 31) ^ hash(make_hashable(self.status))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CreateSquareRequest(object):
    """
    Attributes:
     - reqSeq
     - square
     - creator
    """
    def __init__(self, reqSeq=None, square=None, creator=None):
        self.reqSeq = reqSeq
        self.square = square
        self.creator = creator

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.square = Square()
                    self.square.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.creator = SquareMember()
                    self.creator.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CreateSquareRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.square is not None:
            oprot.writeFieldBegin('square', TType.STRUCT, 2)
            self.square.write(oprot)
            oprot.writeFieldEnd()
        if self.creator is not None:
            oprot.writeFieldBegin('creator', TType.STRUCT, 3)
            self.creator.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.reqSeq))
        value = (value * 31) ^ hash(make_hashable(self.square))
        value = (value * 31) ^ hash(make_hashable(self.creator))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class DeleteSquareResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('DeleteSquareResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class DeleteSquareRequest(object):
    """
    Attributes:
     - mid
     - revision
    """
    def __init__(self, mid=None, revision=None):
        self.mid = mid
        self.revision = revision

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('DeleteSquareRequest')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 2)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 3)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.revision))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class DestroyMessageResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('DestroyMessageResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class DestroyMessageRequest(object):
    """
    Attributes:
     - squareChatMid
     - messageId
    """
    def __init__(self, squareChatMid=None, messageId=None):
        self.squareChatMid = squareChatMid
        self.messageId = messageId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.messageId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('DestroyMessageRequest')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 2)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.messageId is not None:
            oprot.writeFieldBegin('messageId', TType.STRING, 4)
            oprot.writeString(self.messageId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.messageId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareChatMembersRequest(object):
    """
    Attributes:
     - squareChatMid
     - continuationToken
     - limit
    """
    def __init__(self, squareChatMid=None, continuationToken=None, limit=None):
        self.squareChatMid = squareChatMid
        self.continuationToken = continuationToken
        self.limit = limit

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.continuationToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareChatMembersRequest')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 1)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.continuationToken is not None:
            oprot.writeFieldBegin('continuationToken', TType.STRING, 2)
            oprot.writeString(self.continuationToken)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I32, 3)
            oprot.writeI32(self.limit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.continuationToken))
        value = (value * 31) ^ hash(make_hashable(self.limit))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareChatMembersResponse(object):
    """
    Attributes:
     - squareChatMembers
     - continuationToken
    """
    def __init__(self, squareChatMembers=None, continuationToken=None):
        self.squareChatMembers = squareChatMembers
        self.continuationToken = continuationToken

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.squareChatMembers = SquareMember()
                    self.squareChatMembers.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.continuationToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareChatMembersResponse')
        if self.squareChatMembers is not None:
            oprot.writeFieldBegin('squareChatMembers', TType.STRUCT, 1)
            self.squareChatMembers.write(oprot)
            oprot.writeFieldEnd()
        if self.continuationToken is not None:
            oprot.writeFieldBegin('continuationToken', TType.STRING, 2)
            oprot.writeString(self.continuationToken)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMembers))
        value = (value * 31) ^ hash(make_hashable(self.continuationToken))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareChatStatusRequest(object):
    """
    Attributes:
     - squareChatMid
    """
    def __init__(self, squareChatMid=None):
        self.squareChatMid = squareChatMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareChatStatusRequest')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 2)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareChatStatusResponse(object):
    """
    Attributes:
     - chatStatus
    """
    def __init__(self, chatStatus=None):
        self.chatStatus = chatStatus

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.chatStatus = SquareChatStatus()
                    self.chatStatus.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareChatStatusResponse')
        if self.chatStatus is not None:
            oprot.writeFieldBegin('chatStatus', TType.STRUCT, 1)
            self.chatStatus.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.chatStatus))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareChatRequest(object):
    """
    Attributes:
     - squareChatMid
    """
    def __init__(self, squareChatMid=None):
        self.squareChatMid = squareChatMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareChatRequest')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 1)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareChatResponse(object):
    """
    Attributes:
     - squareChat
     - squareChatMember
     - squareChatStatus
    """
    def __init__(self, squareChat=None, squareChatMember=None, squareChatStatus=None):
        self.squareChat = squareChat
        self.squareChatMember = squareChatMember
        self.squareChatStatus = squareChatStatus

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.squareChat = SquareChat()
                    self.squareChat.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.squareChatMember = SquareChatMember()
                    self.squareChatMember.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.squareChatStatus = SquareChatStatus()
                    self.squareChatStatus.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareChatResponse')
        if self.squareChat is not None:
            oprot.writeFieldBegin('squareChat', TType.STRUCT, 1)
            self.squareChat.write(oprot)
            oprot.writeFieldEnd()
        if self.squareChatMember is not None:
            oprot.writeFieldBegin('squareChatMember', TType.STRUCT, 2)
            self.squareChatMember.write(oprot)
            oprot.writeFieldEnd()
        if self.squareChatStatus is not None:
            oprot.writeFieldBegin('squareChatStatus', TType.STRUCT, 3)
            self.squareChatStatus.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChat))
        value = (value * 31) ^ hash(make_hashable(self.squareChatMember))
        value = (value * 31) ^ hash(make_hashable(self.squareChatStatus))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareAuthorityRequest(object):
    """
    Attributes:
     - squareMid
    """
    def __init__(self, squareMid=None):
        self.squareMid = squareMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareAuthorityRequest')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 1)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareAuthorityResponse(object):
    """
    Attributes:
     - authority
    """
    def __init__(self, authority=None):
        self.authority = authority

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.authority = SquareAuthority()
                    self.authority.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareAuthorityResponse')
        if self.authority is not None:
            oprot.writeFieldBegin('authority', TType.STRUCT, 1)
            self.authority.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.authority))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetJoinedSquaresRequest(object):
    """
    Attributes:
     - continuationToken
     - limit
    """
    def __init__(self, continuationToken=None, limit=None):
        self.continuationToken = continuationToken
        self.limit = limit

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.continuationToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetJoinedSquaresRequest')
        if self.continuationToken is not None:
            oprot.writeFieldBegin('continuationToken', TType.STRING, 2)
            oprot.writeString(self.continuationToken)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I32, 3)
            oprot.writeI32(self.limit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.continuationToken))
        value = (value * 31) ^ hash(make_hashable(self.limit))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetJoinedSquaresResponse(object):
    """
    Attributes:
     - squares
     - members
     - authorities
     - statuses
     - continuationToken
     - noteStatuses
    """
    def __init__(self, squares=None, members=None, authorities=None, statuses=None, continuationToken=None, noteStatuses=None):
        self.squares = squares
        self.members = members
        self.authorities = authorities
        self.statuses = statuses
        self.continuationToken = continuationToken
        self.noteStatuses = noteStatuses

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.squares = []
                    (_, elem237) = iprot.readListBegin()
                    for _ in range(elem237):
                        elem238 = Square()
                        elem238.read(iprot)
                        self.squares.append(elem238)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.members = {}
                    (_, _, elem239) = iprot.readMapBegin()
                    for _ in range(elem239):
                        elem241 = iprot.readString()
                        elem240 = SquareMember()
                        elem240.read(iprot)
                        self.members[elem241] = elem240
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.authorities = {}
                    (_, _, elem242) = iprot.readMapBegin()
                    for _ in range(elem242):
                        elem244 = iprot.readString()
                        elem243 = SquareAuthority()
                        elem243.read(iprot)
                        self.authorities[elem244] = elem243
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.statuses = {}
                    (_, _, elem245) = iprot.readMapBegin()
                    for _ in range(elem245):
                        elem247 = iprot.readString()
                        elem246 = SquareStatus()
                        elem246.read(iprot)
                        self.statuses[elem247] = elem246
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.continuationToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.noteStatuses = {}
                    (_, _, elem248) = iprot.readMapBegin()
                    for _ in range(elem248):
                        elem250 = iprot.readString()
                        elem249 = NoteStatus()
                        elem249.read(iprot)
                        self.noteStatuses[elem250] = elem249
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetJoinedSquaresResponse')
        if self.squares is not None:
            oprot.writeFieldBegin('squares', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.squares))
            for elem251 in self.squares:
                elem251.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.members is not None:
            oprot.writeFieldBegin('members', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.members))
            for elem253, elem252 in self.members.items():
                oprot.writeString(elem253)
                elem252.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.authorities is not None:
            oprot.writeFieldBegin('authorities', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.authorities))
            for elem255, elem254 in self.authorities.items():
                oprot.writeString(elem255)
                elem254.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.statuses is not None:
            oprot.writeFieldBegin('statuses', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.statuses))
            for elem257, elem256 in self.statuses.items():
                oprot.writeString(elem257)
                elem256.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.continuationToken is not None:
            oprot.writeFieldBegin('continuationToken', TType.STRING, 5)
            oprot.writeString(self.continuationToken)
            oprot.writeFieldEnd()
        if self.noteStatuses is not None:
            oprot.writeFieldBegin('noteStatuses', TType.MAP, 6)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.noteStatuses))
            for elem259, elem258 in self.noteStatuses.items():
                oprot.writeString(elem259)
                elem258.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squares))
        value = (value * 31) ^ hash(make_hashable(self.members))
        value = (value * 31) ^ hash(make_hashable(self.authorities))
        value = (value * 31) ^ hash(make_hashable(self.statuses))
        value = (value * 31) ^ hash(make_hashable(self.continuationToken))
        value = (value * 31) ^ hash(make_hashable(self.noteStatuses))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetJoinableSquareChatsRequest(object):
    """
    Attributes:
     - squareMid
     - continuationToken
     - limit
    """
    def __init__(self, squareMid=None, continuationToken=None, limit=None):
        self.squareMid = squareMid
        self.continuationToken = continuationToken
        self.limit = limit

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.continuationToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetJoinableSquareChatsRequest')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 1)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.continuationToken is not None:
            oprot.writeFieldBegin('continuationToken', TType.STRING, 10)
            oprot.writeString(self.continuationToken)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I32, 11)
            oprot.writeI32(self.limit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.continuationToken))
        value = (value * 31) ^ hash(make_hashable(self.limit))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetJoinableSquareChatsResponse(object):
    """
    Attributes:
     - squareChats
     - continuationToken
     - totalSquareChatCount
     - squareChatStatuses
    """
    def __init__(self, squareChats=None, continuationToken=None, totalSquareChatCount=None, squareChatStatuses=None):
        self.squareChats = squareChats
        self.continuationToken = continuationToken
        self.totalSquareChatCount = totalSquareChatCount
        self.squareChatStatuses = squareChatStatuses

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.squareChats = []
                    (_, elem260) = iprot.readListBegin()
                    for _ in range(elem260):
                        elem261 = SquareChat()
                        elem261.read(iprot)
                        self.squareChats.append(elem261)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.continuationToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.totalSquareChatCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.squareChatStatuses = {}
                    (_, _, elem262) = iprot.readMapBegin()
                    for _ in range(elem262):
                        elem264 = iprot.readString()
                        elem263 = SquareChatStatus()
                        elem263.read(iprot)
                        self.squareChatStatuses[elem264] = elem263
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetJoinableSquareChatsResponse')
        if self.squareChats is not None:
            oprot.writeFieldBegin('squareChats', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.squareChats))
            for elem265 in self.squareChats:
                elem265.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.continuationToken is not None:
            oprot.writeFieldBegin('continuationToken', TType.STRING, 2)
            oprot.writeString(self.continuationToken)
            oprot.writeFieldEnd()
        if self.totalSquareChatCount is not None:
            oprot.writeFieldBegin('totalSquareChatCount', TType.I32, 3)
            oprot.writeI32(self.totalSquareChatCount)
            oprot.writeFieldEnd()
        if self.squareChatStatuses is not None:
            oprot.writeFieldBegin('squareChatStatuses', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.squareChatStatuses))
            for elem267, elem266 in self.squareChatStatuses.items():
                oprot.writeString(elem267)
                elem266.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChats))
        value = (value * 31) ^ hash(make_hashable(self.continuationToken))
        value = (value * 31) ^ hash(make_hashable(self.totalSquareChatCount))
        value = (value * 31) ^ hash(make_hashable(self.squareChatStatuses))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetInvitationTicketUrlRequest(object):
    """
    Attributes:
     - mid
    """
    def __init__(self, mid=None):
        self.mid = mid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetInvitationTicketUrlRequest')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 2)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetInvitationTicketUrlResponse(object):
    """
    Attributes:
     - invitationURL
    """
    def __init__(self, invitationURL=None):
        self.invitationURL = invitationURL

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.invitationURL = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetInvitationTicketUrlResponse')
        if self.invitationURL is not None:
            oprot.writeFieldBegin('invitationURL', TType.STRING, 1)
            oprot.writeString(self.invitationURL)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.invitationURL))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class LeaveSquareRequest(object):
    """
    Attributes:
     - squareMid
    """
    def __init__(self, squareMid=None):
        self.squareMid = squareMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('LeaveSquareRequest')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 2)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class LeaveSquareResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('LeaveSquareResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class LeaveSquareChatRequest(object):
    """
    Attributes:
     - squareChatMid
     - sayGoodbye
     - squareChatMemberRevision
    """
    def __init__(self, squareChatMid=None, sayGoodbye=None, squareChatMemberRevision=None):
        self.squareChatMid = squareChatMid
        self.sayGoodbye = sayGoodbye
        self.squareChatMemberRevision = squareChatMemberRevision

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.sayGoodbye = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.squareChatMemberRevision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('LeaveSquareChatRequest')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 2)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.sayGoodbye is not None:
            oprot.writeFieldBegin('sayGoodbye', TType.BOOL, 3)
            oprot.writeBool(self.sayGoodbye)
            oprot.writeFieldEnd()
        if self.squareChatMemberRevision is not None:
            oprot.writeFieldBegin('squareChatMemberRevision', TType.I64, 4)
            oprot.writeI64(self.squareChatMemberRevision)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.sayGoodbye))
        value = (value * 31) ^ hash(make_hashable(self.squareChatMemberRevision))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class LeaveSquareChatResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('LeaveSquareChatResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareMemberSearchOption(object):
    """
    Attributes:
     - membershipState
     - memberRoles
     - displayName
     - ableToReceiveMessage
     - ableToReceiveFriendRequest
     - chatMidToExcludeMembers
     - includingMe
    """
    def __init__(self, membershipState=None, memberRoles=None, displayName=None, ableToReceiveMessage=None, ableToReceiveFriendRequest=None, chatMidToExcludeMembers=None, includingMe=None):
        self.membershipState = membershipState
        self.memberRoles = memberRoles
        self.displayName = displayName
        self.ableToReceiveMessage = ableToReceiveMessage
        self.ableToReceiveFriendRequest = ableToReceiveFriendRequest
        self.chatMidToExcludeMembers = chatMidToExcludeMembers
        self.includingMe = includingMe

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.membershipState = SquareMembershipState(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.SET:
                    self.memberRoles = set()
                    (_, elem268) = iprot.readSetBegin()
                    for _ in range(elem268):
                        elem269 = SquareMemberRole(iprot.readI32())
                        self.memberRoles.add(elem269)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.ableToReceiveMessage = BooleanState(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.ableToReceiveFriendRequest = BooleanState(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.chatMidToExcludeMembers = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.includingMe = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareMemberSearchOption')
        if self.membershipState is not None:
            oprot.writeFieldBegin('membershipState', TType.I32, 1)
            oprot.writeI32(self.membershipState)
            oprot.writeFieldEnd()
        if self.memberRoles is not None:
            oprot.writeFieldBegin('memberRoles', TType.SET, 2)
            oprot.writeSetBegin(TType.I32, len(self.memberRoles))
            for elem270 in self.memberRoles:
                oprot.writeI32(elem270)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 3)
            oprot.writeString(self.displayName)
            oprot.writeFieldEnd()
        if self.ableToReceiveMessage is not None:
            oprot.writeFieldBegin('ableToReceiveMessage', TType.I32, 4)
            oprot.writeI32(self.ableToReceiveMessage)
            oprot.writeFieldEnd()
        if self.ableToReceiveFriendRequest is not None:
            oprot.writeFieldBegin('ableToReceiveFriendRequest', TType.I32, 5)
            oprot.writeI32(self.ableToReceiveFriendRequest)
            oprot.writeFieldEnd()
        if self.chatMidToExcludeMembers is not None:
            oprot.writeFieldBegin('chatMidToExcludeMembers', TType.STRING, 6)
            oprot.writeString(self.chatMidToExcludeMembers)
            oprot.writeFieldEnd()
        if self.includingMe is not None:
            oprot.writeFieldBegin('includingMe', TType.BOOL, 7)
            oprot.writeBool(self.includingMe)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.membershipState))
        value = (value * 31) ^ hash(make_hashable(self.memberRoles))
        value = (value * 31) ^ hash(make_hashable(self.displayName))
        value = (value * 31) ^ hash(make_hashable(self.ableToReceiveMessage))
        value = (value * 31) ^ hash(make_hashable(self.ableToReceiveFriendRequest))
        value = (value * 31) ^ hash(make_hashable(self.chatMidToExcludeMembers))
        value = (value * 31) ^ hash(make_hashable(self.includingMe))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SearchSquareMembersRequest(object):
    """
    Attributes:
     - squareMid
     - searchOption
     - continuationToken
     - limit
    """
    def __init__(self, squareMid=None, searchOption=None, continuationToken=None, limit=None):
        self.squareMid = squareMid
        self.searchOption = searchOption
        self.continuationToken = continuationToken
        self.limit = limit

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.searchOption = SquareMemberSearchOption()
                    self.searchOption.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.continuationToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SearchSquareMembersRequest')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 2)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.searchOption is not None:
            oprot.writeFieldBegin('searchOption', TType.STRUCT, 3)
            self.searchOption.write(oprot)
            oprot.writeFieldEnd()
        if self.continuationToken is not None:
            oprot.writeFieldBegin('continuationToken', TType.STRING, 4)
            oprot.writeString(self.continuationToken)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I32, 5)
            oprot.writeI32(self.limit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.searchOption))
        value = (value * 31) ^ hash(make_hashable(self.continuationToken))
        value = (value * 31) ^ hash(make_hashable(self.limit))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SearchSquareMembersResponse(object):
    """
    Attributes:
     - members
     - revision
     - continuationToken
     - totalCount
    """
    def __init__(self, members=None, revision=None, continuationToken=None, totalCount=None):
        self.members = members
        self.revision = revision
        self.continuationToken = continuationToken
        self.totalCount = totalCount

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.members = []
                    (_, elem271) = iprot.readListBegin()
                    for _ in range(elem271):
                        elem272 = SquareMember()
                        elem272.read(iprot)
                        self.members.append(elem272)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.continuationToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.totalCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SearchSquareMembersResponse')
        if self.members is not None:
            oprot.writeFieldBegin('members', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.members))
            for elem273 in self.members:
                elem273.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 2)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        if self.continuationToken is not None:
            oprot.writeFieldBegin('continuationToken', TType.STRING, 3)
            oprot.writeString(self.continuationToken)
            oprot.writeFieldEnd()
        if self.totalCount is not None:
            oprot.writeFieldBegin('totalCount', TType.I32, 4)
            oprot.writeI32(self.totalCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.members))
        value = (value * 31) ^ hash(make_hashable(self.revision))
        value = (value * 31) ^ hash(make_hashable(self.continuationToken))
        value = (value * 31) ^ hash(make_hashable(self.totalCount))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class FindSquareByInvitationTicketRequest(object):
    """
    Attributes:
     - invitationTicket
    """
    def __init__(self, invitationTicket=None):
        self.invitationTicket = invitationTicket

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.invitationTicket = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('FindSquareByInvitationTicketRequest')
        if self.invitationTicket is not None:
            oprot.writeFieldBegin('invitationTicket', TType.STRING, 2)
            oprot.writeString(self.invitationTicket)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.invitationTicket))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class FindSquareByInvitationTicketResponse(object):
    """
    Attributes:
     - square
     - myMembership
     - squareAuthority
     - squareStatus
    """
    def __init__(self, square=None, myMembership=None, squareAuthority=None, squareStatus=None):
        self.square = square
        self.myMembership = myMembership
        self.squareAuthority = squareAuthority
        self.squareStatus = squareStatus

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.square = Square()
                    self.square.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.myMembership = SquareMember()
                    self.myMembership.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.squareAuthority = SquareAuthority()
                    self.squareAuthority.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.squareStatus = SquareStatus()
                    self.squareStatus.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('FindSquareByInvitationTicketResponse')
        if self.square is not None:
            oprot.writeFieldBegin('square', TType.STRUCT, 1)
            self.square.write(oprot)
            oprot.writeFieldEnd()
        if self.myMembership is not None:
            oprot.writeFieldBegin('myMembership', TType.STRUCT, 2)
            self.myMembership.write(oprot)
            oprot.writeFieldEnd()
        if self.squareAuthority is not None:
            oprot.writeFieldBegin('squareAuthority', TType.STRUCT, 3)
            self.squareAuthority.write(oprot)
            oprot.writeFieldEnd()
        if self.squareStatus is not None:
            oprot.writeFieldBegin('squareStatus', TType.STRUCT, 4)
            self.squareStatus.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.square))
        value = (value * 31) ^ hash(make_hashable(self.myMembership))
        value = (value * 31) ^ hash(make_hashable(self.squareAuthority))
        value = (value * 31) ^ hash(make_hashable(self.squareStatus))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventReceiveMessage(object):
    """
    Attributes:
     - squareChatMid
     - squareMessage
    """
    def __init__(self, squareChatMid=None, squareMessage=None):
        self.squareChatMid = squareChatMid
        self.squareMessage = squareMessage

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.squareMessage = SquareMessage()
                    self.squareMessage.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventReceiveMessage')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 1)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.squareMessage is not None:
            oprot.writeFieldBegin('squareMessage', TType.STRUCT, 2)
            self.squareMessage.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.squareMessage))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventSendMessage(object):
    """
    Attributes:
     - squareChatMid
     - squareMessage
     - reqSeq
    """
    def __init__(self, squareChatMid=None, squareMessage=None, reqSeq=None):
        self.squareChatMid = squareChatMid
        self.squareMessage = squareMessage
        self.reqSeq = reqSeq

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.squareMessage = SquareMessage()
                    self.squareMessage.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventSendMessage')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 1)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.squareMessage is not None:
            oprot.writeFieldBegin('squareMessage', TType.STRUCT, 2)
            self.squareMessage.write(oprot)
            oprot.writeFieldEnd()
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 3)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.squareMessage))
        value = (value * 31) ^ hash(make_hashable(self.reqSeq))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotifiedJoinSquareChat(object):
    """
    Attributes:
     - squareChatMid
     - joinedMember
    """
    def __init__(self, squareChatMid=None, joinedMember=None):
        self.squareChatMid = squareChatMid
        self.joinedMember = joinedMember

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.joinedMember = SquareMember()
                    self.joinedMember.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotifiedJoinSquareChat')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 1)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.joinedMember is not None:
            oprot.writeFieldBegin('joinedMember', TType.STRUCT, 2)
            self.joinedMember.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.joinedMember))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotifiedInviteIntoSquareChat(object):
    """
    Attributes:
     - squareChatMid
     - invitees
     - invitor
     - invitorRelation
    """
    def __init__(self, squareChatMid=None, invitees=None, invitor=None, invitorRelation=None):
        self.squareChatMid = squareChatMid
        self.invitees = invitees
        self.invitor = invitor
        self.invitorRelation = invitorRelation

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.invitees = []
                    (_, elem274) = iprot.readListBegin()
                    for _ in range(elem274):
                        elem275 = SquareMember()
                        elem275.read(iprot)
                        self.invitees.append(elem275)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.invitor = SquareMember()
                    self.invitor.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.invitorRelation = SquareMemberRelation()
                    self.invitorRelation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotifiedInviteIntoSquareChat')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 1)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.invitees is not None:
            oprot.writeFieldBegin('invitees', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.invitees))
            for elem276 in self.invitees:
                elem276.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.invitor is not None:
            oprot.writeFieldBegin('invitor', TType.STRUCT, 3)
            self.invitor.write(oprot)
            oprot.writeFieldEnd()
        if self.invitorRelation is not None:
            oprot.writeFieldBegin('invitorRelation', TType.STRUCT, 4)
            self.invitorRelation.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.invitees))
        value = (value * 31) ^ hash(make_hashable(self.invitor))
        value = (value * 31) ^ hash(make_hashable(self.invitorRelation))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotifiedLeaveSquareChat(object):
    """
    Attributes:
     - squareChatMid
     - squareMemberMid
     - sayGoodbye
     - squareMember
    """
    def __init__(self, squareChatMid=None, squareMemberMid=None, sayGoodbye=None, squareMember=None):
        self.squareChatMid = squareChatMid
        self.squareMemberMid = squareMemberMid
        self.sayGoodbye = sayGoodbye
        self.squareMember = squareMember

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.squareMemberMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.sayGoodbye = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.squareMember = SquareMember()
                    self.squareMember.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotifiedLeaveSquareChat')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 1)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.squareMemberMid is not None:
            oprot.writeFieldBegin('squareMemberMid', TType.STRING, 2)
            oprot.writeString(self.squareMemberMid)
            oprot.writeFieldEnd()
        if self.sayGoodbye is not None:
            oprot.writeFieldBegin('sayGoodbye', TType.BOOL, 3)
            oprot.writeBool(self.sayGoodbye)
            oprot.writeFieldEnd()
        if self.squareMember is not None:
            oprot.writeFieldBegin('squareMember', TType.STRUCT, 4)
            self.squareMember.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.squareMemberMid))
        value = (value * 31) ^ hash(make_hashable(self.sayGoodbye))
        value = (value * 31) ^ hash(make_hashable(self.squareMember))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotifiedDestroyMessage(object):
    """
    Attributes:
     - squareChatMid
     - messageId
    """
    def __init__(self, squareChatMid=None, messageId=None):
        self.squareChatMid = squareChatMid
        self.messageId = messageId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.messageId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotifiedDestroyMessage')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 1)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.messageId is not None:
            oprot.writeFieldBegin('messageId', TType.STRING, 3)
            oprot.writeString(self.messageId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.messageId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotifiedMarkAsRead(object):
    """
    Attributes:
     - squareChatMid
     - sMemberMid
     - messageId
    """
    def __init__(self, squareChatMid=None, sMemberMid=None, messageId=None):
        self.squareChatMid = squareChatMid
        self.sMemberMid = sMemberMid
        self.messageId = messageId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sMemberMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.messageId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotifiedMarkAsRead')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 1)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.sMemberMid is not None:
            oprot.writeFieldBegin('sMemberMid', TType.STRING, 2)
            oprot.writeString(self.sMemberMid)
            oprot.writeFieldEnd()
        if self.messageId is not None:
            oprot.writeFieldBegin('messageId', TType.STRING, 4)
            oprot.writeString(self.messageId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.sMemberMid))
        value = (value * 31) ^ hash(make_hashable(self.messageId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotifiedUpdateSquareMemberProfile(object):
    """
    Attributes:
     - squareChatMid
     - squareMember
    """
    def __init__(self, squareChatMid=None, squareMember=None):
        self.squareChatMid = squareChatMid
        self.squareMember = squareMember

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.squareMember = SquareMember()
                    self.squareMember.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotifiedUpdateSquareMemberProfile')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 1)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.squareMember is not None:
            oprot.writeFieldBegin('squareMember', TType.STRUCT, 2)
            self.squareMember.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.squareMember))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotifiedKickoutFromSquare(object):
    """
    Attributes:
     - squareChatMid
     - kickees
    """
    def __init__(self, squareChatMid=None, kickees=None):
        self.squareChatMid = squareChatMid
        self.kickees = kickees

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.kickees = []
                    (_, elem277) = iprot.readListBegin()
                    for _ in range(elem277):
                        elem278 = SquareMember()
                        elem278.read(iprot)
                        self.kickees.append(elem278)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotifiedKickoutFromSquare')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 1)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.kickees is not None:
            oprot.writeFieldBegin('kickees', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.kickees))
            for elem279 in self.kickees:
                elem279.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.kickees))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotifiedShutdownSquare(object):
    """
    Attributes:
     - squareChatMid
     - square
    """
    def __init__(self, squareChatMid=None, square=None):
        self.squareChatMid = squareChatMid
        self.square = square

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.square = Square()
                    self.square.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotifiedShutdownSquare')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 1)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.square is not None:
            oprot.writeFieldBegin('square', TType.STRUCT, 2)
            self.square.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.square))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotifiedDeleteSquareChat(object):
    """
    Attributes:
     - squareChat
    """
    def __init__(self, squareChat=None):
        self.squareChat = squareChat

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.squareChat = SquareChat()
                    self.squareChat.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotifiedDeleteSquareChat')
        if self.squareChat is not None:
            oprot.writeFieldBegin('squareChat', TType.STRUCT, 1)
            self.squareChat.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChat))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotifiedUpdateSquareChatProfileName(object):
    """
    Attributes:
     - squareChatMid
     - editor
     - updatedChatName
    """
    def __init__(self, squareChatMid=None, editor=None, updatedChatName=None):
        self.squareChatMid = squareChatMid
        self.editor = editor
        self.updatedChatName = updatedChatName

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.editor = SquareMember()
                    self.editor.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.updatedChatName = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotifiedUpdateSquareChatProfileName')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 1)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.editor is not None:
            oprot.writeFieldBegin('editor', TType.STRUCT, 2)
            self.editor.write(oprot)
            oprot.writeFieldEnd()
        if self.updatedChatName is not None:
            oprot.writeFieldBegin('updatedChatName', TType.STRING, 3)
            oprot.writeString(self.updatedChatName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.editor))
        value = (value * 31) ^ hash(make_hashable(self.updatedChatName))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotifiedUpdateSquareChatProfileImage(object):
    """
    Attributes:
     - squareChatMid
     - editor
    """
    def __init__(self, squareChatMid=None, editor=None):
        self.squareChatMid = squareChatMid
        self.editor = editor

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.editor = SquareMember()
                    self.editor.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotifiedUpdateSquareChatProfileImage')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 1)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.editor is not None:
            oprot.writeFieldBegin('editor', TType.STRUCT, 2)
            self.editor.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.editor))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotifiedUpdateSquareChatStatus(object):
    """
    Attributes:
     - squareChatMid
     - statusWithoutMessage
    """
    def __init__(self, squareChatMid=None, statusWithoutMessage=None):
        self.squareChatMid = squareChatMid
        self.statusWithoutMessage = statusWithoutMessage

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.statusWithoutMessage = SquareChatStatusWithoutMessage()
                    self.statusWithoutMessage.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotifiedUpdateSquareChatStatus')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 1)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.statusWithoutMessage is not None:
            oprot.writeFieldBegin('statusWithoutMessage', TType.STRUCT, 2)
            self.statusWithoutMessage.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.statusWithoutMessage))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotifiedUpdateSquareStatus(object):
    """
    Attributes:
     - squareMid
     - squareStatus
    """
    def __init__(self, squareMid=None, squareStatus=None):
        self.squareMid = squareMid
        self.squareStatus = squareStatus

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.squareStatus = SquareStatus()
                    self.squareStatus.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotifiedUpdateSquareStatus')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 1)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.squareStatus is not None:
            oprot.writeFieldBegin('squareStatus', TType.STRUCT, 2)
            self.squareStatus.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.squareStatus))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotifiedCreateSquareMember(object):
    """
    Attributes:
     - square
     - squareAuthority
     - squareStatus
     - squareMember
     - squareFeatureSet
    """
    def __init__(self, square=None, squareAuthority=None, squareStatus=None, squareMember=None, squareFeatureSet=None):
        self.square = square
        self.squareAuthority = squareAuthority
        self.squareStatus = squareStatus
        self.squareMember = squareMember
        self.squareFeatureSet = squareFeatureSet

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.square = Square()
                    self.square.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.squareAuthority = SquareAuthority()
                    self.squareAuthority.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.squareStatus = SquareStatus()
                    self.squareStatus.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.squareMember = SquareMember()
                    self.squareMember.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.squareFeatureSet = SquareFeatureSet()
                    self.squareFeatureSet.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotifiedCreateSquareMember')
        if self.square is not None:
            oprot.writeFieldBegin('square', TType.STRUCT, 1)
            self.square.write(oprot)
            oprot.writeFieldEnd()
        if self.squareAuthority is not None:
            oprot.writeFieldBegin('squareAuthority', TType.STRUCT, 2)
            self.squareAuthority.write(oprot)
            oprot.writeFieldEnd()
        if self.squareStatus is not None:
            oprot.writeFieldBegin('squareStatus', TType.STRUCT, 3)
            self.squareStatus.write(oprot)
            oprot.writeFieldEnd()
        if self.squareMember is not None:
            oprot.writeFieldBegin('squareMember', TType.STRUCT, 4)
            self.squareMember.write(oprot)
            oprot.writeFieldEnd()
        if self.squareFeatureSet is not None:
            oprot.writeFieldBegin('squareFeatureSet', TType.STRUCT, 5)
            self.squareFeatureSet.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.square))
        value = (value * 31) ^ hash(make_hashable(self.squareAuthority))
        value = (value * 31) ^ hash(make_hashable(self.squareStatus))
        value = (value * 31) ^ hash(make_hashable(self.squareMember))
        value = (value * 31) ^ hash(make_hashable(self.squareFeatureSet))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotifiedCreateSquareChatMember(object):
    """
    Attributes:
     - squareChatMid
     - squareMemberMid
     - squareChatMember
    """
    def __init__(self, squareChatMid=None, squareMemberMid=None, squareChatMember=None):
        self.squareChatMid = squareChatMid
        self.squareMemberMid = squareMemberMid
        self.squareChatMember = squareChatMember

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.squareMemberMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.squareChatMember = SquareChatMember()
                    self.squareChatMember.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotifiedCreateSquareChatMember')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 1)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.squareMemberMid is not None:
            oprot.writeFieldBegin('squareMemberMid', TType.STRING, 2)
            oprot.writeString(self.squareMemberMid)
            oprot.writeFieldEnd()
        if self.squareChatMember is not None:
            oprot.writeFieldBegin('squareChatMember', TType.STRUCT, 3)
            self.squareChatMember.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.squareMemberMid))
        value = (value * 31) ^ hash(make_hashable(self.squareChatMember))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotifiedUpdateSquareMemberRelation(object):
    """
    Attributes:
     - squareMid
     - myMemberMid
     - targetSquareMemberMid
     - squareMemberRelation
    """
    def __init__(self, squareMid=None, myMemberMid=None, targetSquareMemberMid=None, squareMemberRelation=None):
        self.squareMid = squareMid
        self.myMemberMid = myMemberMid
        self.targetSquareMemberMid = targetSquareMemberMid
        self.squareMemberRelation = squareMemberRelation

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.myMemberMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.targetSquareMemberMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.squareMemberRelation = SquareMemberRelation()
                    self.squareMemberRelation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotifiedUpdateSquareMemberRelation')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 1)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.myMemberMid is not None:
            oprot.writeFieldBegin('myMemberMid', TType.STRING, 2)
            oprot.writeString(self.myMemberMid)
            oprot.writeFieldEnd()
        if self.targetSquareMemberMid is not None:
            oprot.writeFieldBegin('targetSquareMemberMid', TType.STRING, 3)
            oprot.writeString(self.targetSquareMemberMid)
            oprot.writeFieldEnd()
        if self.squareMemberRelation is not None:
            oprot.writeFieldBegin('squareMemberRelation', TType.STRUCT, 4)
            self.squareMemberRelation.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.myMemberMid))
        value = (value * 31) ^ hash(make_hashable(self.targetSquareMemberMid))
        value = (value * 31) ^ hash(make_hashable(self.squareMemberRelation))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotifiedUpdateSquare(object):
    """
    Attributes:
     - squareMid
     - square
    """
    def __init__(self, squareMid=None, square=None):
        self.squareMid = squareMid
        self.square = square

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.square = Square()
                    self.square.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotifiedUpdateSquare')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 1)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.square is not None:
            oprot.writeFieldBegin('square', TType.STRUCT, 2)
            self.square.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.square))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotifiedUpdateSquareMember(object):
    """
    Attributes:
     - squareMid
     - squareMemberMid
     - squareMember
    """
    def __init__(self, squareMid=None, squareMemberMid=None, squareMember=None):
        self.squareMid = squareMid
        self.squareMemberMid = squareMemberMid
        self.squareMember = squareMember

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.squareMemberMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.squareMember = SquareMember()
                    self.squareMember.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotifiedUpdateSquareMember')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 1)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.squareMemberMid is not None:
            oprot.writeFieldBegin('squareMemberMid', TType.STRING, 2)
            oprot.writeString(self.squareMemberMid)
            oprot.writeFieldEnd()
        if self.squareMember is not None:
            oprot.writeFieldBegin('squareMember', TType.STRUCT, 3)
            self.squareMember.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.squareMemberMid))
        value = (value * 31) ^ hash(make_hashable(self.squareMember))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotifiedUpdateSquareChat(object):
    """
    Attributes:
     - squareMid
     - squareChatMid
     - squareChat
    """
    def __init__(self, squareMid=None, squareChatMid=None, squareChat=None):
        self.squareMid = squareMid
        self.squareChatMid = squareChatMid
        self.squareChat = squareChat

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.squareChat = SquareChat()
                    self.squareChat.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotifiedUpdateSquareChat')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 1)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 2)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.squareChat is not None:
            oprot.writeFieldBegin('squareChat', TType.STRUCT, 3)
            self.squareChat.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.squareChat))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotificationJoinRequest(object):
    """
    Attributes:
     - squareMid
     - squareName
     - requestMemberName
     - profileImageObsHash
    """
    def __init__(self, squareMid=None, squareName=None, requestMemberName=None, profileImageObsHash=None):
        self.squareMid = squareMid
        self.squareName = squareName
        self.requestMemberName = requestMemberName
        self.profileImageObsHash = profileImageObsHash

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.squareName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.requestMemberName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.profileImageObsHash = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotificationJoinRequest')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 1)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.squareName is not None:
            oprot.writeFieldBegin('squareName', TType.STRING, 2)
            oprot.writeString(self.squareName)
            oprot.writeFieldEnd()
        if self.requestMemberName is not None:
            oprot.writeFieldBegin('requestMemberName', TType.STRING, 3)
            oprot.writeString(self.requestMemberName)
            oprot.writeFieldEnd()
        if self.profileImageObsHash is not None:
            oprot.writeFieldBegin('profileImageObsHash', TType.STRING, 4)
            oprot.writeString(self.profileImageObsHash)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.squareName))
        value = (value * 31) ^ hash(make_hashable(self.requestMemberName))
        value = (value * 31) ^ hash(make_hashable(self.profileImageObsHash))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotificationMemberUpdate(object):
    """
    Attributes:
     - squareMid
     - squareName
     - profileImageObsHash
    """
    def __init__(self, squareMid=None, squareName=None, profileImageObsHash=None):
        self.squareMid = squareMid
        self.squareName = squareName
        self.profileImageObsHash = profileImageObsHash

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.squareName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.profileImageObsHash = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotificationMemberUpdate')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 1)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.squareName is not None:
            oprot.writeFieldBegin('squareName', TType.STRING, 2)
            oprot.writeString(self.squareName)
            oprot.writeFieldEnd()
        if self.profileImageObsHash is not None:
            oprot.writeFieldBegin('profileImageObsHash', TType.STRING, 3)
            oprot.writeString(self.profileImageObsHash)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.squareName))
        value = (value * 31) ^ hash(make_hashable(self.profileImageObsHash))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotificationSquareDelete(object):
    """
    Attributes:
     - squareMid
     - squareName
     - profileImageObsHash
    """
    def __init__(self, squareMid=None, squareName=None, profileImageObsHash=None):
        self.squareMid = squareMid
        self.squareName = squareName
        self.profileImageObsHash = profileImageObsHash

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.squareName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.profileImageObsHash = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotificationSquareDelete')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 1)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.squareName is not None:
            oprot.writeFieldBegin('squareName', TType.STRING, 2)
            oprot.writeString(self.squareName)
            oprot.writeFieldEnd()
        if self.profileImageObsHash is not None:
            oprot.writeFieldBegin('profileImageObsHash', TType.STRING, 3)
            oprot.writeString(self.profileImageObsHash)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.squareName))
        value = (value * 31) ^ hash(make_hashable(self.profileImageObsHash))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotificationSquareChatDelete(object):
    """
    Attributes:
     - squareChatMid
     - squareChatName
     - profileImageObsHash
    """
    def __init__(self, squareChatMid=None, squareChatName=None, profileImageObsHash=None):
        self.squareChatMid = squareChatMid
        self.squareChatName = squareChatName
        self.profileImageObsHash = profileImageObsHash

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.squareChatName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.profileImageObsHash = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotificationSquareChatDelete')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 1)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.squareChatName is not None:
            oprot.writeFieldBegin('squareChatName', TType.STRING, 2)
            oprot.writeString(self.squareChatName)
            oprot.writeFieldEnd()
        if self.profileImageObsHash is not None:
            oprot.writeFieldBegin('profileImageObsHash', TType.STRING, 3)
            oprot.writeString(self.profileImageObsHash)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.squareChatName))
        value = (value * 31) ^ hash(make_hashable(self.profileImageObsHash))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotificationMessage(object):
    """
    Attributes:
     - squareChatMid
     - squareMessage
     - senderDisplayName
     - unreadCount
     - requiredToFetchChatEvents
    """
    def __init__(self, squareChatMid=None, squareMessage=None, senderDisplayName=None, unreadCount=None, requiredToFetchChatEvents=None):
        self.squareChatMid = squareChatMid
        self.squareMessage = squareMessage
        self.senderDisplayName = senderDisplayName
        self.unreadCount = unreadCount
        self.requiredToFetchChatEvents = requiredToFetchChatEvents

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.squareMessage = SquareMessage()
                    self.squareMessage.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.senderDisplayName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.unreadCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.requiredToFetchChatEvents = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotificationMessage')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 1)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.squareMessage is not None:
            oprot.writeFieldBegin('squareMessage', TType.STRUCT, 2)
            self.squareMessage.write(oprot)
            oprot.writeFieldEnd()
        if self.senderDisplayName is not None:
            oprot.writeFieldBegin('senderDisplayName', TType.STRING, 3)
            oprot.writeString(self.senderDisplayName)
            oprot.writeFieldEnd()
        if self.unreadCount is not None:
            oprot.writeFieldBegin('unreadCount', TType.I32, 4)
            oprot.writeI32(self.unreadCount)
            oprot.writeFieldEnd()
        if self.requiredToFetchChatEvents is not None:
            oprot.writeFieldBegin('requiredToFetchChatEvents', TType.BOOL, 5)
            oprot.writeBool(self.requiredToFetchChatEvents)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.squareMessage))
        value = (value * 31) ^ hash(make_hashable(self.senderDisplayName))
        value = (value * 31) ^ hash(make_hashable(self.unreadCount))
        value = (value * 31) ^ hash(make_hashable(self.requiredToFetchChatEvents))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotifiedUpdateSquareChatMember(object):
    """
    Attributes:
     - squareChatMid
     - squareMemberMid
     - squareChatMember
    """
    def __init__(self, squareChatMid=None, squareMemberMid=None, squareChatMember=None):
        self.squareChatMid = squareChatMid
        self.squareMemberMid = squareMemberMid
        self.squareChatMember = squareChatMember

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.squareMemberMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.squareChatMember = SquareChatMember()
                    self.squareChatMember.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotifiedUpdateSquareChatMember')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 1)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.squareMemberMid is not None:
            oprot.writeFieldBegin('squareMemberMid', TType.STRING, 2)
            oprot.writeString(self.squareMemberMid)
            oprot.writeFieldEnd()
        if self.squareChatMember is not None:
            oprot.writeFieldBegin('squareChatMember', TType.STRUCT, 3)
            self.squareChatMember.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.squareMemberMid))
        value = (value * 31) ^ hash(make_hashable(self.squareChatMember))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotifiedUpdateSquareAuthority(object):
    """
    Attributes:
     - squareMid
     - squareAuthority
    """
    def __init__(self, squareMid=None, squareAuthority=None):
        self.squareMid = squareMid
        self.squareAuthority = squareAuthority

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.squareAuthority = SquareAuthority()
                    self.squareAuthority.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotifiedUpdateSquareAuthority')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 1)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.squareAuthority is not None:
            oprot.writeFieldBegin('squareAuthority', TType.STRUCT, 2)
            self.squareAuthority.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.squareAuthority))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventNotifiedUpdateSquareFeatureSet(object):
    """
    Attributes:
     - squareFeatureSet
    """
    def __init__(self, squareFeatureSet=None):
        self.squareFeatureSet = squareFeatureSet

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.squareFeatureSet = SquareFeatureSet()
                    self.squareFeatureSet.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventNotifiedUpdateSquareFeatureSet')
        if self.squareFeatureSet is not None:
            oprot.writeFieldBegin('squareFeatureSet', TType.STRUCT, 1)
            self.squareFeatureSet.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareFeatureSet))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEventPayload(object):
    """
    Attributes:
     - receiveMessage
     - sendMessage
     - notifiedJoinSquareChat
     - notifiedInviteIntoSquareChat
     - notifiedLeaveSquareChat
     - notifiedDestroyMessage
     - notifiedMarkAsRead
     - notifiedUpdateSquareMemberProfile
     - notifiedKickoutFromSquare
     - notifiedShutdownSquare
     - notifiedDeleteSquareChat
     - notifiedUpdateSquareChatProfileName
     - notifiedUpdateSquareChatProfileImage
     - notifiedUpdateSquareStatus
     - notifiedUpdateSquareChatStatus
     - notifiedCreateSquareMember
     - notifiedCreateSquareChatMember
     - notifiedUpdateSquareMemberRelation
     - notifiedUpdateSquare
     - notifiedUpdateSquareMember
     - notifiedUpdateSquareChat
     - notificationJoinRequest
     - notificationJoined
     - notificationPromoteCoadmin
     - notificationPromoteAdmin
     - notificationDemoteMember
     - notificationKickedOut
     - notificationSquareDelete
     - notificationSquareChatDelete
     - notificationMessage
     - notifiedUpdateSquareChatMember
     - notifiedUpdateSquareAuthority
     - notifiedUpdateSquareFeatureSet
    """
    def __init__(self, receiveMessage=None, sendMessage=None, notifiedJoinSquareChat=None, notifiedInviteIntoSquareChat=None, notifiedLeaveSquareChat=None, notifiedDestroyMessage=None, notifiedMarkAsRead=None, notifiedUpdateSquareMemberProfile=None, notifiedKickoutFromSquare=None, notifiedShutdownSquare=None, notifiedDeleteSquareChat=None, notifiedUpdateSquareChatProfileName=None, notifiedUpdateSquareChatProfileImage=None, notifiedUpdateSquareStatus=None, notifiedUpdateSquareChatStatus=None, notifiedCreateSquareMember=None, notifiedCreateSquareChatMember=None, notifiedUpdateSquareMemberRelation=None, notifiedUpdateSquare=None, notifiedUpdateSquareMember=None, notifiedUpdateSquareChat=None, notificationJoinRequest=None, notificationJoined=None, notificationPromoteCoadmin=None, notificationPromoteAdmin=None, notificationDemoteMember=None, notificationKickedOut=None, notificationSquareDelete=None, notificationSquareChatDelete=None, notificationMessage=None, notifiedUpdateSquareChatMember=None, notifiedUpdateSquareAuthority=None, notifiedUpdateSquareFeatureSet=None):
        self.receiveMessage = receiveMessage
        self.sendMessage = sendMessage
        self.notifiedJoinSquareChat = notifiedJoinSquareChat
        self.notifiedInviteIntoSquareChat = notifiedInviteIntoSquareChat
        self.notifiedLeaveSquareChat = notifiedLeaveSquareChat
        self.notifiedDestroyMessage = notifiedDestroyMessage
        self.notifiedMarkAsRead = notifiedMarkAsRead
        self.notifiedUpdateSquareMemberProfile = notifiedUpdateSquareMemberProfile
        self.notifiedKickoutFromSquare = notifiedKickoutFromSquare
        self.notifiedShutdownSquare = notifiedShutdownSquare
        self.notifiedDeleteSquareChat = notifiedDeleteSquareChat
        self.notifiedUpdateSquareChatProfileName = notifiedUpdateSquareChatProfileName
        self.notifiedUpdateSquareChatProfileImage = notifiedUpdateSquareChatProfileImage
        self.notifiedUpdateSquareStatus = notifiedUpdateSquareStatus
        self.notifiedUpdateSquareChatStatus = notifiedUpdateSquareChatStatus
        self.notifiedCreateSquareMember = notifiedCreateSquareMember
        self.notifiedCreateSquareChatMember = notifiedCreateSquareChatMember
        self.notifiedUpdateSquareMemberRelation = notifiedUpdateSquareMemberRelation
        self.notifiedUpdateSquare = notifiedUpdateSquare
        self.notifiedUpdateSquareMember = notifiedUpdateSquareMember
        self.notifiedUpdateSquareChat = notifiedUpdateSquareChat
        self.notificationJoinRequest = notificationJoinRequest
        self.notificationJoined = notificationJoined
        self.notificationPromoteCoadmin = notificationPromoteCoadmin
        self.notificationPromoteAdmin = notificationPromoteAdmin
        self.notificationDemoteMember = notificationDemoteMember
        self.notificationKickedOut = notificationKickedOut
        self.notificationSquareDelete = notificationSquareDelete
        self.notificationSquareChatDelete = notificationSquareChatDelete
        self.notificationMessage = notificationMessage
        self.notifiedUpdateSquareChatMember = notifiedUpdateSquareChatMember
        self.notifiedUpdateSquareAuthority = notifiedUpdateSquareAuthority
        self.notifiedUpdateSquareFeatureSet = notifiedUpdateSquareFeatureSet

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.receiveMessage = SquareEventReceiveMessage()
                    self.receiveMessage.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sendMessage = SquareEventSendMessage()
                    self.sendMessage.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.notifiedJoinSquareChat = SquareEventNotifiedJoinSquareChat()
                    self.notifiedJoinSquareChat.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.notifiedInviteIntoSquareChat = SquareEventNotifiedInviteIntoSquareChat()
                    self.notifiedInviteIntoSquareChat.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.notifiedLeaveSquareChat = SquareEventNotifiedLeaveSquareChat()
                    self.notifiedLeaveSquareChat.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.notifiedDestroyMessage = SquareEventNotifiedDestroyMessage()
                    self.notifiedDestroyMessage.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.notifiedMarkAsRead = SquareEventNotifiedMarkAsRead()
                    self.notifiedMarkAsRead.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.notifiedUpdateSquareMemberProfile = SquareEventNotifiedUpdateSquareMemberProfile()
                    self.notifiedUpdateSquareMemberProfile.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRUCT:
                    self.notifiedKickoutFromSquare = SquareEventNotifiedKickoutFromSquare()
                    self.notifiedKickoutFromSquare.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRUCT:
                    self.notifiedShutdownSquare = SquareEventNotifiedShutdownSquare()
                    self.notifiedShutdownSquare.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRUCT:
                    self.notifiedDeleteSquareChat = SquareEventNotifiedDeleteSquareChat()
                    self.notifiedDeleteSquareChat.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.STRUCT:
                    self.notifiedUpdateSquareChatProfileName = SquareEventNotifiedUpdateSquareChatProfileName()
                    self.notifiedUpdateSquareChatProfileName.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.STRUCT:
                    self.notifiedUpdateSquareChatProfileImage = SquareEventNotifiedUpdateSquareChatProfileImage()
                    self.notifiedUpdateSquareChatProfileImage.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRUCT:
                    self.notifiedUpdateSquareStatus = SquareEventNotifiedUpdateSquareStatus()
                    self.notifiedUpdateSquareStatus.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRUCT:
                    self.notifiedUpdateSquareChatStatus = SquareEventNotifiedUpdateSquareChatStatus()
                    self.notifiedUpdateSquareChatStatus.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRUCT:
                    self.notifiedCreateSquareMember = SquareEventNotifiedCreateSquareMember()
                    self.notifiedCreateSquareMember.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRUCT:
                    self.notifiedCreateSquareChatMember = SquareEventNotifiedCreateSquareChatMember()
                    self.notifiedCreateSquareChatMember.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRUCT:
                    self.notifiedUpdateSquareMemberRelation = SquareEventNotifiedUpdateSquareMemberRelation()
                    self.notifiedUpdateSquareMemberRelation.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.notifiedUpdateSquare = SquareEventNotifiedUpdateSquare()
                    self.notifiedUpdateSquare.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.notifiedUpdateSquareMember = SquareEventNotifiedUpdateSquareMember()
                    self.notifiedUpdateSquareMember.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.notifiedUpdateSquareChat = SquareEventNotifiedUpdateSquareChat()
                    self.notifiedUpdateSquareChat.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRUCT:
                    self.notificationJoinRequest = SquareEventNotificationJoinRequest()
                    self.notificationJoinRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRUCT:
                    self.notificationJoined = SquareEventNotificationMemberUpdate()
                    self.notificationJoined.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRUCT:
                    self.notificationPromoteCoadmin = SquareEventNotificationMemberUpdate()
                    self.notificationPromoteCoadmin.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRUCT:
                    self.notificationPromoteAdmin = SquareEventNotificationMemberUpdate()
                    self.notificationPromoteAdmin.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRUCT:
                    self.notificationDemoteMember = SquareEventNotificationMemberUpdate()
                    self.notificationDemoteMember.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.STRUCT:
                    self.notificationKickedOut = SquareEventNotificationMemberUpdate()
                    self.notificationKickedOut.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.STRUCT:
                    self.notificationSquareDelete = SquareEventNotificationSquareDelete()
                    self.notificationSquareDelete.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.STRUCT:
                    self.notificationSquareChatDelete = SquareEventNotificationSquareChatDelete()
                    self.notificationSquareChatDelete.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRUCT:
                    self.notificationMessage = SquareEventNotificationMessage()
                    self.notificationMessage.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.notifiedUpdateSquareChatMember = SquareEventNotifiedUpdateSquareChatMember()
                    self.notifiedUpdateSquareChatMember.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.notifiedUpdateSquareAuthority = SquareEventNotifiedUpdateSquareAuthority()
                    self.notifiedUpdateSquareAuthority.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRUCT:
                    self.notifiedUpdateSquareFeatureSet = SquareEventNotifiedUpdateSquareFeatureSet()
                    self.notifiedUpdateSquareFeatureSet.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEventPayload')
        if self.receiveMessage is not None:
            oprot.writeFieldBegin('receiveMessage', TType.STRUCT, 1)
            self.receiveMessage.write(oprot)
            oprot.writeFieldEnd()
        if self.sendMessage is not None:
            oprot.writeFieldBegin('sendMessage', TType.STRUCT, 2)
            self.sendMessage.write(oprot)
            oprot.writeFieldEnd()
        if self.notifiedJoinSquareChat is not None:
            oprot.writeFieldBegin('notifiedJoinSquareChat', TType.STRUCT, 3)
            self.notifiedJoinSquareChat.write(oprot)
            oprot.writeFieldEnd()
        if self.notifiedInviteIntoSquareChat is not None:
            oprot.writeFieldBegin('notifiedInviteIntoSquareChat', TType.STRUCT, 4)
            self.notifiedInviteIntoSquareChat.write(oprot)
            oprot.writeFieldEnd()
        if self.notifiedLeaveSquareChat is not None:
            oprot.writeFieldBegin('notifiedLeaveSquareChat', TType.STRUCT, 5)
            self.notifiedLeaveSquareChat.write(oprot)
            oprot.writeFieldEnd()
        if self.notifiedDestroyMessage is not None:
            oprot.writeFieldBegin('notifiedDestroyMessage', TType.STRUCT, 6)
            self.notifiedDestroyMessage.write(oprot)
            oprot.writeFieldEnd()
        if self.notifiedMarkAsRead is not None:
            oprot.writeFieldBegin('notifiedMarkAsRead', TType.STRUCT, 7)
            self.notifiedMarkAsRead.write(oprot)
            oprot.writeFieldEnd()
        if self.notifiedUpdateSquareMemberProfile is not None:
            oprot.writeFieldBegin('notifiedUpdateSquareMemberProfile', TType.STRUCT, 8)
            self.notifiedUpdateSquareMemberProfile.write(oprot)
            oprot.writeFieldEnd()
        if self.notifiedKickoutFromSquare is not None:
            oprot.writeFieldBegin('notifiedKickoutFromSquare', TType.STRUCT, 20)
            self.notifiedKickoutFromSquare.write(oprot)
            oprot.writeFieldEnd()
        if self.notifiedShutdownSquare is not None:
            oprot.writeFieldBegin('notifiedShutdownSquare', TType.STRUCT, 19)
            self.notifiedShutdownSquare.write(oprot)
            oprot.writeFieldEnd()
        if self.notifiedDeleteSquareChat is not None:
            oprot.writeFieldBegin('notifiedDeleteSquareChat', TType.STRUCT, 21)
            self.notifiedDeleteSquareChat.write(oprot)
            oprot.writeFieldEnd()
        if self.notifiedUpdateSquareChatProfileName is not None:
            oprot.writeFieldBegin('notifiedUpdateSquareChatProfileName', TType.STRUCT, 31)
            self.notifiedUpdateSquareChatProfileName.write(oprot)
            oprot.writeFieldEnd()
        if self.notifiedUpdateSquareChatProfileImage is not None:
            oprot.writeFieldBegin('notifiedUpdateSquareChatProfileImage', TType.STRUCT, 32)
            self.notifiedUpdateSquareChatProfileImage.write(oprot)
            oprot.writeFieldEnd()
        if self.notifiedUpdateSquareStatus is not None:
            oprot.writeFieldBegin('notifiedUpdateSquareStatus', TType.STRUCT, 14)
            self.notifiedUpdateSquareStatus.write(oprot)
            oprot.writeFieldEnd()
        if self.notifiedUpdateSquareChatStatus is not None:
            oprot.writeFieldBegin('notifiedUpdateSquareChatStatus', TType.STRUCT, 15)
            self.notifiedUpdateSquareChatStatus.write(oprot)
            oprot.writeFieldEnd()
        if self.notifiedCreateSquareMember is not None:
            oprot.writeFieldBegin('notifiedCreateSquareMember', TType.STRUCT, 16)
            self.notifiedCreateSquareMember.write(oprot)
            oprot.writeFieldEnd()
        if self.notifiedCreateSquareChatMember is not None:
            oprot.writeFieldBegin('notifiedCreateSquareChatMember', TType.STRUCT, 17)
            self.notifiedCreateSquareChatMember.write(oprot)
            oprot.writeFieldEnd()
        if self.notifiedUpdateSquareMemberRelation is not None:
            oprot.writeFieldBegin('notifiedUpdateSquareMemberRelation', TType.STRUCT, 18)
            self.notifiedUpdateSquareMemberRelation.write(oprot)
            oprot.writeFieldEnd()
        if self.notifiedUpdateSquare is not None:
            oprot.writeFieldBegin('notifiedUpdateSquare', TType.STRUCT, 9)
            self.notifiedUpdateSquare.write(oprot)
            oprot.writeFieldEnd()
        if self.notifiedUpdateSquareMember is not None:
            oprot.writeFieldBegin('notifiedUpdateSquareMember', TType.STRUCT, 10)
            self.notifiedUpdateSquareMember.write(oprot)
            oprot.writeFieldEnd()
        if self.notifiedUpdateSquareChat is not None:
            oprot.writeFieldBegin('notifiedUpdateSquareChat', TType.STRUCT, 11)
            self.notifiedUpdateSquareChat.write(oprot)
            oprot.writeFieldEnd()
        if self.notificationJoinRequest is not None:
            oprot.writeFieldBegin('notificationJoinRequest', TType.STRUCT, 22)
            self.notificationJoinRequest.write(oprot)
            oprot.writeFieldEnd()
        if self.notificationJoined is not None:
            oprot.writeFieldBegin('notificationJoined', TType.STRUCT, 23)
            self.notificationJoined.write(oprot)
            oprot.writeFieldEnd()
        if self.notificationPromoteCoadmin is not None:
            oprot.writeFieldBegin('notificationPromoteCoadmin', TType.STRUCT, 24)
            self.notificationPromoteCoadmin.write(oprot)
            oprot.writeFieldEnd()
        if self.notificationPromoteAdmin is not None:
            oprot.writeFieldBegin('notificationPromoteAdmin', TType.STRUCT, 25)
            self.notificationPromoteAdmin.write(oprot)
            oprot.writeFieldEnd()
        if self.notificationDemoteMember is not None:
            oprot.writeFieldBegin('notificationDemoteMember', TType.STRUCT, 26)
            self.notificationDemoteMember.write(oprot)
            oprot.writeFieldEnd()
        if self.notificationKickedOut is not None:
            oprot.writeFieldBegin('notificationKickedOut', TType.STRUCT, 27)
            self.notificationKickedOut.write(oprot)
            oprot.writeFieldEnd()
        if self.notificationSquareDelete is not None:
            oprot.writeFieldBegin('notificationSquareDelete', TType.STRUCT, 28)
            self.notificationSquareDelete.write(oprot)
            oprot.writeFieldEnd()
        if self.notificationSquareChatDelete is not None:
            oprot.writeFieldBegin('notificationSquareChatDelete', TType.STRUCT, 29)
            self.notificationSquareChatDelete.write(oprot)
            oprot.writeFieldEnd()
        if self.notificationMessage is not None:
            oprot.writeFieldBegin('notificationMessage', TType.STRUCT, 30)
            self.notificationMessage.write(oprot)
            oprot.writeFieldEnd()
        if self.notifiedUpdateSquareChatMember is not None:
            oprot.writeFieldBegin('notifiedUpdateSquareChatMember', TType.STRUCT, 12)
            self.notifiedUpdateSquareChatMember.write(oprot)
            oprot.writeFieldEnd()
        if self.notifiedUpdateSquareAuthority is not None:
            oprot.writeFieldBegin('notifiedUpdateSquareAuthority', TType.STRUCT, 13)
            self.notifiedUpdateSquareAuthority.write(oprot)
            oprot.writeFieldEnd()
        if self.notifiedUpdateSquareFeatureSet is not None:
            oprot.writeFieldBegin('notifiedUpdateSquareFeatureSet', TType.STRUCT, 33)
            self.notifiedUpdateSquareFeatureSet.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.receiveMessage))
        value = (value * 31) ^ hash(make_hashable(self.sendMessage))
        value = (value * 31) ^ hash(make_hashable(self.notifiedJoinSquareChat))
        value = (value * 31) ^ hash(make_hashable(self.notifiedInviteIntoSquareChat))
        value = (value * 31) ^ hash(make_hashable(self.notifiedLeaveSquareChat))
        value = (value * 31) ^ hash(make_hashable(self.notifiedDestroyMessage))
        value = (value * 31) ^ hash(make_hashable(self.notifiedMarkAsRead))
        value = (value * 31) ^ hash(make_hashable(self.notifiedUpdateSquareMemberProfile))
        value = (value * 31) ^ hash(make_hashable(self.notifiedKickoutFromSquare))
        value = (value * 31) ^ hash(make_hashable(self.notifiedShutdownSquare))
        value = (value * 31) ^ hash(make_hashable(self.notifiedDeleteSquareChat))
        value = (value * 31) ^ hash(make_hashable(self.notifiedUpdateSquareChatProfileName))
        value = (value * 31) ^ hash(make_hashable(self.notifiedUpdateSquareChatProfileImage))
        value = (value * 31) ^ hash(make_hashable(self.notifiedUpdateSquareStatus))
        value = (value * 31) ^ hash(make_hashable(self.notifiedUpdateSquareChatStatus))
        value = (value * 31) ^ hash(make_hashable(self.notifiedCreateSquareMember))
        value = (value * 31) ^ hash(make_hashable(self.notifiedCreateSquareChatMember))
        value = (value * 31) ^ hash(make_hashable(self.notifiedUpdateSquareMemberRelation))
        value = (value * 31) ^ hash(make_hashable(self.notifiedUpdateSquare))
        value = (value * 31) ^ hash(make_hashable(self.notifiedUpdateSquareMember))
        value = (value * 31) ^ hash(make_hashable(self.notifiedUpdateSquareChat))
        value = (value * 31) ^ hash(make_hashable(self.notificationJoinRequest))
        value = (value * 31) ^ hash(make_hashable(self.notificationJoined))
        value = (value * 31) ^ hash(make_hashable(self.notificationPromoteCoadmin))
        value = (value * 31) ^ hash(make_hashable(self.notificationPromoteAdmin))
        value = (value * 31) ^ hash(make_hashable(self.notificationDemoteMember))
        value = (value * 31) ^ hash(make_hashable(self.notificationKickedOut))
        value = (value * 31) ^ hash(make_hashable(self.notificationSquareDelete))
        value = (value * 31) ^ hash(make_hashable(self.notificationSquareChatDelete))
        value = (value * 31) ^ hash(make_hashable(self.notificationMessage))
        value = (value * 31) ^ hash(make_hashable(self.notifiedUpdateSquareChatMember))
        value = (value * 31) ^ hash(make_hashable(self.notifiedUpdateSquareAuthority))
        value = (value * 31) ^ hash(make_hashable(self.notifiedUpdateSquareFeatureSet))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareEvent(object):
    """
    Attributes:
     - createdTime
     - type
     - payload
     - syncToken
     - eventStatus
    """
    def __init__(self, createdTime=None, type=None, payload=None, syncToken=None, eventStatus=None):
        self.createdTime = createdTime
        self.type = type
        self.payload = payload
        self.syncToken = syncToken
        self.eventStatus = eventStatus

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = SquareEventType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.payload = SquareEventPayload()
                    self.payload.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.syncToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.eventStatus = SquareEventStatus(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareEvent')
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 2)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.payload is not None:
            oprot.writeFieldBegin('payload', TType.STRUCT, 4)
            self.payload.write(oprot)
            oprot.writeFieldEnd()
        if self.syncToken is not None:
            oprot.writeFieldBegin('syncToken', TType.STRING, 5)
            oprot.writeString(self.syncToken)
            oprot.writeFieldEnd()
        if self.eventStatus is not None:
            oprot.writeFieldBegin('eventStatus', TType.I32, 6)
            oprot.writeI32(self.eventStatus)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.createdTime))
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.payload))
        value = (value * 31) ^ hash(make_hashable(self.syncToken))
        value = (value * 31) ^ hash(make_hashable(self.eventStatus))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class FetchMyEventsRequest(object):
    """
    Attributes:
     - subscriptionId
     - syncToken
     - limit
     - continuationToken
    """
    def __init__(self, subscriptionId=None, syncToken=None, limit=None, continuationToken=None):
        self.subscriptionId = subscriptionId
        self.syncToken = syncToken
        self.limit = limit
        self.continuationToken = continuationToken

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.subscriptionId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.syncToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.continuationToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('FetchMyEventsRequest')
        if self.subscriptionId is not None:
            oprot.writeFieldBegin('subscriptionId', TType.I64, 1)
            oprot.writeI64(self.subscriptionId)
            oprot.writeFieldEnd()
        if self.syncToken is not None:
            oprot.writeFieldBegin('syncToken', TType.STRING, 2)
            oprot.writeString(self.syncToken)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I32, 3)
            oprot.writeI32(self.limit)
            oprot.writeFieldEnd()
        if self.continuationToken is not None:
            oprot.writeFieldBegin('continuationToken', TType.STRING, 4)
            oprot.writeString(self.continuationToken)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.subscriptionId))
        value = (value * 31) ^ hash(make_hashable(self.syncToken))
        value = (value * 31) ^ hash(make_hashable(self.limit))
        value = (value * 31) ^ hash(make_hashable(self.continuationToken))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class FetchMyEventsResponse(object):
    """
    Attributes:
     - subscription
     - events
     - syncToken
     - continuationToken
    """
    def __init__(self, subscription=None, events=None, syncToken=None, continuationToken=None):
        self.subscription = subscription
        self.events = events
        self.syncToken = syncToken
        self.continuationToken = continuationToken

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.subscription = SubscriptionState()
                    self.subscription.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.events = []
                    (_, elem280) = iprot.readListBegin()
                    for _ in range(elem280):
                        elem281 = SquareEvent()
                        elem281.read(iprot)
                        self.events.append(elem281)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.syncToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.continuationToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('FetchMyEventsResponse')
        if self.subscription is not None:
            oprot.writeFieldBegin('subscription', TType.STRUCT, 1)
            self.subscription.write(oprot)
            oprot.writeFieldEnd()
        if self.events is not None:
            oprot.writeFieldBegin('events', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.events))
            for elem282 in self.events:
                elem282.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.syncToken is not None:
            oprot.writeFieldBegin('syncToken', TType.STRING, 3)
            oprot.writeString(self.syncToken)
            oprot.writeFieldEnd()
        if self.continuationToken is not None:
            oprot.writeFieldBegin('continuationToken', TType.STRING, 4)
            oprot.writeString(self.continuationToken)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.subscription))
        value = (value * 31) ^ hash(make_hashable(self.events))
        value = (value * 31) ^ hash(make_hashable(self.syncToken))
        value = (value * 31) ^ hash(make_hashable(self.continuationToken))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class FetchSquareChatEventsRequest(object):
    """
    Attributes:
     - subscriptionId
     - squareChatMid
     - syncToken
     - limit
     - direction
    """
    def __init__(self, subscriptionId=None, squareChatMid=None, syncToken=None, limit=None, direction=None):
        self.subscriptionId = subscriptionId
        self.squareChatMid = squareChatMid
        self.syncToken = syncToken
        self.limit = limit
        self.direction = direction

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.subscriptionId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.syncToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.direction = FetchDirection(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('FetchSquareChatEventsRequest')
        if self.subscriptionId is not None:
            oprot.writeFieldBegin('subscriptionId', TType.I64, 1)
            oprot.writeI64(self.subscriptionId)
            oprot.writeFieldEnd()
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 2)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.syncToken is not None:
            oprot.writeFieldBegin('syncToken', TType.STRING, 3)
            oprot.writeString(self.syncToken)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I32, 4)
            oprot.writeI32(self.limit)
            oprot.writeFieldEnd()
        if self.direction is not None:
            oprot.writeFieldBegin('direction', TType.I32, 5)
            oprot.writeI32(self.direction)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.subscriptionId))
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.syncToken))
        value = (value * 31) ^ hash(make_hashable(self.limit))
        value = (value * 31) ^ hash(make_hashable(self.direction))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class FetchSquareChatEventsResponse(object):
    """
    Attributes:
     - subscription
     - events
     - syncToken
     - continuationToken
    """
    def __init__(self, subscription=None, events=None, syncToken=None, continuationToken=None):
        self.subscription = subscription
        self.events = events
        self.syncToken = syncToken
        self.continuationToken = continuationToken

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.subscription = SubscriptionState()
                    self.subscription.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.events = []
                    (_, elem283) = iprot.readListBegin()
                    for _ in range(elem283):
                        elem284 = SquareEvent()
                        elem284.read(iprot)
                        self.events.append(elem284)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.syncToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.continuationToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('FetchSquareChatEventsResponse')
        if self.subscription is not None:
            oprot.writeFieldBegin('subscription', TType.STRUCT, 1)
            self.subscription.write(oprot)
            oprot.writeFieldEnd()
        if self.events is not None:
            oprot.writeFieldBegin('events', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.events))
            for elem285 in self.events:
                elem285.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.syncToken is not None:
            oprot.writeFieldBegin('syncToken', TType.STRING, 3)
            oprot.writeString(self.syncToken)
            oprot.writeFieldEnd()
        if self.continuationToken is not None:
            oprot.writeFieldBegin('continuationToken', TType.STRING, 4)
            oprot.writeString(self.continuationToken)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.subscription))
        value = (value * 31) ^ hash(make_hashable(self.events))
        value = (value * 31) ^ hash(make_hashable(self.syncToken))
        value = (value * 31) ^ hash(make_hashable(self.continuationToken))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class InviteToSquareRequest(object):
    """
    Attributes:
     - squareMid
     - invitees
     - squareChatMid
    """
    def __init__(self, squareMid=None, invitees=None, squareChatMid=None):
        self.squareMid = squareMid
        self.invitees = invitees
        self.squareChatMid = squareChatMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.invitees = []
                    (_, elem286) = iprot.readListBegin()
                    for _ in range(elem286):
                        elem287 = iprot.readString()
                        self.invitees.append(elem287)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('InviteToSquareRequest')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 2)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.invitees is not None:
            oprot.writeFieldBegin('invitees', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.invitees))
            for elem288 in self.invitees:
                oprot.writeString(elem288)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 4)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.invitees))
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class InviteToSquareResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('InviteToSquareResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class InviteToSquareChatRequest(object):
    """
    Attributes:
     - inviteeMids
     - squareChatMid
    """
    def __init__(self, inviteeMids=None, squareChatMid=None):
        self.inviteeMids = inviteeMids
        self.squareChatMid = squareChatMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.inviteeMids = []
                    (_, elem289) = iprot.readListBegin()
                    for _ in range(elem289):
                        elem290 = iprot.readString()
                        self.inviteeMids.append(elem290)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('InviteToSquareChatRequest')
        if self.inviteeMids is not None:
            oprot.writeFieldBegin('inviteeMids', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.inviteeMids))
            for elem291 in self.inviteeMids:
                oprot.writeString(elem291)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 2)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.inviteeMids))
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class InviteToSquareChatResponse(object):
    """
    Attributes:
     - inviteeMids
    """
    def __init__(self, inviteeMids=None):
        self.inviteeMids = inviteeMids

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.inviteeMids = []
                    (_, elem292) = iprot.readListBegin()
                    for _ in range(elem292):
                        elem293 = iprot.readString()
                        self.inviteeMids.append(elem293)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('InviteToSquareChatResponse')
        if self.inviteeMids is not None:
            oprot.writeFieldBegin('inviteeMids', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.inviteeMids))
            for elem294 in self.inviteeMids:
                oprot.writeString(elem294)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.inviteeMids))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareMemberRequest(object):
    """
    Attributes:
     - squareMemberMid
    """
    def __init__(self, squareMemberMid=None):
        self.squareMemberMid = squareMemberMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareMemberMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareMemberRequest')
        if self.squareMemberMid is not None:
            oprot.writeFieldBegin('squareMemberMid', TType.STRING, 1)
            oprot.writeString(self.squareMemberMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMemberMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareMemberResponse(object):
    """
    Attributes:
     - squareMember
     - relation
     - oneOnOneChatMid
    """
    def __init__(self, squareMember=None, relation=None, oneOnOneChatMid=None):
        self.squareMember = squareMember
        self.relation = relation
        self.oneOnOneChatMid = oneOnOneChatMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.squareMember = SquareMember()
                    self.squareMember.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.relation = SquareMemberRelation()
                    self.relation.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.oneOnOneChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareMemberResponse')
        if self.squareMember is not None:
            oprot.writeFieldBegin('squareMember', TType.STRUCT, 1)
            self.squareMember.write(oprot)
            oprot.writeFieldEnd()
        if self.relation is not None:
            oprot.writeFieldBegin('relation', TType.STRUCT, 2)
            self.relation.write(oprot)
            oprot.writeFieldEnd()
        if self.oneOnOneChatMid is not None:
            oprot.writeFieldBegin('oneOnOneChatMid', TType.STRING, 3)
            oprot.writeString(self.oneOnOneChatMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMember))
        value = (value * 31) ^ hash(make_hashable(self.relation))
        value = (value * 31) ^ hash(make_hashable(self.oneOnOneChatMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareMembersRequest(object):
    """
    Attributes:
     - mids
    """
    def __init__(self, mids=None):
        self.mids = mids

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.SET:
                    self.mids = set()
                    (_, elem295) = iprot.readSetBegin()
                    for _ in range(elem295):
                        elem296 = iprot.readString()
                        self.mids.add(elem296)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareMembersRequest')
        if self.mids is not None:
            oprot.writeFieldBegin('mids', TType.SET, 2)
            oprot.writeSetBegin(TType.STRING, len(self.mids))
            for elem297 in self.mids:
                oprot.writeString(elem297)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mids))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareMembersResponse(object):
    """
    Attributes:
     - members
    """
    def __init__(self, members=None):
        self.members = members

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.members = SquareMember()
                    self.members.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareMembersResponse')
        if self.members is not None:
            oprot.writeFieldBegin('members', TType.STRUCT, 1)
            self.members.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.members))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareMemberRelationsRequest(object):
    """
    Attributes:
     - state
     - continuationToken
     - limit
    """
    def __init__(self, state=None, continuationToken=None, limit=None):
        self.state = state
        self.continuationToken = continuationToken
        self.limit = limit

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.I32:
                    self.state = SquareMemberRelationState(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.continuationToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareMemberRelationsRequest')
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 2)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.continuationToken is not None:
            oprot.writeFieldBegin('continuationToken', TType.STRING, 3)
            oprot.writeString(self.continuationToken)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I32, 4)
            oprot.writeI32(self.limit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.state))
        value = (value * 31) ^ hash(make_hashable(self.continuationToken))
        value = (value * 31) ^ hash(make_hashable(self.limit))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareMemberRelationsResponse(object):
    """
    Attributes:
     - squareMembers
     - relations
     - continuationToken
    """
    def __init__(self, squareMembers=None, relations=None, continuationToken=None):
        self.squareMembers = squareMembers
        self.relations = relations
        self.continuationToken = continuationToken

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.squareMembers = []
                    (_, elem298) = iprot.readListBegin()
                    for _ in range(elem298):
                        elem299 = SquareMember()
                        elem299.read(iprot)
                        self.squareMembers.append(elem299)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.relations = {}
                    (_, _, elem300) = iprot.readMapBegin()
                    for _ in range(elem300):
                        elem302 = iprot.readString()
                        elem301 = SquareMemberRelation()
                        elem301.read(iprot)
                        self.relations[elem302] = elem301
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.continuationToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareMemberRelationsResponse')
        if self.squareMembers is not None:
            oprot.writeFieldBegin('squareMembers', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.squareMembers))
            for elem303 in self.squareMembers:
                elem303.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.relations is not None:
            oprot.writeFieldBegin('relations', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.relations))
            for elem305, elem304 in self.relations.items():
                oprot.writeString(elem305)
                elem304.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.continuationToken is not None:
            oprot.writeFieldBegin('continuationToken', TType.STRING, 3)
            oprot.writeString(self.continuationToken)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMembers))
        value = (value * 31) ^ hash(make_hashable(self.relations))
        value = (value * 31) ^ hash(make_hashable(self.continuationToken))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareMemberRelationRequest(object):
    """
    Attributes:
     - squareMid
     - targetSquareMemberMid
    """
    def __init__(self, squareMid=None, targetSquareMemberMid=None):
        self.squareMid = squareMid
        self.targetSquareMemberMid = targetSquareMemberMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.targetSquareMemberMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareMemberRelationRequest')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 2)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.targetSquareMemberMid is not None:
            oprot.writeFieldBegin('targetSquareMemberMid', TType.STRING, 3)
            oprot.writeString(self.targetSquareMemberMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.targetSquareMemberMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareMemberRelationResponse(object):
    """
    Attributes:
     - squareMid
     - targetSquareMemberMid
     - relation
    """
    def __init__(self, squareMid=None, targetSquareMemberMid=None, relation=None):
        self.squareMid = squareMid
        self.targetSquareMemberMid = targetSquareMemberMid
        self.relation = relation

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.targetSquareMemberMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.relation = SquareMemberRelation()
                    self.relation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareMemberRelationResponse')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 1)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.targetSquareMemberMid is not None:
            oprot.writeFieldBegin('targetSquareMemberMid', TType.STRING, 2)
            oprot.writeString(self.targetSquareMemberMid)
            oprot.writeFieldEnd()
        if self.relation is not None:
            oprot.writeFieldBegin('relation', TType.STRUCT, 3)
            self.relation.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.targetSquareMemberMid))
        value = (value * 31) ^ hash(make_hashable(self.relation))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Category(object):
    """
    Attributes:
     - id
     - name
    """
    def __init__(self, id=None, name=None):
        self.id = id
        self.name = name

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Category')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.id))
        value = (value * 31) ^ hash(make_hashable(self.name))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareCategoriesRequest(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareCategoriesRequest')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareCategoriesResponse(object):
    """
    Attributes:
     - categoryList
    """
    def __init__(self, categoryList=None):
        self.categoryList = categoryList

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.categoryList = []
                    (_, elem306) = iprot.readListBegin()
                    for _ in range(elem306):
                        elem307 = Category()
                        elem307.read(iprot)
                        self.categoryList.append(elem307)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareCategoriesResponse')
        if self.categoryList is not None:
            oprot.writeFieldBegin('categoryList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.categoryList))
            for elem308 in self.categoryList:
                elem308.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.categoryList))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UpdateSquareRequest(object):
    """
    Attributes:
     - updatedAttrs
     - square
    """
    def __init__(self, updatedAttrs=None, square=None):
        self.updatedAttrs = updatedAttrs
        self.square = square

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.SET:
                    self.updatedAttrs = set()
                    (_, elem309) = iprot.readSetBegin()
                    for _ in range(elem309):
                        elem310 = SquareAttribute(iprot.readI32())
                        self.updatedAttrs.add(elem310)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.square = Square()
                    self.square.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UpdateSquareRequest')
        if self.updatedAttrs is not None:
            oprot.writeFieldBegin('updatedAttrs', TType.SET, 2)
            oprot.writeSetBegin(TType.I32, len(self.updatedAttrs))
            for elem311 in self.updatedAttrs:
                oprot.writeI32(elem311)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.square is not None:
            oprot.writeFieldBegin('square', TType.STRUCT, 3)
            self.square.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.updatedAttrs))
        value = (value * 31) ^ hash(make_hashable(self.square))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UpdateSquareResponse(object):
    """
    Attributes:
     - updatedAttrs
     - square
    """
    def __init__(self, updatedAttrs=None, square=None):
        self.updatedAttrs = updatedAttrs
        self.square = square

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.SET:
                    self.updatedAttrs = set()
                    (_, elem312) = iprot.readSetBegin()
                    for _ in range(elem312):
                        elem313 = SquareAttribute(iprot.readI32())
                        self.updatedAttrs.add(elem313)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.square = Square()
                    self.square.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UpdateSquareResponse')
        if self.updatedAttrs is not None:
            oprot.writeFieldBegin('updatedAttrs', TType.SET, 1)
            oprot.writeSetBegin(TType.I32, len(self.updatedAttrs))
            for elem314 in self.updatedAttrs:
                oprot.writeI32(elem314)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.square is not None:
            oprot.writeFieldBegin('square', TType.STRUCT, 2)
            self.square.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.updatedAttrs))
        value = (value * 31) ^ hash(make_hashable(self.square))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SearchSquaresRequest(object):
    """
    Attributes:
     - query
     - continuationToken
     - limit
    """
    def __init__(self, query=None, continuationToken=None, limit=None):
        self.query = query
        self.continuationToken = continuationToken
        self.limit = limit

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.query = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.continuationToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SearchSquaresRequest')
        if self.query is not None:
            oprot.writeFieldBegin('query', TType.STRING, 2)
            oprot.writeString(self.query)
            oprot.writeFieldEnd()
        if self.continuationToken is not None:
            oprot.writeFieldBegin('continuationToken', TType.STRING, 3)
            oprot.writeString(self.continuationToken)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I32, 4)
            oprot.writeI32(self.limit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.query))
        value = (value * 31) ^ hash(make_hashable(self.continuationToken))
        value = (value * 31) ^ hash(make_hashable(self.limit))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SearchSquaresResponse(object):
    """
    Attributes:
     - squares
     - squareStatuses
     - myMemberships
     - continuationToken
     - noteStatuses
    """
    def __init__(self, squares=None, squareStatuses=None, myMemberships=None, continuationToken=None, noteStatuses=None):
        self.squares = squares
        self.squareStatuses = squareStatuses
        self.myMemberships = myMemberships
        self.continuationToken = continuationToken
        self.noteStatuses = noteStatuses

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.squares = []
                    (_, elem315) = iprot.readListBegin()
                    for _ in range(elem315):
                        elem316 = Square()
                        elem316.read(iprot)
                        self.squares.append(elem316)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.squareStatuses = {}
                    (_, _, elem317) = iprot.readMapBegin()
                    for _ in range(elem317):
                        elem319 = iprot.readString()
                        elem318 = SquareStatus()
                        elem318.read(iprot)
                        self.squareStatuses[elem319] = elem318
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.myMemberships = {}
                    (_, _, elem320) = iprot.readMapBegin()
                    for _ in range(elem320):
                        elem322 = iprot.readString()
                        elem321 = SquareMember()
                        elem321.read(iprot)
                        self.myMemberships[elem322] = elem321
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.continuationToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.noteStatuses = {}
                    (_, _, elem323) = iprot.readMapBegin()
                    for _ in range(elem323):
                        elem325 = iprot.readString()
                        elem324 = NoteStatus()
                        elem324.read(iprot)
                        self.noteStatuses[elem325] = elem324
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SearchSquaresResponse')
        if self.squares is not None:
            oprot.writeFieldBegin('squares', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.squares))
            for elem326 in self.squares:
                elem326.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.squareStatuses is not None:
            oprot.writeFieldBegin('squareStatuses', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.squareStatuses))
            for elem328, elem327 in self.squareStatuses.items():
                oprot.writeString(elem328)
                elem327.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.myMemberships is not None:
            oprot.writeFieldBegin('myMemberships', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.myMemberships))
            for elem330, elem329 in self.myMemberships.items():
                oprot.writeString(elem330)
                elem329.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.continuationToken is not None:
            oprot.writeFieldBegin('continuationToken', TType.STRING, 4)
            oprot.writeString(self.continuationToken)
            oprot.writeFieldEnd()
        if self.noteStatuses is not None:
            oprot.writeFieldBegin('noteStatuses', TType.MAP, 5)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.noteStatuses))
            for elem332, elem331 in self.noteStatuses.items():
                oprot.writeString(elem332)
                elem331.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squares))
        value = (value * 31) ^ hash(make_hashable(self.squareStatuses))
        value = (value * 31) ^ hash(make_hashable(self.myMemberships))
        value = (value * 31) ^ hash(make_hashable(self.continuationToken))
        value = (value * 31) ^ hash(make_hashable(self.noteStatuses))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareFeatureSetRequest(object):
    """
    Attributes:
     - squareMid
    """
    def __init__(self, squareMid=None):
        self.squareMid = squareMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareFeatureSetRequest')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 2)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareFeatureSetResponse(object):
    """
    Attributes:
     - squareFeatureSet
    """
    def __init__(self, squareFeatureSet=None):
        self.squareFeatureSet = squareFeatureSet

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.squareFeatureSet = SquareFeatureSet()
                    self.squareFeatureSet.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareFeatureSetResponse')
        if self.squareFeatureSet is not None:
            oprot.writeFieldBegin('squareFeatureSet', TType.STRUCT, 1)
            self.squareFeatureSet.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareFeatureSet))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UpdateSquareFeatureSetRequest(object):
    """
    Attributes:
     - updateAttributes
     - squareFeatureSet
    """
    def __init__(self, updateAttributes=None, squareFeatureSet=None):
        self.updateAttributes = updateAttributes
        self.squareFeatureSet = squareFeatureSet

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.SET:
                    self.updateAttributes = set()
                    (_, elem333) = iprot.readSetBegin()
                    for _ in range(elem333):
                        elem334 = SquareFeatureSetAttribute(iprot.readI32())
                        self.updateAttributes.add(elem334)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.squareFeatureSet = SquareFeatureSet()
                    self.squareFeatureSet.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UpdateSquareFeatureSetRequest')
        if self.updateAttributes is not None:
            oprot.writeFieldBegin('updateAttributes', TType.SET, 2)
            oprot.writeSetBegin(TType.I32, len(self.updateAttributes))
            for elem335 in self.updateAttributes:
                oprot.writeI32(elem335)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.squareFeatureSet is not None:
            oprot.writeFieldBegin('squareFeatureSet', TType.STRUCT, 3)
            self.squareFeatureSet.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.updateAttributes))
        value = (value * 31) ^ hash(make_hashable(self.squareFeatureSet))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UpdateSquareFeatureSetResponse(object):
    """
    Attributes:
     - updateAttributes
     - squareFeatureSet
    """
    def __init__(self, updateAttributes=None, squareFeatureSet=None):
        self.updateAttributes = updateAttributes
        self.squareFeatureSet = squareFeatureSet

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.SET:
                    self.updateAttributes = set()
                    (_, elem336) = iprot.readSetBegin()
                    for _ in range(elem336):
                        elem337 = SquareFeatureSetAttribute(iprot.readI32())
                        self.updateAttributes.add(elem337)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.squareFeatureSet = SquareFeatureSet()
                    self.squareFeatureSet.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UpdateSquareFeatureSetResponse')
        if self.updateAttributes is not None:
            oprot.writeFieldBegin('updateAttributes', TType.SET, 1)
            oprot.writeSetBegin(TType.I32, len(self.updateAttributes))
            for elem338 in self.updateAttributes:
                oprot.writeI32(elem338)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.squareFeatureSet is not None:
            oprot.writeFieldBegin('squareFeatureSet', TType.STRUCT, 2)
            self.squareFeatureSet.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.updateAttributes))
        value = (value * 31) ^ hash(make_hashable(self.squareFeatureSet))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UpdateSquareMemberRequest(object):
    """
    Attributes:
     - updatedAttrs
     - updatedPreferenceAttrs
     - squareMember
    """
    def __init__(self, updatedAttrs=None, updatedPreferenceAttrs=None, squareMember=None):
        self.updatedAttrs = updatedAttrs
        self.updatedPreferenceAttrs = updatedPreferenceAttrs
        self.squareMember = squareMember

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.SET:
                    self.updatedAttrs = set()
                    (_, elem339) = iprot.readSetBegin()
                    for _ in range(elem339):
                        elem340 = SquareMemberAttribute(iprot.readI32())
                        self.updatedAttrs.add(elem340)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.updatedPreferenceAttrs = set()
                    (_, elem341) = iprot.readSetBegin()
                    for _ in range(elem341):
                        elem342 = SquarePreferenceAttribute(iprot.readI32())
                        self.updatedPreferenceAttrs.add(elem342)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.squareMember = SquareMember()
                    self.squareMember.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UpdateSquareMemberRequest')
        if self.updatedAttrs is not None:
            oprot.writeFieldBegin('updatedAttrs', TType.SET, 2)
            oprot.writeSetBegin(TType.I32, len(self.updatedAttrs))
            for elem343 in self.updatedAttrs:
                oprot.writeI32(elem343)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.updatedPreferenceAttrs is not None:
            oprot.writeFieldBegin('updatedPreferenceAttrs', TType.SET, 3)
            oprot.writeSetBegin(TType.I32, len(self.updatedPreferenceAttrs))
            for elem344 in self.updatedPreferenceAttrs:
                oprot.writeI32(elem344)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.squareMember is not None:
            oprot.writeFieldBegin('squareMember', TType.STRUCT, 4)
            self.squareMember.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.updatedAttrs))
        value = (value * 31) ^ hash(make_hashable(self.updatedPreferenceAttrs))
        value = (value * 31) ^ hash(make_hashable(self.squareMember))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UpdateSquareMemberResponse(object):
    """
    Attributes:
     - updatedAttrs
     - squareMember
     - updatedPreferenceAttrs
    """
    def __init__(self, updatedAttrs=None, squareMember=None, updatedPreferenceAttrs=None):
        self.updatedAttrs = updatedAttrs
        self.squareMember = squareMember
        self.updatedPreferenceAttrs = updatedPreferenceAttrs

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.SET:
                    self.updatedAttrs = set()
                    (_, elem345) = iprot.readSetBegin()
                    for _ in range(elem345):
                        elem346 = SquareMemberAttribute(iprot.readI32())
                        self.updatedAttrs.add(elem346)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.squareMember = SquareMember()
                    self.squareMember.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.updatedPreferenceAttrs = set()
                    (_, elem347) = iprot.readSetBegin()
                    for _ in range(elem347):
                        elem348 = SquarePreferenceAttribute(iprot.readI32())
                        self.updatedPreferenceAttrs.add(elem348)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UpdateSquareMemberResponse')
        if self.updatedAttrs is not None:
            oprot.writeFieldBegin('updatedAttrs', TType.SET, 1)
            oprot.writeSetBegin(TType.I32, len(self.updatedAttrs))
            for elem349 in self.updatedAttrs:
                oprot.writeI32(elem349)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.squareMember is not None:
            oprot.writeFieldBegin('squareMember', TType.STRUCT, 2)
            self.squareMember.write(oprot)
            oprot.writeFieldEnd()
        if self.updatedPreferenceAttrs is not None:
            oprot.writeFieldBegin('updatedPreferenceAttrs', TType.SET, 3)
            oprot.writeSetBegin(TType.I32, len(self.updatedPreferenceAttrs))
            for elem350 in self.updatedPreferenceAttrs:
                oprot.writeI32(elem350)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.updatedAttrs))
        value = (value * 31) ^ hash(make_hashable(self.squareMember))
        value = (value * 31) ^ hash(make_hashable(self.updatedPreferenceAttrs))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UpdateSquareMembersRequest(object):
    """
    Attributes:
     - updatedAttrs
     - members
    """
    def __init__(self, updatedAttrs=None, members=None):
        self.updatedAttrs = updatedAttrs
        self.members = members

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.SET:
                    self.updatedAttrs = set()
                    (_, elem351) = iprot.readSetBegin()
                    for _ in range(elem351):
                        elem352 = SquareMemberAttribute(iprot.readI32())
                        self.updatedAttrs.add(elem352)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.members = []
                    (_, elem353) = iprot.readListBegin()
                    for _ in range(elem353):
                        elem354 = SquareMember()
                        elem354.read(iprot)
                        self.members.append(elem354)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UpdateSquareMembersRequest')
        if self.updatedAttrs is not None:
            oprot.writeFieldBegin('updatedAttrs', TType.SET, 2)
            oprot.writeSetBegin(TType.I32, len(self.updatedAttrs))
            for elem355 in self.updatedAttrs:
                oprot.writeI32(elem355)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.members is not None:
            oprot.writeFieldBegin('members', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.members))
            for elem356 in self.members:
                elem356.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.updatedAttrs))
        value = (value * 31) ^ hash(make_hashable(self.members))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UpdateSquareMembersResponse(object):
    """
    Attributes:
     - updatedAttrs
     - editor
     - members
    """
    def __init__(self, updatedAttrs=None, editor=None, members=None):
        self.updatedAttrs = updatedAttrs
        self.editor = editor
        self.members = members

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.SET:
                    self.updatedAttrs = set()
                    (_, elem357) = iprot.readSetBegin()
                    for _ in range(elem357):
                        elem358 = SquareMemberAttribute(iprot.readI32())
                        self.updatedAttrs.add(elem358)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.editor = SquareMember()
                    self.editor.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.members = {}
                    (_, _, elem359) = iprot.readMapBegin()
                    for _ in range(elem359):
                        elem361 = iprot.readString()
                        elem360 = SquareMember()
                        elem360.read(iprot)
                        self.members[elem361] = elem360
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UpdateSquareMembersResponse')
        if self.updatedAttrs is not None:
            oprot.writeFieldBegin('updatedAttrs', TType.SET, 1)
            oprot.writeSetBegin(TType.I32, len(self.updatedAttrs))
            for elem362 in self.updatedAttrs:
                oprot.writeI32(elem362)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.editor is not None:
            oprot.writeFieldBegin('editor', TType.STRUCT, 2)
            self.editor.write(oprot)
            oprot.writeFieldEnd()
        if self.members is not None:
            oprot.writeFieldBegin('members', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.members))
            for elem364, elem363 in self.members.items():
                oprot.writeString(elem364)
                elem363.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.updatedAttrs))
        value = (value * 31) ^ hash(make_hashable(self.editor))
        value = (value * 31) ^ hash(make_hashable(self.members))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class RejectSquareMembersRequest(object):
    """
    Attributes:
     - squareMid
     - requestedMemberMids
    """
    def __init__(self, squareMid=None, requestedMemberMids=None):
        self.squareMid = squareMid
        self.requestedMemberMids = requestedMemberMids

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.requestedMemberMids = []
                    (_, elem365) = iprot.readListBegin()
                    for _ in range(elem365):
                        elem366 = iprot.readString()
                        self.requestedMemberMids.append(elem366)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('RejectSquareMembersRequest')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 2)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.requestedMemberMids is not None:
            oprot.writeFieldBegin('requestedMemberMids', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.requestedMemberMids))
            for elem367 in self.requestedMemberMids:
                oprot.writeString(elem367)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.requestedMemberMids))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class RejectSquareMembersResponse(object):
    """
    Attributes:
     - rejectedMembers
     - status
    """
    def __init__(self, rejectedMembers=None, status=None):
        self.rejectedMembers = rejectedMembers
        self.status = status

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.rejectedMembers = []
                    (_, elem368) = iprot.readListBegin()
                    for _ in range(elem368):
                        elem369 = SquareMember()
                        elem369.read(iprot)
                        self.rejectedMembers.append(elem369)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.status = SquareStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('RejectSquareMembersResponse')
        if self.rejectedMembers is not None:
            oprot.writeFieldBegin('rejectedMembers', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.rejectedMembers))
            for elem370 in self.rejectedMembers:
                elem370.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 2)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.rejectedMembers))
        value = (value * 31) ^ hash(make_hashable(self.status))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class RemoveSubscriptionsRequest(object):
    """
    Attributes:
     - unsubscriptions
    """
    def __init__(self, unsubscriptions=None):
        self.unsubscriptions = unsubscriptions

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.LIST:
                    self.unsubscriptions = []
                    (_, elem371) = iprot.readListBegin()
                    for _ in range(elem371):
                        elem372 = iprot.readI64()
                        self.unsubscriptions.append(elem372)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('RemoveSubscriptionsRequest')
        if self.unsubscriptions is not None:
            oprot.writeFieldBegin('unsubscriptions', TType.LIST, 2)
            oprot.writeListBegin(TType.I64, len(self.unsubscriptions))
            for elem373 in self.unsubscriptions:
                oprot.writeI64(elem373)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.unsubscriptions))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class RemoveSubscriptionsResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('RemoveSubscriptionsResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class RefreshSubscriptionsRequest(object):
    """
    Attributes:
     - subscriptions
    """
    def __init__(self, subscriptions=None):
        self.subscriptions = subscriptions

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.LIST:
                    self.subscriptions = []
                    (_, elem374) = iprot.readListBegin()
                    for _ in range(elem374):
                        elem375 = iprot.readI64()
                        self.subscriptions.append(elem375)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('RefreshSubscriptionsRequest')
        if self.subscriptions is not None:
            oprot.writeFieldBegin('subscriptions', TType.LIST, 2)
            oprot.writeListBegin(TType.I64, len(self.subscriptions))
            for elem376 in self.subscriptions:
                oprot.writeI64(elem376)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.subscriptions))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class RefreshSubscriptionsResponse(object):
    """
    Attributes:
     - ttlMillis
     - subscriptionStates
    """
    def __init__(self, ttlMillis=None, subscriptionStates=None):
        self.ttlMillis = ttlMillis
        self.subscriptionStates = subscriptionStates

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ttlMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.subscriptionStates = {}
                    (_, _, elem377) = iprot.readMapBegin()
                    for _ in range(elem377):
                        elem379 = iprot.readI64()
                        elem378 = SubscriptionState()
                        elem378.read(iprot)
                        self.subscriptionStates[elem379] = elem378
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('RefreshSubscriptionsResponse')
        if self.ttlMillis is not None:
            oprot.writeFieldBegin('ttlMillis', TType.I64, 1)
            oprot.writeI64(self.ttlMillis)
            oprot.writeFieldEnd()
        if self.subscriptionStates is not None:
            oprot.writeFieldBegin('subscriptionStates', TType.MAP, 2)
            oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.subscriptionStates))
            for elem381, elem380 in self.subscriptionStates.items():
                oprot.writeI64(elem381)
                elem380.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.ttlMillis))
        value = (value * 31) ^ hash(make_hashable(self.subscriptionStates))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UpdateSquareChatRequest(object):
    """
    Attributes:
     - updatedAttrs
     - squareChat
    """
    def __init__(self, updatedAttrs=None, squareChat=None):
        self.updatedAttrs = updatedAttrs
        self.squareChat = squareChat

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.SET:
                    self.updatedAttrs = set()
                    (_, elem382) = iprot.readSetBegin()
                    for _ in range(elem382):
                        elem383 = SquareChatAttribute(iprot.readI32())
                        self.updatedAttrs.add(elem383)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.squareChat = SquareChat()
                    self.squareChat.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UpdateSquareChatRequest')
        if self.updatedAttrs is not None:
            oprot.writeFieldBegin('updatedAttrs', TType.SET, 2)
            oprot.writeSetBegin(TType.I32, len(self.updatedAttrs))
            for elem384 in self.updatedAttrs:
                oprot.writeI32(elem384)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.squareChat is not None:
            oprot.writeFieldBegin('squareChat', TType.STRUCT, 3)
            self.squareChat.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.updatedAttrs))
        value = (value * 31) ^ hash(make_hashable(self.squareChat))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UpdateSquareChatResponse(object):
    """
    Attributes:
     - updatedAttrs
     - squareChat
    """
    def __init__(self, updatedAttrs=None, squareChat=None):
        self.updatedAttrs = updatedAttrs
        self.squareChat = squareChat

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.SET:
                    self.updatedAttrs = set()
                    (_, elem385) = iprot.readSetBegin()
                    for _ in range(elem385):
                        elem386 = SquareChatAttribute(iprot.readI32())
                        self.updatedAttrs.add(elem386)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.squareChat = SquareChat()
                    self.squareChat.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UpdateSquareChatResponse')
        if self.updatedAttrs is not None:
            oprot.writeFieldBegin('updatedAttrs', TType.SET, 1)
            oprot.writeSetBegin(TType.I32, len(self.updatedAttrs))
            for elem387 in self.updatedAttrs:
                oprot.writeI32(elem387)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.squareChat is not None:
            oprot.writeFieldBegin('squareChat', TType.STRUCT, 2)
            self.squareChat.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.updatedAttrs))
        value = (value * 31) ^ hash(make_hashable(self.squareChat))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class DeleteSquareChatRequest(object):
    """
    Attributes:
     - squareChatMid
     - revision
    """
    def __init__(self, squareChatMid=None, revision=None):
        self.squareChatMid = squareChatMid
        self.revision = revision

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('DeleteSquareChatRequest')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 2)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 3)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.revision))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class DeleteSquareChatResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('DeleteSquareChatResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UpdateSquareChatMemberRequest(object):
    """
    Attributes:
     - updatedAttrs
     - chatMember
    """
    def __init__(self, updatedAttrs=None, chatMember=None):
        self.updatedAttrs = updatedAttrs
        self.chatMember = chatMember

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.SET:
                    self.updatedAttrs = set()
                    (_, elem388) = iprot.readSetBegin()
                    for _ in range(elem388):
                        elem389 = SquareChatMemberAttribute(iprot.readI32())
                        self.updatedAttrs.add(elem389)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.chatMember = SquareChatMember()
                    self.chatMember.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UpdateSquareChatMemberRequest')
        if self.updatedAttrs is not None:
            oprot.writeFieldBegin('updatedAttrs', TType.SET, 2)
            oprot.writeSetBegin(TType.I32, len(self.updatedAttrs))
            for elem390 in self.updatedAttrs:
                oprot.writeI32(elem390)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.chatMember is not None:
            oprot.writeFieldBegin('chatMember', TType.STRUCT, 3)
            self.chatMember.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.updatedAttrs))
        value = (value * 31) ^ hash(make_hashable(self.chatMember))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UpdateSquareChatMemberResponse(object):
    """
    Attributes:
     - updatedChatMember
    """
    def __init__(self, updatedChatMember=None):
        self.updatedChatMember = updatedChatMember

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.updatedChatMember = SquareChatMember()
                    self.updatedChatMember.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UpdateSquareChatMemberResponse')
        if self.updatedChatMember is not None:
            oprot.writeFieldBegin('updatedChatMember', TType.STRUCT, 1)
            self.updatedChatMember.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.updatedChatMember))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UpdateSquareAuthorityRequest(object):
    """
    Attributes:
     - updateAttributes
     - authority
    """
    def __init__(self, updateAttributes=None, authority=None):
        self.updateAttributes = updateAttributes
        self.authority = authority

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.SET:
                    self.updateAttributes = set()
                    (_, elem391) = iprot.readSetBegin()
                    for _ in range(elem391):
                        elem392 = SquareAuthorityAttribute(iprot.readI32())
                        self.updateAttributes.add(elem392)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.authority = SquareAuthority()
                    self.authority.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UpdateSquareAuthorityRequest')
        if self.updateAttributes is not None:
            oprot.writeFieldBegin('updateAttributes', TType.SET, 2)
            oprot.writeSetBegin(TType.I32, len(self.updateAttributes))
            for elem393 in self.updateAttributes:
                oprot.writeI32(elem393)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.authority is not None:
            oprot.writeFieldBegin('authority', TType.STRUCT, 3)
            self.authority.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.updateAttributes))
        value = (value * 31) ^ hash(make_hashable(self.authority))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UpdateSquareAuthorityResponse(object):
    """
    Attributes:
     - updatdAttributes
     - authority
    """
    def __init__(self, updatdAttributes=None, authority=None):
        self.updatdAttributes = updatdAttributes
        self.authority = authority

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.SET:
                    self.updatdAttributes = set()
                    (_, elem394) = iprot.readSetBegin()
                    for _ in range(elem394):
                        elem395 = SquareAuthorityAttribute(iprot.readI32())
                        self.updatdAttributes.add(elem395)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.authority = SquareAuthority()
                    self.authority.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UpdateSquareAuthorityResponse')
        if self.updatdAttributes is not None:
            oprot.writeFieldBegin('updatdAttributes', TType.SET, 1)
            oprot.writeSetBegin(TType.I32, len(self.updatdAttributes))
            for elem396 in self.updatdAttributes:
                oprot.writeI32(elem396)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.authority is not None:
            oprot.writeFieldBegin('authority', TType.STRUCT, 2)
            self.authority.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.updatdAttributes))
        value = (value * 31) ^ hash(make_hashable(self.authority))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UpdateSquareMemberRelationRequest(object):
    """
    Attributes:
     - squareMid
     - targetSquareMemberMid
     - updatedAttrs
     - relation
    """
    def __init__(self, squareMid=None, targetSquareMemberMid=None, updatedAttrs=None, relation=None):
        self.squareMid = squareMid
        self.targetSquareMemberMid = targetSquareMemberMid
        self.updatedAttrs = updatedAttrs
        self.relation = relation

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.targetSquareMemberMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.SET:
                    self.updatedAttrs = set()
                    (_, elem397) = iprot.readSetBegin()
                    for _ in range(elem397):
                        elem398 = SquareMemberRelationAttribute(iprot.readI32())
                        self.updatedAttrs.add(elem398)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.relation = SquareMemberRelation()
                    self.relation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UpdateSquareMemberRelationRequest')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 2)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.targetSquareMemberMid is not None:
            oprot.writeFieldBegin('targetSquareMemberMid', TType.STRING, 3)
            oprot.writeString(self.targetSquareMemberMid)
            oprot.writeFieldEnd()
        if self.updatedAttrs is not None:
            oprot.writeFieldBegin('updatedAttrs', TType.SET, 4)
            oprot.writeSetBegin(TType.I32, len(self.updatedAttrs))
            for elem399 in self.updatedAttrs:
                oprot.writeI32(elem399)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.relation is not None:
            oprot.writeFieldBegin('relation', TType.STRUCT, 5)
            self.relation.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.targetSquareMemberMid))
        value = (value * 31) ^ hash(make_hashable(self.updatedAttrs))
        value = (value * 31) ^ hash(make_hashable(self.relation))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UpdateSquareMemberRelationResponse(object):
    """
    Attributes:
     - squareMid
     - targetSquareMemberMid
     - updatedAttrs
     - relation
    """
    def __init__(self, squareMid=None, targetSquareMemberMid=None, updatedAttrs=None, relation=None):
        self.squareMid = squareMid
        self.targetSquareMemberMid = targetSquareMemberMid
        self.updatedAttrs = updatedAttrs
        self.relation = relation

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.targetSquareMemberMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.updatedAttrs = set()
                    (_, elem400) = iprot.readSetBegin()
                    for _ in range(elem400):
                        elem401 = SquareMemberRelationAttribute(iprot.readI32())
                        self.updatedAttrs.add(elem401)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.relation = SquareMemberRelation()
                    self.relation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UpdateSquareMemberRelationResponse')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 1)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.targetSquareMemberMid is not None:
            oprot.writeFieldBegin('targetSquareMemberMid', TType.STRING, 2)
            oprot.writeString(self.targetSquareMemberMid)
            oprot.writeFieldEnd()
        if self.updatedAttrs is not None:
            oprot.writeFieldBegin('updatedAttrs', TType.SET, 3)
            oprot.writeSetBegin(TType.I32, len(self.updatedAttrs))
            for elem402 in self.updatedAttrs:
                oprot.writeI32(elem402)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.relation is not None:
            oprot.writeFieldBegin('relation', TType.STRUCT, 4)
            self.relation.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.targetSquareMemberMid))
        value = (value * 31) ^ hash(make_hashable(self.updatedAttrs))
        value = (value * 31) ^ hash(make_hashable(self.relation))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ReportSquareRequest(object):
    """
    Attributes:
     - squareMid
     - reportType
     - otherReason
    """
    def __init__(self, squareMid=None, reportType=None, otherReason=None):
        self.squareMid = squareMid
        self.reportType = reportType
        self.otherReason = otherReason

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.reportType = ReportType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.otherReason = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ReportSquareRequest')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 2)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.reportType is not None:
            oprot.writeFieldBegin('reportType', TType.I32, 3)
            oprot.writeI32(self.reportType)
            oprot.writeFieldEnd()
        if self.otherReason is not None:
            oprot.writeFieldBegin('otherReason', TType.STRING, 4)
            oprot.writeString(self.otherReason)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.reportType))
        value = (value * 31) ^ hash(make_hashable(self.otherReason))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ReportSquareResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ReportSquareResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ReportSquareChatRequest(object):
    """
    Attributes:
     - squareMid
     - squareChatMid
     - reportType
     - otherReason
    """
    def __init__(self, squareMid=None, squareChatMid=None, reportType=None, otherReason=None):
        self.squareMid = squareMid
        self.squareChatMid = squareChatMid
        self.reportType = reportType
        self.otherReason = otherReason

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.reportType = ReportType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.otherReason = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ReportSquareChatRequest')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 2)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 3)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.reportType is not None:
            oprot.writeFieldBegin('reportType', TType.I32, 5)
            oprot.writeI32(self.reportType)
            oprot.writeFieldEnd()
        if self.otherReason is not None:
            oprot.writeFieldBegin('otherReason', TType.STRING, 6)
            oprot.writeString(self.otherReason)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.reportType))
        value = (value * 31) ^ hash(make_hashable(self.otherReason))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ReportSquareChatResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ReportSquareChatResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ReportSquareMessageRequest(object):
    """
    Attributes:
     - squareMid
     - squareChatMid
     - squareMessageId
     - reportType
     - otherReason
    """
    def __init__(self, squareMid=None, squareChatMid=None, squareMessageId=None, reportType=None, otherReason=None):
        self.squareMid = squareMid
        self.squareChatMid = squareChatMid
        self.squareMessageId = squareMessageId
        self.reportType = reportType
        self.otherReason = otherReason

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.squareMessageId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.reportType = ReportType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.otherReason = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ReportSquareMessageRequest')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 2)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 3)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.squareMessageId is not None:
            oprot.writeFieldBegin('squareMessageId', TType.STRING, 4)
            oprot.writeString(self.squareMessageId)
            oprot.writeFieldEnd()
        if self.reportType is not None:
            oprot.writeFieldBegin('reportType', TType.I32, 5)
            oprot.writeI32(self.reportType)
            oprot.writeFieldEnd()
        if self.otherReason is not None:
            oprot.writeFieldBegin('otherReason', TType.STRING, 6)
            oprot.writeString(self.otherReason)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.squareMessageId))
        value = (value * 31) ^ hash(make_hashable(self.reportType))
        value = (value * 31) ^ hash(make_hashable(self.otherReason))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ReportSquareMessageResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ReportSquareMessageResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ReportSquareMemberRequest(object):
    """
    Attributes:
     - squareMemberMid
     - reportType
     - otherReason
     - squareChatMid
    """
    def __init__(self, squareMemberMid=None, reportType=None, otherReason=None, squareChatMid=None):
        self.squareMemberMid = squareMemberMid
        self.reportType = reportType
        self.otherReason = otherReason
        self.squareChatMid = squareChatMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.squareMemberMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.reportType = ReportType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.otherReason = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ReportSquareMemberRequest')
        if self.squareMemberMid is not None:
            oprot.writeFieldBegin('squareMemberMid', TType.STRING, 2)
            oprot.writeString(self.squareMemberMid)
            oprot.writeFieldEnd()
        if self.reportType is not None:
            oprot.writeFieldBegin('reportType', TType.I32, 3)
            oprot.writeI32(self.reportType)
            oprot.writeFieldEnd()
        if self.otherReason is not None:
            oprot.writeFieldBegin('otherReason', TType.STRING, 4)
            oprot.writeString(self.otherReason)
            oprot.writeFieldEnd()
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 5)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMemberMid))
        value = (value * 31) ^ hash(make_hashable(self.reportType))
        value = (value * 31) ^ hash(make_hashable(self.otherReason))
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ReportSquareMemberResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ReportSquareMemberResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareRequest(object):
    """
    Attributes:
     - mid
    """
    def __init__(self, mid=None):
        self.mid = mid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareRequest')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 2)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareResponse(object):
    """
    Attributes:
     - square
     - myMembership
     - squareAuthority
     - squareStatus
     - squareFeatureSet
     - noteStatus
    """
    def __init__(self, square=None, myMembership=None, squareAuthority=None, squareStatus=None, squareFeatureSet=None, noteStatus=None):
        self.square = square
        self.myMembership = myMembership
        self.squareAuthority = squareAuthority
        self.squareStatus = squareStatus
        self.squareFeatureSet = squareFeatureSet
        self.noteStatus = noteStatus

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.square = Square()
                    self.square.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.myMembership = SquareMember()
                    self.myMembership.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.squareAuthority = SquareAuthority()
                    self.squareAuthority.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.squareStatus = SquareStatus()
                    self.squareStatus.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.squareFeatureSet = SquareFeatureSet()
                    self.squareFeatureSet.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.noteStatus = NoteStatus()
                    self.noteStatus.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareResponse')
        if self.square is not None:
            oprot.writeFieldBegin('square', TType.STRUCT, 1)
            self.square.write(oprot)
            oprot.writeFieldEnd()
        if self.myMembership is not None:
            oprot.writeFieldBegin('myMembership', TType.STRUCT, 2)
            self.myMembership.write(oprot)
            oprot.writeFieldEnd()
        if self.squareAuthority is not None:
            oprot.writeFieldBegin('squareAuthority', TType.STRUCT, 3)
            self.squareAuthority.write(oprot)
            oprot.writeFieldEnd()
        if self.squareStatus is not None:
            oprot.writeFieldBegin('squareStatus', TType.STRUCT, 4)
            self.squareStatus.write(oprot)
            oprot.writeFieldEnd()
        if self.squareFeatureSet is not None:
            oprot.writeFieldBegin('squareFeatureSet', TType.STRUCT, 5)
            self.squareFeatureSet.write(oprot)
            oprot.writeFieldEnd()
        if self.noteStatus is not None:
            oprot.writeFieldBegin('noteStatus', TType.STRUCT, 6)
            self.noteStatus.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.square))
        value = (value * 31) ^ hash(make_hashable(self.myMembership))
        value = (value * 31) ^ hash(make_hashable(self.squareAuthority))
        value = (value * 31) ^ hash(make_hashable(self.squareStatus))
        value = (value * 31) ^ hash(make_hashable(self.squareFeatureSet))
        value = (value * 31) ^ hash(make_hashable(self.noteStatus))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareStatusRequest(object):
    """
    Attributes:
     - squareMid
    """
    def __init__(self, squareMid=None):
        self.squareMid = squareMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareStatusRequest')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 2)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareStatusResponse(object):
    """
    Attributes:
     - squareStatus
    """
    def __init__(self, squareStatus=None):
        self.squareStatus = squareStatus

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.squareStatus = SquareStatus()
                    self.squareStatus.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareStatusResponse')
        if self.squareStatus is not None:
            oprot.writeFieldBegin('squareStatus', TType.STRUCT, 1)
            self.squareStatus.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareStatus))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetNoteStatusRequest(object):
    """
    Attributes:
     - squareMid
    """
    def __init__(self, squareMid=None):
        self.squareMid = squareMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetNoteStatusRequest')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 2)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetNoteStatusResponse(object):
    """
    Attributes:
     - squareMid
     - status
    """
    def __init__(self, squareMid=None, status=None):
        self.squareMid = squareMid
        self.status = status

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.status = NoteStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetNoteStatusResponse')
        if self.squareMid is not None:
            oprot.writeFieldBegin('squareMid', TType.STRING, 1)
            oprot.writeString(self.squareMid)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 2)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareMid))
        value = (value * 31) ^ hash(make_hashable(self.status))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CreateSquareChatAnnouncementRequest(object):
    """
    Attributes:
     - reqSeq
     - squareChatMid
     - squareChatAnnouncement
    """
    def __init__(self, reqSeq=None, squareChatMid=None, squareChatAnnouncement=None):
        self.reqSeq = reqSeq
        self.squareChatMid = squareChatMid
        self.squareChatAnnouncement = squareChatAnnouncement

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.squareChatAnnouncement = SquareChatAnnouncement()
                    self.squareChatAnnouncement.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CreateSquareChatAnnouncementRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 2)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.squareChatAnnouncement is not None:
            oprot.writeFieldBegin('squareChatAnnouncement', TType.STRUCT, 3)
            self.squareChatAnnouncement.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.reqSeq))
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.squareChatAnnouncement))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CreateSquareChatAnnouncementResponse(object):
    """
    Attributes:
     - announcement
    """
    def __init__(self, announcement=None):
        self.announcement = announcement

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.announcement = SquareChatAnnouncement()
                    self.announcement.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CreateSquareChatAnnouncementResponse')
        if self.announcement is not None:
            oprot.writeFieldBegin('announcement', TType.STRUCT, 1)
            self.announcement.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.announcement))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class DeleteSquareChatAnnouncementRequest(object):
    """
    Attributes:
     - squareChatMid
     - announcementSeq
    """
    def __init__(self, squareChatMid=None, announcementSeq=None):
        self.squareChatMid = squareChatMid
        self.announcementSeq = announcementSeq

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.announcementSeq = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('DeleteSquareChatAnnouncementRequest')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 2)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        if self.announcementSeq is not None:
            oprot.writeFieldBegin('announcementSeq', TType.I64, 3)
            oprot.writeI64(self.announcementSeq)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        value = (value * 31) ^ hash(make_hashable(self.announcementSeq))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class DeleteSquareChatAnnouncementResponse(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('DeleteSquareChatAnnouncementResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareChatAnnouncementsRequest(object):
    """
    Attributes:
     - squareChatMid
    """
    def __init__(self, squareChatMid=None):
        self.squareChatMid = squareChatMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareChatAnnouncementsRequest')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 2)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetSquareChatAnnouncementsResponse(object):
    """
    Attributes:
     - announcements
    """
    def __init__(self, announcements=None):
        self.announcements = announcements

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.announcements = []
                    (_, elem403) = iprot.readListBegin()
                    for _ in range(elem403):
                        elem404 = SquareChatAnnouncement()
                        elem404.read(iprot)
                        self.announcements.append(elem404)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetSquareChatAnnouncementsResponse')
        if self.announcements is not None:
            oprot.writeFieldBegin('announcements', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.announcements))
            for elem405 in self.announcements:
                elem405.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.announcements))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetJoinedSquareChatsRequest(object):
    """
    Attributes:
     - continuationToken
     - limit
    """
    def __init__(self, continuationToken=None, limit=None):
        self.continuationToken = continuationToken
        self.limit = limit

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.continuationToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetJoinedSquareChatsRequest')
        if self.continuationToken is not None:
            oprot.writeFieldBegin('continuationToken', TType.STRING, 2)
            oprot.writeString(self.continuationToken)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I32, 3)
            oprot.writeI32(self.limit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.continuationToken))
        value = (value * 31) ^ hash(make_hashable(self.limit))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetJoinedSquareChatsResponse(object):
    """
    Attributes:
     - chats
     - chatMembers
     - statuses
     - continuationToken
    """
    def __init__(self, chats=None, chatMembers=None, statuses=None, continuationToken=None):
        self.chats = chats
        self.chatMembers = chatMembers
        self.statuses = statuses
        self.continuationToken = continuationToken

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.chats = []
                    (_, elem406) = iprot.readListBegin()
                    for _ in range(elem406):
                        elem407 = SquareChat()
                        elem407.read(iprot)
                        self.chats.append(elem407)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.chatMembers = {}
                    (_, _, elem408) = iprot.readMapBegin()
                    for _ in range(elem408):
                        elem410 = iprot.readString()
                        elem409 = SquareChatMember()
                        elem409.read(iprot)
                        self.chatMembers[elem410] = elem409
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.statuses = {}
                    (_, _, elem411) = iprot.readMapBegin()
                    for _ in range(elem411):
                        elem413 = iprot.readString()
                        elem412 = SquareChatStatus()
                        elem412.read(iprot)
                        self.statuses[elem413] = elem412
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.continuationToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetJoinedSquareChatsResponse')
        if self.chats is not None:
            oprot.writeFieldBegin('chats', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.chats))
            for elem414 in self.chats:
                elem414.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.chatMembers is not None:
            oprot.writeFieldBegin('chatMembers', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.chatMembers))
            for elem416, elem415 in self.chatMembers.items():
                oprot.writeString(elem416)
                elem415.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.statuses is not None:
            oprot.writeFieldBegin('statuses', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.statuses))
            for elem418, elem417 in self.statuses.items():
                oprot.writeString(elem418)
                elem417.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.continuationToken is not None:
            oprot.writeFieldBegin('continuationToken', TType.STRING, 4)
            oprot.writeString(self.continuationToken)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.chats))
        value = (value * 31) ^ hash(make_hashable(self.chatMembers))
        value = (value * 31) ^ hash(make_hashable(self.statuses))
        value = (value * 31) ^ hash(make_hashable(self.continuationToken))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class LiffChatContext(object):
    """
    Attributes:
     - chatMid
    """
    def __init__(self, chatMid=None):
        self.chatMid = chatMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('LiffChatContext')
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 1)
            oprot.writeString(self.chatMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.chatMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class LiffContext(object):
    """
    Attributes:
     - none
     - chat
     - squareChat
    """
    def __init__(self, none=None, chat=None, squareChat=None):
        self.none = none
        self.chat = chat
        self.squareChat = squareChat

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.none = LiffNoneContext()
                    self.none.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.chat = LiffChatContext()
                    self.chat.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.squareChat = LiffSquareChatContext()
                    self.squareChat.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('LiffContext')
        if self.none is not None:
            oprot.writeFieldBegin('none', TType.STRUCT, 1)
            self.none.write(oprot)
            oprot.writeFieldEnd()
        if self.chat is not None:
            oprot.writeFieldBegin('chat', TType.STRUCT, 2)
            self.chat.write(oprot)
            oprot.writeFieldEnd()
        if self.squareChat is not None:
            oprot.writeFieldBegin('squareChat', TType.STRUCT, 3)
            self.squareChat.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.none))
        value = (value * 31) ^ hash(make_hashable(self.chat))
        value = (value * 31) ^ hash(make_hashable(self.squareChat))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class LiffErrorConsentRequired(object):
    """
    Attributes:
     - channelId
     - consentUrl
    """
    def __init__(self, channelId=None, consentUrl=None):
        self.channelId = channelId
        self.consentUrl = consentUrl

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.consentUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('LiffErrorConsentRequired')
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 1)
            oprot.writeString(self.channelId)
            oprot.writeFieldEnd()
        if self.consentUrl is not None:
            oprot.writeFieldBegin('consentUrl', TType.STRING, 2)
            oprot.writeString(self.consentUrl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.channelId))
        value = (value * 31) ^ hash(make_hashable(self.consentUrl))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class LiffErrorPayload(object):
    """
    Attributes:
     - consentRequired
    """
    def __init__(self, consentRequired=None):
        self.consentRequired = consentRequired

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 3:
                if ftype == TType.STRUCT:
                    self.consentRequired = LiffErrorConsentRequired()
                    self.consentRequired.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('LiffErrorPayload')
        if self.consentRequired is not None:
            oprot.writeFieldBegin('consentRequired', TType.STRUCT, 3)
            self.consentRequired.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.consentRequired))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class LiffNoneContext(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('LiffNoneContext')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class LiffSquareChatContext(object):
    """
    Attributes:
     - squareChatMid
    """
    def __init__(self, squareChatMid=None):
        self.squareChatMid = squareChatMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('LiffSquareChatContext')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 1)
            oprot.writeString(self.squareChatMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.squareChatMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class LiffView(object):
    """
    Attributes:
     - type
     - url
     - trustedDomain
     - titleIconUrl
     - titleTextColor
     - titleSubtextColor
     - titleButtonColor
     - titleBackgroundColor
     - progressBarColor
     - progressBackgroundColor
    """
    def __init__(self, type=None, url=None, trustedDomain=None, titleIconUrl=None, titleTextColor=None, titleSubtextColor=None, titleButtonColor=None, titleBackgroundColor=None, progressBarColor=None, progressBackgroundColor=None):
        self.type = type
        self.url = url
        self.trustedDomain = trustedDomain
        self.titleIconUrl = titleIconUrl
        self.titleTextColor = titleTextColor
        self.titleSubtextColor = titleSubtextColor
        self.titleButtonColor = titleButtonColor
        self.titleBackgroundColor = titleBackgroundColor
        self.progressBarColor = progressBarColor
        self.progressBackgroundColor = progressBackgroundColor

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.url = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.trustedDomain = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.titleIconUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.titleTextColor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.titleSubtextColor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.titleButtonColor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.titleBackgroundColor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.progressBarColor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.progressBackgroundColor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('LiffView')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 1)
            oprot.writeString(self.type)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 2)
            oprot.writeString(self.url)
            oprot.writeFieldEnd()
        if self.trustedDomain is not None:
            oprot.writeFieldBegin('trustedDomain', TType.BOOL, 11)
            oprot.writeBool(self.trustedDomain)
            oprot.writeFieldEnd()
        if self.titleIconUrl is not None:
            oprot.writeFieldBegin('titleIconUrl', TType.STRING, 6)
            oprot.writeString(self.titleIconUrl)
            oprot.writeFieldEnd()
        if self.titleTextColor is not None:
            oprot.writeFieldBegin('titleTextColor', TType.I32, 4)
            oprot.writeI32(self.titleTextColor)
            oprot.writeFieldEnd()
        if self.titleSubtextColor is not None:
            oprot.writeFieldBegin('titleSubtextColor', TType.I32, 7)
            oprot.writeI32(self.titleSubtextColor)
            oprot.writeFieldEnd()
        if self.titleButtonColor is not None:
            oprot.writeFieldBegin('titleButtonColor', TType.I32, 8)
            oprot.writeI32(self.titleButtonColor)
            oprot.writeFieldEnd()
        if self.titleBackgroundColor is not None:
            oprot.writeFieldBegin('titleBackgroundColor', TType.I32, 5)
            oprot.writeI32(self.titleBackgroundColor)
            oprot.writeFieldEnd()
        if self.progressBarColor is not None:
            oprot.writeFieldBegin('progressBarColor', TType.I32, 9)
            oprot.writeI32(self.progressBarColor)
            oprot.writeFieldEnd()
        if self.progressBackgroundColor is not None:
            oprot.writeFieldBegin('progressBackgroundColor', TType.I32, 10)
            oprot.writeI32(self.progressBackgroundColor)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.url))
        value = (value * 31) ^ hash(make_hashable(self.trustedDomain))
        value = (value * 31) ^ hash(make_hashable(self.titleIconUrl))
        value = (value * 31) ^ hash(make_hashable(self.titleTextColor))
        value = (value * 31) ^ hash(make_hashable(self.titleSubtextColor))
        value = (value * 31) ^ hash(make_hashable(self.titleButtonColor))
        value = (value * 31) ^ hash(make_hashable(self.titleBackgroundColor))
        value = (value * 31) ^ hash(make_hashable(self.progressBarColor))
        value = (value * 31) ^ hash(make_hashable(self.progressBackgroundColor))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class LiffViewRequest(object):
    """
    Attributes:
     - liffId
     - context
    """
    def __init__(self, liffId=None, context=None):
        self.liffId = liffId
        self.context = context

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.liffId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.context = LiffContext()
                    self.context.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('LiffViewRequest')
        if self.liffId is not None:
            oprot.writeFieldBegin('liffId', TType.STRING, 1)
            oprot.writeString(self.liffId)
            oprot.writeFieldEnd()
        if self.context is not None:
            oprot.writeFieldBegin('context', TType.STRUCT, 2)
            self.context.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.liffId))
        value = (value * 31) ^ hash(make_hashable(self.context))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class LiffViewResponse(object):
    """
    Attributes:
     - view
     - contextToken
     - accessToken
     - featureToken
     - features
     - channelId
    """
    def __init__(self, view=None, contextToken=None, accessToken=None, featureToken=None, features=None, channelId=None):
        self.view = view
        self.contextToken = contextToken
        self.accessToken = accessToken
        self.featureToken = featureToken
        self.features = features
        self.channelId = channelId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.view = LiffView()
                    self.view.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.contextToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.accessToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.featureToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.features = []
                    (_, elem419) = iprot.readListBegin()
                    for _ in range(elem419):
                        elem420 = LiffFeatureType(iprot.readI32())
                        self.features.append(elem420)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('LiffViewResponse')
        if self.view is not None:
            oprot.writeFieldBegin('view', TType.STRUCT, 1)
            self.view.write(oprot)
            oprot.writeFieldEnd()
        if self.contextToken is not None:
            oprot.writeFieldBegin('contextToken', TType.STRING, 2)
            oprot.writeString(self.contextToken)
            oprot.writeFieldEnd()
        if self.accessToken is not None:
            oprot.writeFieldBegin('accessToken', TType.STRING, 3)
            oprot.writeString(self.accessToken)
            oprot.writeFieldEnd()
        if self.featureToken is not None:
            oprot.writeFieldBegin('featureToken', TType.STRING, 4)
            oprot.writeString(self.featureToken)
            oprot.writeFieldEnd()
        if self.features is not None:
            oprot.writeFieldBegin('features', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.features))
            for elem421 in self.features:
                oprot.writeI32(elem421)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 6)
            oprot.writeString(self.channelId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.view))
        value = (value * 31) ^ hash(make_hashable(self.contextToken))
        value = (value * 31) ^ hash(make_hashable(self.accessToken))
        value = (value * 31) ^ hash(make_hashable(self.featureToken))
        value = (value * 31) ^ hash(make_hashable(self.features))
        value = (value * 31) ^ hash(make_hashable(self.channelId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class RevokeTokenRequest(object):
    """
    Attributes:
     - accessToken
    """
    def __init__(self, accessToken=None):
        self.accessToken = accessToken

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.accessToken = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('RevokeTokenRequest')
        if self.accessToken is not None:
            oprot.writeFieldBegin('accessToken', TType.STRING, 1)
            oprot.writeString(self.accessToken)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.accessToken))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UpdateBuddyProfileResult(object):
    """
    Attributes:
     - requestId
     - state
     - eventNo
     - receiverCount
     - successCount
     - failCount
     - cancelCount
     - unregisterCount
     - timestamp
     - message
    """
    def __init__(self, requestId=None, state=None, eventNo=None, receiverCount=None, successCount=None, failCount=None, cancelCount=None, unregisterCount=None, timestamp=None, message=None):
        self.requestId = requestId
        self.state = state
        self.eventNo = eventNo
        self.receiverCount = receiverCount
        self.successCount = successCount
        self.failCount = failCount
        self.cancelCount = cancelCount
        self.unregisterCount = unregisterCount
        self.timestamp = timestamp
        self.message = message

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.state = BuddyResultState(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.eventNo = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.receiverCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.successCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I64:
                    self.failCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I64:
                    self.cancelCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I64:
                    self.unregisterCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.message = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UpdateBuddyProfileResult')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 2)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.eventNo is not None:
            oprot.writeFieldBegin('eventNo', TType.I32, 3)
            oprot.writeI32(self.eventNo)
            oprot.writeFieldEnd()
        if self.receiverCount is not None:
            oprot.writeFieldBegin('receiverCount', TType.I64, 11)
            oprot.writeI64(self.receiverCount)
            oprot.writeFieldEnd()
        if self.successCount is not None:
            oprot.writeFieldBegin('successCount', TType.I64, 12)
            oprot.writeI64(self.successCount)
            oprot.writeFieldEnd()
        if self.failCount is not None:
            oprot.writeFieldBegin('failCount', TType.I64, 13)
            oprot.writeI64(self.failCount)
            oprot.writeFieldEnd()
        if self.cancelCount is not None:
            oprot.writeFieldBegin('cancelCount', TType.I64, 14)
            oprot.writeI64(self.cancelCount)
            oprot.writeFieldEnd()
        if self.unregisterCount is not None:
            oprot.writeFieldBegin('unregisterCount', TType.I64, 15)
            oprot.writeI64(self.unregisterCount)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 21)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 22)
            oprot.writeString(self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.state))
        value = (value * 31) ^ hash(make_hashable(self.eventNo))
        value = (value * 31) ^ hash(make_hashable(self.receiverCount))
        value = (value * 31) ^ hash(make_hashable(self.successCount))
        value = (value * 31) ^ hash(make_hashable(self.failCount))
        value = (value * 31) ^ hash(make_hashable(self.cancelCount))
        value = (value * 31) ^ hash(make_hashable(self.unregisterCount))
        value = (value * 31) ^ hash(make_hashable(self.timestamp))
        value = (value * 31) ^ hash(make_hashable(self.message))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UserAuthStatus(object):
    """
    Attributes:
     - phoneNumberRegistered
     - registeredSnsIdTypes
    """
    def __init__(self, phoneNumberRegistered=None, registeredSnsIdTypes=None):
        self.phoneNumberRegistered = phoneNumberRegistered
        self.registeredSnsIdTypes = registeredSnsIdTypes

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.phoneNumberRegistered = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.registeredSnsIdTypes = []
                    (_, elem422) = iprot.readListBegin()
                    for _ in range(elem422):
                        elem423 = SnsIdType(iprot.readI32())
                        self.registeredSnsIdTypes.append(elem423)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UserAuthStatus')
        if self.phoneNumberRegistered is not None:
            oprot.writeFieldBegin('phoneNumberRegistered', TType.BOOL, 1)
            oprot.writeBool(self.phoneNumberRegistered)
            oprot.writeFieldEnd()
        if self.registeredSnsIdTypes is not None:
            oprot.writeFieldBegin('registeredSnsIdTypes', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.registeredSnsIdTypes))
            for elem424 in self.registeredSnsIdTypes:
                oprot.writeI32(elem424)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.phoneNumberRegistered))
        value = (value * 31) ^ hash(make_hashable(self.registeredSnsIdTypes))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class WapInvitation(object):
    """
    Attributes:
     - type
     - inviteeEmail
     - inviterMid
     - roomMid
    """
    def __init__(self, type=None, inviteeEmail=None, inviterMid=None, roomMid=None):
        self.type = type
        self.inviteeEmail = inviteeEmail
        self.inviterMid = inviterMid
        self.roomMid = roomMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = WapInvitationType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.inviteeEmail = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.inviterMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.roomMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('WapInvitation')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.inviteeEmail is not None:
            oprot.writeFieldBegin('inviteeEmail', TType.STRING, 10)
            oprot.writeString(self.inviteeEmail)
            oprot.writeFieldEnd()
        if self.inviterMid is not None:
            oprot.writeFieldBegin('inviterMid', TType.STRING, 11)
            oprot.writeString(self.inviterMid)
            oprot.writeFieldEnd()
        if self.roomMid is not None:
            oprot.writeFieldBegin('roomMid', TType.STRING, 12)
            oprot.writeString(self.roomMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.inviteeEmail))
        value = (value * 31) ^ hash(make_hashable(self.inviterMid))
        value = (value * 31) ^ hash(make_hashable(self.roomMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GroupCall(object):
    """
    Attributes:
     - online
     - chatMid
     - hostMids
     - memberMids
     - started
     - mediaType
    """
    def __init__(self, online=None, chatMid=None, hostMids=None, memberMids=None, started=None, mediaType=None):
        self.online = online
        self.chatMid = chatMid
        self.hostMids = hostMids
        self.memberMids = memberMids
        self.started = started
        self.mediaType = mediaType

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.online = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.hostMids = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.memberMids = []
                    (_, elem425) = iprot.readListBegin()
                    for _ in range(elem425):
                        elem426 = iprot.readString()
                        self.memberMids.append(elem426)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.started = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.mediaType = GroupCallMediaType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GroupCall')
        if self.online is not None:
            oprot.writeFieldBegin('online', TType.BOOL, 1)
            oprot.writeBool(self.online)
            oprot.writeFieldEnd()
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 2)
            oprot.writeString(self.chatMid)
            oprot.writeFieldEnd()
        if self.hostMids is not None:
            oprot.writeFieldBegin('hostMids', TType.STRING, 3)
            oprot.writeString(self.hostMids)
            oprot.writeFieldEnd()
        if self.memberMids is not None:
            oprot.writeFieldBegin('memberMids', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.memberMids))
            for elem427 in self.memberMids:
                oprot.writeString(elem427)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.started is not None:
            oprot.writeFieldBegin('started', TType.I64, 5)
            oprot.writeI64(self.started)
            oprot.writeFieldEnd()
        if self.mediaType is not None:
            oprot.writeFieldBegin('mediaType', TType.I32, 6)
            oprot.writeI32(self.mediaType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.online))
        value = (value * 31) ^ hash(make_hashable(self.chatMid))
        value = (value * 31) ^ hash(make_hashable(self.hostMids))
        value = (value * 31) ^ hash(make_hashable(self.memberMids))
        value = (value * 31) ^ hash(make_hashable(self.started))
        value = (value * 31) ^ hash(make_hashable(self.mediaType))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GroupCallRoute(object):
    """
    Attributes:
     - token
     - cscf
     - mix
    """
    def __init__(self, token=None, cscf=None, mix=None):
        self.token = token
        self.cscf = cscf
        self.mix = mix

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.token = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.cscf = CallHost()
                    self.cscf.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.mix = CallHost()
                    self.mix.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GroupCallRoute')
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 1)
            oprot.writeString(self.token)
            oprot.writeFieldEnd()
        if self.cscf is not None:
            oprot.writeFieldBegin('cscf', TType.STRUCT, 2)
            self.cscf.write(oprot)
            oprot.writeFieldEnd()
        if self.mix is not None:
            oprot.writeFieldBegin('mix', TType.STRUCT, 3)
            self.mix.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.token))
        value = (value * 31) ^ hash(make_hashable(self.cscf))
        value = (value * 31) ^ hash(make_hashable(self.mix))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class TalkException(TException):
    """
    Attributes:
     - code
     - reason
     - parameterMap
    """
    def __init__(self, code=None, reason=None, parameterMap=None):
        self.code = code
        self.reason = reason
        self.parameterMap = parameterMap

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = ErrorCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reason = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.parameterMap = {}
                    (_, _, elem428) = iprot.readMapBegin()
                    for _ in range(elem428):
                        elem430 = iprot.readString()
                        elem429 = iprot.readString()
                        self.parameterMap[elem430] = elem429
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('TalkException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 2)
            oprot.writeString(self.reason)
            oprot.writeFieldEnd()
        if self.parameterMap is not None:
            oprot.writeFieldBegin('parameterMap', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.parameterMap))
            for elem432, elem431 in self.parameterMap.items():
                oprot.writeString(elem432)
                oprot.writeString(elem431)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.code))
        value = (value * 31) ^ hash(make_hashable(self.reason))
        value = (value * 31) ^ hash(make_hashable(self.parameterMap))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ShouldSyncException(TException):
    """
    Attributes:
     - syncOpRevision
     - syncScope
     - syncReason
     - message
    """
    def __init__(self, syncOpRevision=None, syncScope=None, syncReason=None, message=None):
        self.syncOpRevision = syncOpRevision
        self.syncScope = syncScope
        self.syncReason = syncReason
        self.message = message

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.syncOpRevision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.syncScope = SyncScope()
                    self.syncScope.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.syncReason = SyncTriggerReason(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.message = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ShouldSyncException')
        if self.syncOpRevision is not None:
            oprot.writeFieldBegin('syncOpRevision', TType.I64, 1)
            oprot.writeI64(self.syncOpRevision)
            oprot.writeFieldEnd()
        if self.syncScope is not None:
            oprot.writeFieldBegin('syncScope', TType.STRUCT, 2)
            self.syncScope.write(oprot)
            oprot.writeFieldEnd()
        if self.syncReason is not None:
            oprot.writeFieldBegin('syncReason', TType.I32, 3)
            oprot.writeI32(self.syncReason)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 4)
            oprot.writeString(self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.syncOpRevision))
        value = (value * 31) ^ hash(make_hashable(self.syncScope))
        value = (value * 31) ^ hash(make_hashable(self.syncReason))
        value = (value * 31) ^ hash(make_hashable(self.message))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PointException(TException):
    """
    Attributes:
     - code
     - reason
     - extra
    """
    def __init__(self, code=None, reason=None, extra=None):
        self.code = code
        self.reason = reason
        self.extra = extra

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = PointErrorCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reason = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.extra = {}
                    (_, _, elem433) = iprot.readMapBegin()
                    for _ in range(elem433):
                        elem435 = iprot.readString()
                        elem434 = iprot.readString()
                        self.extra[elem435] = elem434
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PointException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 2)
            oprot.writeString(self.reason)
            oprot.writeFieldEnd()
        if self.extra is not None:
            oprot.writeFieldBegin('extra', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.extra))
            for elem437, elem436 in self.extra.items():
                oprot.writeString(elem437)
                oprot.writeString(elem436)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.code))
        value = (value * 31) ^ hash(make_hashable(self.reason))
        value = (value * 31) ^ hash(make_hashable(self.extra))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ChannelException(TException):
    """
    Attributes:
     - code
     - reason
     - parameterMap
    """
    def __init__(self, code=None, reason=None, parameterMap=None):
        self.code = code
        self.reason = reason
        self.parameterMap = parameterMap

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = ChannelErrorCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reason = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.parameterMap = {}
                    (_, _, elem438) = iprot.readMapBegin()
                    for _ in range(elem438):
                        elem440 = iprot.readString()
                        elem439 = iprot.readString()
                        self.parameterMap[elem440] = elem439
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ChannelException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 2)
            oprot.writeString(self.reason)
            oprot.writeFieldEnd()
        if self.parameterMap is not None:
            oprot.writeFieldBegin('parameterMap', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.parameterMap))
            for elem442, elem441 in self.parameterMap.items():
                oprot.writeString(elem442)
                oprot.writeString(elem441)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.code))
        value = (value * 31) ^ hash(make_hashable(self.reason))
        value = (value * 31) ^ hash(make_hashable(self.parameterMap))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareException(TException):
    """
    Attributes:
     - errorCode
     - errorExtraInfo
     - reason
    """
    def __init__(self, errorCode=None, errorExtraInfo=None, reason=None):
        self.errorCode = errorCode
        self.errorExtraInfo = errorExtraInfo
        self.reason = reason

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = SQErrorCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.errorExtraInfo = ErrorExtraInfo()
                    self.errorExtraInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.reason = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareException')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.errorExtraInfo is not None:
            oprot.writeFieldBegin('errorExtraInfo', TType.STRUCT, 2)
            self.errorExtraInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 3)
            oprot.writeString(self.reason)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.errorCode))
        value = (value * 31) ^ hash(make_hashable(self.errorExtraInfo))
        value = (value * 31) ^ hash(make_hashable(self.reason))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UniversalNotificationServiceException(TException):
    """
    Attributes:
     - code
     - reason
     - parameterMap
    """
    def __init__(self, code=None, reason=None, parameterMap=None):
        self.code = code
        self.reason = reason
        self.parameterMap = parameterMap

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = UniversalNotificationServiceErrorCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reason = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.parameterMap = {}
                    (_, _, elem443) = iprot.readMapBegin()
                    for _ in range(elem443):
                        elem445 = iprot.readString()
                        elem444 = iprot.readString()
                        self.parameterMap[elem445] = elem444
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UniversalNotificationServiceException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 2)
            oprot.writeString(self.reason)
            oprot.writeFieldEnd()
        if self.parameterMap is not None:
            oprot.writeFieldBegin('parameterMap', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.parameterMap))
            for elem447, elem446 in self.parameterMap.items():
                oprot.writeString(elem447)
                oprot.writeString(elem446)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.code))
        value = (value * 31) ^ hash(make_hashable(self.reason))
        value = (value * 31) ^ hash(make_hashable(self.parameterMap))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class LiffException(TException):
    """
    Attributes:
     - code
     - message
     - payload
    """
    def __init__(self, code=None, message=None, payload=None):
        self.code = code
        self.message = message
        self.payload = payload

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = LiffErrorCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.payload = LiffErrorPayload()
                    self.payload.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('LiffException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message)
            oprot.writeFieldEnd()
        if self.payload is not None:
            oprot.writeFieldBegin('payload', TType.STRUCT, 3)
            self.payload.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.code))
        value = (value * 31) ^ hash(make_hashable(self.message))
        value = (value * 31) ^ hash(make_hashable(self.payload))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

