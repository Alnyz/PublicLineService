#
# Autogenerated by Frugal Compiler (3.7.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#



from threading import Lock

from frugal.middleware import Method
from frugal.exceptions import TApplicationExceptionType
from frugal.exceptions import TTransportExceptionType
from frugal.processor import FBaseProcessor
from frugal.processor import FProcessorFunction
from frugal.util.deprecate import deprecated
from frugal.util import make_hashable
from thrift.Thrift import TApplicationException
from thrift.Thrift import TMessageType
from thrift.transport.TTransport import TTransportException

from .ttypes import *


class Iface(object):

    def addBuddyMember(self, ctx, requestId, userMid):
        """
        Args:
            ctx: FContext
            requestId: string
            userMid: string
        """
        pass

    def addBuddyMembers(self, ctx, requestId, userMids):
        """
        Args:
            ctx: FContext
            requestId: string
            userMids: list of string
        """
        pass

    def blockBuddyMember(self, ctx, requestId, mid):
        """
        Args:
            ctx: FContext
            requestId: string
            mid: string
        """
        pass

    def commitSendMessagesToAll(self, ctx, requestIdList):
        """
        Args:
            ctx: FContext
            requestIdList: list of string
        """
        pass

    def commitSendMessagesToMids(self, ctx, requestIdList, mids):
        """
        Args:
            ctx: FContext
            requestIdList: list of string
            mids: list of string
        """
        pass

    def containsBuddyMember(self, ctx, requestId, userMid):
        """
        Args:
            ctx: FContext
            requestId: string
            userMid: string
        """
        pass

    def downloadMessageContent(self, ctx, requestId, messageId):
        """
        Args:
            ctx: FContext
            requestId: string
            messageId: string
        """
        pass

    def downloadMessageContentPreview(self, ctx, requestId, messageId):
        """
        Args:
            ctx: FContext
            requestId: string
            messageId: string
        """
        pass

    def downloadProfileImage(self, ctx, requestId):
        """
        Args:
            ctx: FContext
            requestId: string
        """
        pass

    def downloadProfileImagePreview(self, ctx, requestId):
        """
        Args:
            ctx: FContext
            requestId: string
        """
        pass

    def getActiveMemberCountByBuddyMid(self, ctx, buddyMid):
        """
        Args:
            ctx: FContext
            buddyMid: string
        """
        pass

    def getActiveMemberMidsByBuddyMid(self, ctx, buddyMid):
        """
        Args:
            ctx: FContext
            buddyMid: string
        """
        pass

    def getAllBuddyMembers(self, ctx):
        """
        Args:
            ctx: FContext
        """
        pass

    def getBlockedBuddyMembers(self, ctx):
        """
        Args:
            ctx: FContext
        """
        pass

    def getBlockerCountByBuddyMid(self, ctx, buddyMid):
        """
        Args:
            ctx: FContext
            buddyMid: string
        """
        pass

    def getBuddyDetailByMid(self, ctx, buddyMid):
        """
        Args:
            ctx: FContext
            buddyMid: string
        """
        pass

    def getBuddyProfile(self, ctx):
        """
        Args:
            ctx: FContext
        """
        pass

    def getContactTicket(self, ctx):
        """
        Args:
            ctx: FContext
        """
        pass

    def getMemberCountByBuddyMid(self, ctx, buddyMid):
        """
        Args:
            ctx: FContext
            buddyMid: string
        """
        pass

    def getSendBuddyMessageResult(self, ctx, sendBuddyMessageRequestId):
        """
        Args:
            ctx: FContext
            sendBuddyMessageRequestId: string
        """
        pass

    def getSetBuddyOnAirResult(self, ctx, setBuddyOnAirRequestId):
        """
        Args:
            ctx: FContext
            setBuddyOnAirRequestId: string
        """
        pass

    def getUpdateBuddyProfileResult(self, ctx, updateBuddyProfileRequestId):
        """
        Args:
            ctx: FContext
            updateBuddyProfileRequestId: string
        """
        pass

    def isBuddyOnAirByMid(self, ctx, buddyMid):
        """
        Args:
            ctx: FContext
            buddyMid: string
        """
        pass

    def linkAndSendBuddyContentMessageToAllAsync(self, ctx, requestId, msg, sourceContentId):
        """
        Args:
            ctx: FContext
            requestId: string
            msg: Message
            sourceContentId: string
        """
        pass

    def linkAndSendBuddyContentMessageToMids(self, ctx, requestId, msg, sourceContentId, mids):
        """
        Args:
            ctx: FContext
            requestId: string
            msg: Message
            sourceContentId: string
            mids: list of string
        """
        pass

    def notifyBuddyBlocked(self, ctx, buddyMid, blockerMid):
        """
        Args:
            ctx: FContext
            buddyMid: string
            blockerMid: string
        """
        pass

    def notifyBuddyUnblocked(self, ctx, buddyMid, blockerMid):
        """
        Args:
            ctx: FContext
            buddyMid: string
            blockerMid: string
        """
        pass

    def registerBuddy(self, ctx, buddyId, searchId, displayName, statusMeessage, picture, settings):
        """
        Args:
            ctx: FContext
            buddyId: string
            searchId: string
            displayName: string
            statusMeessage: string
            picture: binary string
            settings: dict of <string, string>
        """
        pass

    def registerBuddyAdmin(self, ctx, buddyId, searchId, displayName, statusMessage, picture):
        """
        Args:
            ctx: FContext
            buddyId: string
            searchId: string
            displayName: string
            statusMessage: string
            picture: binary string
        """
        pass

    def reissueContactTicket(self, ctx, expirationTime, maxUseCount):
        """
        Args:
            ctx: FContext
            expirationTime: int (signed 64 bits)
            maxUseCount: int (signed 32 bits)
        """
        pass

    def removeBuddyMember(self, ctx, requestId, userMid):
        """
        Args:
            ctx: FContext
            requestId: string
            userMid: string
        """
        pass

    def removeBuddyMembers(self, ctx, requestId, userMids):
        """
        Args:
            ctx: FContext
            requestId: string
            userMids: list of string
        """
        pass

    def sendBuddyContentMessageToAll(self, ctx, requestId, msg, content):
        """
        Args:
            ctx: FContext
            requestId: string
            msg: Message
            content: binary string
        """
        pass

    def sendBuddyContentMessageToAllAsync(self, ctx, requestId, msg, content):
        """
        Args:
            ctx: FContext
            requestId: string
            msg: Message
            content: binary string
        """
        pass

    def sendBuddyContentMessageToMids(self, ctx, requestId, msg, content, mids):
        """
        Args:
            ctx: FContext
            requestId: string
            msg: Message
            content: binary string
            mids: list of string
        """
        pass

    def sendBuddyContentMessageToMidsAsync(self, ctx, requestId, msg, content, mids):
        """
        Args:
            ctx: FContext
            requestId: string
            msg: Message
            content: binary string
            mids: list of string
        """
        pass

    def sendBuddyMessageToAll(self, ctx, requestId, msg):
        """
        Args:
            ctx: FContext
            requestId: string
            msg: Message
        """
        pass

    def sendBuddyMessageToAllAsync(self, ctx, requestId, msg):
        """
        Args:
            ctx: FContext
            requestId: string
            msg: Message
        """
        pass

    def sendBuddyMessageToMids(self, ctx, requestId, msg, mids):
        """
        Args:
            ctx: FContext
            requestId: string
            msg: Message
            mids: list of string
        """
        pass

    def sendBuddyMessageToMidsAsync(self, ctx, requestId, msg, mids):
        """
        Args:
            ctx: FContext
            requestId: string
            msg: Message
            mids: list of string
        """
        pass

    def sendIndividualEventToAllAsync(self, ctx, requestId, buddyMid, notificationStatus):
        """
        Args:
            ctx: FContext
            requestId: string
            buddyMid: string
            notificationStatus: NotificationStatus
        """
        pass

    def setBuddyOnAir(self, ctx, requestId, onAir):
        """
        Args:
            ctx: FContext
            requestId: string
            onAir: boolean
        """
        pass

    def setBuddyOnAirAsync(self, ctx, requestId, onAir):
        """
        Args:
            ctx: FContext
            requestId: string
            onAir: boolean
        """
        pass

    def storeMessage(self, ctx, requestId, messageRequest):
        """
        Args:
            ctx: FContext
            requestId: string
            messageRequest: BuddyMessageRequest
        """
        pass

    def unblockBuddyMember(self, ctx, requestId, mid):
        """
        Args:
            ctx: FContext
            requestId: string
            mid: string
        """
        pass

    def unregisterBuddy(self, ctx, requestId):
        """
        Args:
            ctx: FContext
            requestId: string
        """
        pass

    def unregisterBuddyAdmin(self, ctx, requestId):
        """
        Args:
            ctx: FContext
            requestId: string
        """
        pass

    def updateBuddyAdminProfileAttribute(self, ctx, requestId, attributes):
        """
        Args:
            ctx: FContext
            requestId: string
            attributes: dict of <string, string>
        """
        pass

    def updateBuddyAdminProfileImage(self, ctx, requestId, picture):
        """
        Args:
            ctx: FContext
            requestId: string
            picture: binary string
        """
        pass

    def updateBuddyProfileAttributes(self, ctx, requestId, attributes):
        """
        Args:
            ctx: FContext
            requestId: string
            attributes: dict of <string, string>
        """
        pass

    def updateBuddyProfileAttributesAsync(self, ctx, requestId, attributes):
        """
        Args:
            ctx: FContext
            requestId: string
            attributes: dict of <string, string>
        """
        pass

    def updateBuddyProfileImage(self, ctx, requestId, image):
        """
        Args:
            ctx: FContext
            requestId: string
            image: binary string
        """
        pass

    def updateBuddyProfileImageAsync(self, ctx, requestId, image):
        """
        Args:
            ctx: FContext
            requestId: string
            image: binary string
        """
        pass

    def updateBuddySearchId(self, ctx, requestId, searchId):
        """
        Args:
            ctx: FContext
            requestId: string
            searchId: string
        """
        pass

    def updateBuddySettings(self, ctx, settings):
        """
        Args:
            ctx: FContext
            settings: dict of <string, string>
        """
        pass

    def uploadBuddyContent(self, ctx, contentType, content):
        """
        Args:
            ctx: FContext
            contentType: ContentType
            content: binary string
        """
        pass


class Client(Iface):

    def __init__(self, provider, middleware=None):
        """
        Create a new Client with an FServiceProvider containing a transport
        and protocol factory.

        Args:
            provider: FServiceProvider with TSynchronousTransport
            middleware: ServiceMiddleware or list of ServiceMiddleware
        """
        middleware = middleware or []
        if middleware and not isinstance(middleware, list):
            middleware = [middleware]
        self._transport = provider.get_transport()
        self._protocol_factory = provider.get_protocol_factory()
        self._oprot = self._protocol_factory.get_protocol(self._transport)
        self._iprot = self._protocol_factory.get_protocol(self._transport)
        self._write_lock = Lock()
        middleware += provider.get_middleware()
        self._methods = {
            'addBuddyMember': Method(self._addBuddyMember, middleware),
            'addBuddyMembers': Method(self._addBuddyMembers, middleware),
            'blockBuddyMember': Method(self._blockBuddyMember, middleware),
            'commitSendMessagesToAll': Method(self._commitSendMessagesToAll, middleware),
            'commitSendMessagesToMids': Method(self._commitSendMessagesToMids, middleware),
            'containsBuddyMember': Method(self._containsBuddyMember, middleware),
            'downloadMessageContent': Method(self._downloadMessageContent, middleware),
            'downloadMessageContentPreview': Method(self._downloadMessageContentPreview, middleware),
            'downloadProfileImage': Method(self._downloadProfileImage, middleware),
            'downloadProfileImagePreview': Method(self._downloadProfileImagePreview, middleware),
            'getActiveMemberCountByBuddyMid': Method(self._getActiveMemberCountByBuddyMid, middleware),
            'getActiveMemberMidsByBuddyMid': Method(self._getActiveMemberMidsByBuddyMid, middleware),
            'getAllBuddyMembers': Method(self._getAllBuddyMembers, middleware),
            'getBlockedBuddyMembers': Method(self._getBlockedBuddyMembers, middleware),
            'getBlockerCountByBuddyMid': Method(self._getBlockerCountByBuddyMid, middleware),
            'getBuddyDetailByMid': Method(self._getBuddyDetailByMid, middleware),
            'getBuddyProfile': Method(self._getBuddyProfile, middleware),
            'getContactTicket': Method(self._getContactTicket, middleware),
            'getMemberCountByBuddyMid': Method(self._getMemberCountByBuddyMid, middleware),
            'getSendBuddyMessageResult': Method(self._getSendBuddyMessageResult, middleware),
            'getSetBuddyOnAirResult': Method(self._getSetBuddyOnAirResult, middleware),
            'getUpdateBuddyProfileResult': Method(self._getUpdateBuddyProfileResult, middleware),
            'isBuddyOnAirByMid': Method(self._isBuddyOnAirByMid, middleware),
            'linkAndSendBuddyContentMessageToAllAsync': Method(self._linkAndSendBuddyContentMessageToAllAsync, middleware),
            'linkAndSendBuddyContentMessageToMids': Method(self._linkAndSendBuddyContentMessageToMids, middleware),
            'notifyBuddyBlocked': Method(self._notifyBuddyBlocked, middleware),
            'notifyBuddyUnblocked': Method(self._notifyBuddyUnblocked, middleware),
            'registerBuddy': Method(self._registerBuddy, middleware),
            'registerBuddyAdmin': Method(self._registerBuddyAdmin, middleware),
            'reissueContactTicket': Method(self._reissueContactTicket, middleware),
            'removeBuddyMember': Method(self._removeBuddyMember, middleware),
            'removeBuddyMembers': Method(self._removeBuddyMembers, middleware),
            'sendBuddyContentMessageToAll': Method(self._sendBuddyContentMessageToAll, middleware),
            'sendBuddyContentMessageToAllAsync': Method(self._sendBuddyContentMessageToAllAsync, middleware),
            'sendBuddyContentMessageToMids': Method(self._sendBuddyContentMessageToMids, middleware),
            'sendBuddyContentMessageToMidsAsync': Method(self._sendBuddyContentMessageToMidsAsync, middleware),
            'sendBuddyMessageToAll': Method(self._sendBuddyMessageToAll, middleware),
            'sendBuddyMessageToAllAsync': Method(self._sendBuddyMessageToAllAsync, middleware),
            'sendBuddyMessageToMids': Method(self._sendBuddyMessageToMids, middleware),
            'sendBuddyMessageToMidsAsync': Method(self._sendBuddyMessageToMidsAsync, middleware),
            'sendIndividualEventToAllAsync': Method(self._sendIndividualEventToAllAsync, middleware),
            'setBuddyOnAir': Method(self._setBuddyOnAir, middleware),
            'setBuddyOnAirAsync': Method(self._setBuddyOnAirAsync, middleware),
            'storeMessage': Method(self._storeMessage, middleware),
            'unblockBuddyMember': Method(self._unblockBuddyMember, middleware),
            'unregisterBuddy': Method(self._unregisterBuddy, middleware),
            'unregisterBuddyAdmin': Method(self._unregisterBuddyAdmin, middleware),
            'updateBuddyAdminProfileAttribute': Method(self._updateBuddyAdminProfileAttribute, middleware),
            'updateBuddyAdminProfileImage': Method(self._updateBuddyAdminProfileImage, middleware),
            'updateBuddyProfileAttributes': Method(self._updateBuddyProfileAttributes, middleware),
            'updateBuddyProfileAttributesAsync': Method(self._updateBuddyProfileAttributesAsync, middleware),
            'updateBuddyProfileImage': Method(self._updateBuddyProfileImage, middleware),
            'updateBuddyProfileImageAsync': Method(self._updateBuddyProfileImageAsync, middleware),
            'updateBuddySearchId': Method(self._updateBuddySearchId, middleware),
            'updateBuddySettings': Method(self._updateBuddySettings, middleware),
            'uploadBuddyContent': Method(self._uploadBuddyContent, middleware),
        }

    def addBuddyMember(self, ctx, requestId, userMid):
        """
        Args:
            ctx: FContext
            requestId: string
            userMid: string
        """
        return self._methods['addBuddyMember']([ctx, requestId, userMid])

    def _addBuddyMember(self, ctx, requestId, userMid):
        self._send_addBuddyMember(ctx, requestId, userMid)
        self._recv_addBuddyMember(ctx)

    def _send_addBuddyMember(self, ctx, requestId, userMid):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('addBuddyMember', TMessageType.CALL, 0)
            args = addBuddyMember_args()
            args.requestId = requestId
            args.userMid = userMid
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_addBuddyMember(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = addBuddyMember_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def addBuddyMembers(self, ctx, requestId, userMids):
        """
        Args:
            ctx: FContext
            requestId: string
            userMids: list of string
        """
        return self._methods['addBuddyMembers']([ctx, requestId, userMids])

    def _addBuddyMembers(self, ctx, requestId, userMids):
        self._send_addBuddyMembers(ctx, requestId, userMids)
        self._recv_addBuddyMembers(ctx)

    def _send_addBuddyMembers(self, ctx, requestId, userMids):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('addBuddyMembers', TMessageType.CALL, 0)
            args = addBuddyMembers_args()
            args.requestId = requestId
            args.userMids = userMids
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_addBuddyMembers(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = addBuddyMembers_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def blockBuddyMember(self, ctx, requestId, mid):
        """
        Args:
            ctx: FContext
            requestId: string
            mid: string
        """
        return self._methods['blockBuddyMember']([ctx, requestId, mid])

    def _blockBuddyMember(self, ctx, requestId, mid):
        self._send_blockBuddyMember(ctx, requestId, mid)
        self._recv_blockBuddyMember(ctx)

    def _send_blockBuddyMember(self, ctx, requestId, mid):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('blockBuddyMember', TMessageType.CALL, 0)
            args = blockBuddyMember_args()
            args.requestId = requestId
            args.mid = mid
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_blockBuddyMember(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = blockBuddyMember_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def commitSendMessagesToAll(self, ctx, requestIdList):
        """
        Args:
            ctx: FContext
            requestIdList: list of string
        """
        return self._methods['commitSendMessagesToAll']([ctx, requestIdList])

    def _commitSendMessagesToAll(self, ctx, requestIdList):
        self._send_commitSendMessagesToAll(ctx, requestIdList)
        return self._recv_commitSendMessagesToAll(ctx)

    def _send_commitSendMessagesToAll(self, ctx, requestIdList):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('commitSendMessagesToAll', TMessageType.CALL, 0)
            args = commitSendMessagesToAll_args()
            args.requestIdList = requestIdList
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_commitSendMessagesToAll(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = commitSendMessagesToAll_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "commitSendMessagesToAll failed: unknown result")
        raise x

    def commitSendMessagesToMids(self, ctx, requestIdList, mids):
        """
        Args:
            ctx: FContext
            requestIdList: list of string
            mids: list of string
        """
        return self._methods['commitSendMessagesToMids']([ctx, requestIdList, mids])

    def _commitSendMessagesToMids(self, ctx, requestIdList, mids):
        self._send_commitSendMessagesToMids(ctx, requestIdList, mids)
        return self._recv_commitSendMessagesToMids(ctx)

    def _send_commitSendMessagesToMids(self, ctx, requestIdList, mids):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('commitSendMessagesToMids', TMessageType.CALL, 0)
            args = commitSendMessagesToMids_args()
            args.requestIdList = requestIdList
            args.mids = mids
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_commitSendMessagesToMids(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = commitSendMessagesToMids_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "commitSendMessagesToMids failed: unknown result")
        raise x

    def containsBuddyMember(self, ctx, requestId, userMid):
        """
        Args:
            ctx: FContext
            requestId: string
            userMid: string
        """
        return self._methods['containsBuddyMember']([ctx, requestId, userMid])

    def _containsBuddyMember(self, ctx, requestId, userMid):
        self._send_containsBuddyMember(ctx, requestId, userMid)
        return self._recv_containsBuddyMember(ctx)

    def _send_containsBuddyMember(self, ctx, requestId, userMid):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('containsBuddyMember', TMessageType.CALL, 0)
            args = containsBuddyMember_args()
            args.requestId = requestId
            args.userMid = userMid
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_containsBuddyMember(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = containsBuddyMember_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "containsBuddyMember failed: unknown result")
        raise x

    def downloadMessageContent(self, ctx, requestId, messageId):
        """
        Args:
            ctx: FContext
            requestId: string
            messageId: string
        """
        return self._methods['downloadMessageContent']([ctx, requestId, messageId])

    def _downloadMessageContent(self, ctx, requestId, messageId):
        self._send_downloadMessageContent(ctx, requestId, messageId)
        return self._recv_downloadMessageContent(ctx)

    def _send_downloadMessageContent(self, ctx, requestId, messageId):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('downloadMessageContent', TMessageType.CALL, 0)
            args = downloadMessageContent_args()
            args.requestId = requestId
            args.messageId = messageId
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_downloadMessageContent(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = downloadMessageContent_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "downloadMessageContent failed: unknown result")
        raise x

    def downloadMessageContentPreview(self, ctx, requestId, messageId):
        """
        Args:
            ctx: FContext
            requestId: string
            messageId: string
        """
        return self._methods['downloadMessageContentPreview']([ctx, requestId, messageId])

    def _downloadMessageContentPreview(self, ctx, requestId, messageId):
        self._send_downloadMessageContentPreview(ctx, requestId, messageId)
        return self._recv_downloadMessageContentPreview(ctx)

    def _send_downloadMessageContentPreview(self, ctx, requestId, messageId):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('downloadMessageContentPreview', TMessageType.CALL, 0)
            args = downloadMessageContentPreview_args()
            args.requestId = requestId
            args.messageId = messageId
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_downloadMessageContentPreview(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = downloadMessageContentPreview_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "downloadMessageContentPreview failed: unknown result")
        raise x

    def downloadProfileImage(self, ctx, requestId):
        """
        Args:
            ctx: FContext
            requestId: string
        """
        return self._methods['downloadProfileImage']([ctx, requestId])

    def _downloadProfileImage(self, ctx, requestId):
        self._send_downloadProfileImage(ctx, requestId)
        return self._recv_downloadProfileImage(ctx)

    def _send_downloadProfileImage(self, ctx, requestId):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('downloadProfileImage', TMessageType.CALL, 0)
            args = downloadProfileImage_args()
            args.requestId = requestId
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_downloadProfileImage(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = downloadProfileImage_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "downloadProfileImage failed: unknown result")
        raise x

    def downloadProfileImagePreview(self, ctx, requestId):
        """
        Args:
            ctx: FContext
            requestId: string
        """
        return self._methods['downloadProfileImagePreview']([ctx, requestId])

    def _downloadProfileImagePreview(self, ctx, requestId):
        self._send_downloadProfileImagePreview(ctx, requestId)
        return self._recv_downloadProfileImagePreview(ctx)

    def _send_downloadProfileImagePreview(self, ctx, requestId):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('downloadProfileImagePreview', TMessageType.CALL, 0)
            args = downloadProfileImagePreview_args()
            args.requestId = requestId
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_downloadProfileImagePreview(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = downloadProfileImagePreview_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "downloadProfileImagePreview failed: unknown result")
        raise x

    def getActiveMemberCountByBuddyMid(self, ctx, buddyMid):
        """
        Args:
            ctx: FContext
            buddyMid: string
        """
        return self._methods['getActiveMemberCountByBuddyMid']([ctx, buddyMid])

    def _getActiveMemberCountByBuddyMid(self, ctx, buddyMid):
        self._send_getActiveMemberCountByBuddyMid(ctx, buddyMid)
        return self._recv_getActiveMemberCountByBuddyMid(ctx)

    def _send_getActiveMemberCountByBuddyMid(self, ctx, buddyMid):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('getActiveMemberCountByBuddyMid', TMessageType.CALL, 0)
            args = getActiveMemberCountByBuddyMid_args()
            args.buddyMid = buddyMid
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_getActiveMemberCountByBuddyMid(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = getActiveMemberCountByBuddyMid_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "getActiveMemberCountByBuddyMid failed: unknown result")
        raise x

    def getActiveMemberMidsByBuddyMid(self, ctx, buddyMid):
        """
        Args:
            ctx: FContext
            buddyMid: string
        """
        return self._methods['getActiveMemberMidsByBuddyMid']([ctx, buddyMid])

    def _getActiveMemberMidsByBuddyMid(self, ctx, buddyMid):
        self._send_getActiveMemberMidsByBuddyMid(ctx, buddyMid)
        return self._recv_getActiveMemberMidsByBuddyMid(ctx)

    def _send_getActiveMemberMidsByBuddyMid(self, ctx, buddyMid):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('getActiveMemberMidsByBuddyMid', TMessageType.CALL, 0)
            args = getActiveMemberMidsByBuddyMid_args()
            args.buddyMid = buddyMid
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_getActiveMemberMidsByBuddyMid(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = getActiveMemberMidsByBuddyMid_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "getActiveMemberMidsByBuddyMid failed: unknown result")
        raise x

    def getAllBuddyMembers(self, ctx):
        """
        Args:
            ctx: FContext
        """
        return self._methods['getAllBuddyMembers']([ctx])

    def _getAllBuddyMembers(self, ctx):
        self._send_getAllBuddyMembers(ctx)
        return self._recv_getAllBuddyMembers(ctx)

    def _send_getAllBuddyMembers(self, ctx):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('getAllBuddyMembers', TMessageType.CALL, 0)
            args = getAllBuddyMembers_args()
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_getAllBuddyMembers(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = getAllBuddyMembers_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "getAllBuddyMembers failed: unknown result")
        raise x

    def getBlockedBuddyMembers(self, ctx):
        """
        Args:
            ctx: FContext
        """
        return self._methods['getBlockedBuddyMembers']([ctx])

    def _getBlockedBuddyMembers(self, ctx):
        self._send_getBlockedBuddyMembers(ctx)
        return self._recv_getBlockedBuddyMembers(ctx)

    def _send_getBlockedBuddyMembers(self, ctx):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('getBlockedBuddyMembers', TMessageType.CALL, 0)
            args = getBlockedBuddyMembers_args()
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_getBlockedBuddyMembers(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = getBlockedBuddyMembers_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "getBlockedBuddyMembers failed: unknown result")
        raise x

    def getBlockerCountByBuddyMid(self, ctx, buddyMid):
        """
        Args:
            ctx: FContext
            buddyMid: string
        """
        return self._methods['getBlockerCountByBuddyMid']([ctx, buddyMid])

    def _getBlockerCountByBuddyMid(self, ctx, buddyMid):
        self._send_getBlockerCountByBuddyMid(ctx, buddyMid)
        return self._recv_getBlockerCountByBuddyMid(ctx)

    def _send_getBlockerCountByBuddyMid(self, ctx, buddyMid):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('getBlockerCountByBuddyMid', TMessageType.CALL, 0)
            args = getBlockerCountByBuddyMid_args()
            args.buddyMid = buddyMid
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_getBlockerCountByBuddyMid(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = getBlockerCountByBuddyMid_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "getBlockerCountByBuddyMid failed: unknown result")
        raise x

    def getBuddyDetailByMid(self, ctx, buddyMid):
        """
        Args:
            ctx: FContext
            buddyMid: string
        """
        return self._methods['getBuddyDetailByMid']([ctx, buddyMid])

    def _getBuddyDetailByMid(self, ctx, buddyMid):
        self._send_getBuddyDetailByMid(ctx, buddyMid)
        return self._recv_getBuddyDetailByMid(ctx)

    def _send_getBuddyDetailByMid(self, ctx, buddyMid):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('getBuddyDetailByMid', TMessageType.CALL, 0)
            args = getBuddyDetailByMid_args()
            args.buddyMid = buddyMid
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_getBuddyDetailByMid(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = getBuddyDetailByMid_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "getBuddyDetailByMid failed: unknown result")
        raise x

    def getBuddyProfile(self, ctx):
        """
        Args:
            ctx: FContext
        """
        return self._methods['getBuddyProfile']([ctx])

    def _getBuddyProfile(self, ctx):
        self._send_getBuddyProfile(ctx)
        return self._recv_getBuddyProfile(ctx)

    def _send_getBuddyProfile(self, ctx):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('getBuddyProfile', TMessageType.CALL, 0)
            args = getBuddyProfile_args()
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_getBuddyProfile(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = getBuddyProfile_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "getBuddyProfile failed: unknown result")
        raise x

    def getContactTicket(self, ctx):
        """
        Args:
            ctx: FContext
        """
        return self._methods['getContactTicket']([ctx])

    def _getContactTicket(self, ctx):
        self._send_getContactTicket(ctx)
        return self._recv_getContactTicket(ctx)

    def _send_getContactTicket(self, ctx):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('getContactTicket', TMessageType.CALL, 0)
            args = getContactTicket_args()
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_getContactTicket(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = getContactTicket_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "getContactTicket failed: unknown result")
        raise x

    def getMemberCountByBuddyMid(self, ctx, buddyMid):
        """
        Args:
            ctx: FContext
            buddyMid: string
        """
        return self._methods['getMemberCountByBuddyMid']([ctx, buddyMid])

    def _getMemberCountByBuddyMid(self, ctx, buddyMid):
        self._send_getMemberCountByBuddyMid(ctx, buddyMid)
        return self._recv_getMemberCountByBuddyMid(ctx)

    def _send_getMemberCountByBuddyMid(self, ctx, buddyMid):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('getMemberCountByBuddyMid', TMessageType.CALL, 0)
            args = getMemberCountByBuddyMid_args()
            args.buddyMid = buddyMid
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_getMemberCountByBuddyMid(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = getMemberCountByBuddyMid_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "getMemberCountByBuddyMid failed: unknown result")
        raise x

    def getSendBuddyMessageResult(self, ctx, sendBuddyMessageRequestId):
        """
        Args:
            ctx: FContext
            sendBuddyMessageRequestId: string
        """
        return self._methods['getSendBuddyMessageResult']([ctx, sendBuddyMessageRequestId])

    def _getSendBuddyMessageResult(self, ctx, sendBuddyMessageRequestId):
        self._send_getSendBuddyMessageResult(ctx, sendBuddyMessageRequestId)
        return self._recv_getSendBuddyMessageResult(ctx)

    def _send_getSendBuddyMessageResult(self, ctx, sendBuddyMessageRequestId):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('getSendBuddyMessageResult', TMessageType.CALL, 0)
            args = getSendBuddyMessageResult_args()
            args.sendBuddyMessageRequestId = sendBuddyMessageRequestId
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_getSendBuddyMessageResult(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = getSendBuddyMessageResult_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "getSendBuddyMessageResult failed: unknown result")
        raise x

    def getSetBuddyOnAirResult(self, ctx, setBuddyOnAirRequestId):
        """
        Args:
            ctx: FContext
            setBuddyOnAirRequestId: string
        """
        return self._methods['getSetBuddyOnAirResult']([ctx, setBuddyOnAirRequestId])

    def _getSetBuddyOnAirResult(self, ctx, setBuddyOnAirRequestId):
        self._send_getSetBuddyOnAirResult(ctx, setBuddyOnAirRequestId)
        return self._recv_getSetBuddyOnAirResult(ctx)

    def _send_getSetBuddyOnAirResult(self, ctx, setBuddyOnAirRequestId):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('getSetBuddyOnAirResult', TMessageType.CALL, 0)
            args = getSetBuddyOnAirResult_args()
            args.setBuddyOnAirRequestId = setBuddyOnAirRequestId
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_getSetBuddyOnAirResult(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = getSetBuddyOnAirResult_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "getSetBuddyOnAirResult failed: unknown result")
        raise x

    def getUpdateBuddyProfileResult(self, ctx, updateBuddyProfileRequestId):
        """
        Args:
            ctx: FContext
            updateBuddyProfileRequestId: string
        """
        return self._methods['getUpdateBuddyProfileResult']([ctx, updateBuddyProfileRequestId])

    def _getUpdateBuddyProfileResult(self, ctx, updateBuddyProfileRequestId):
        self._send_getUpdateBuddyProfileResult(ctx, updateBuddyProfileRequestId)
        return self._recv_getUpdateBuddyProfileResult(ctx)

    def _send_getUpdateBuddyProfileResult(self, ctx, updateBuddyProfileRequestId):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('getUpdateBuddyProfileResult', TMessageType.CALL, 0)
            args = getUpdateBuddyProfileResult_args()
            args.updateBuddyProfileRequestId = updateBuddyProfileRequestId
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_getUpdateBuddyProfileResult(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = getUpdateBuddyProfileResult_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "getUpdateBuddyProfileResult failed: unknown result")
        raise x

    def isBuddyOnAirByMid(self, ctx, buddyMid):
        """
        Args:
            ctx: FContext
            buddyMid: string
        """
        return self._methods['isBuddyOnAirByMid']([ctx, buddyMid])

    def _isBuddyOnAirByMid(self, ctx, buddyMid):
        self._send_isBuddyOnAirByMid(ctx, buddyMid)
        return self._recv_isBuddyOnAirByMid(ctx)

    def _send_isBuddyOnAirByMid(self, ctx, buddyMid):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('isBuddyOnAirByMid', TMessageType.CALL, 0)
            args = isBuddyOnAirByMid_args()
            args.buddyMid = buddyMid
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_isBuddyOnAirByMid(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = isBuddyOnAirByMid_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "isBuddyOnAirByMid failed: unknown result")
        raise x

    def linkAndSendBuddyContentMessageToAllAsync(self, ctx, requestId, msg, sourceContentId):
        """
        Args:
            ctx: FContext
            requestId: string
            msg: Message
            sourceContentId: string
        """
        return self._methods['linkAndSendBuddyContentMessageToAllAsync']([ctx, requestId, msg, sourceContentId])

    def _linkAndSendBuddyContentMessageToAllAsync(self, ctx, requestId, msg, sourceContentId):
        self._send_linkAndSendBuddyContentMessageToAllAsync(ctx, requestId, msg, sourceContentId)
        return self._recv_linkAndSendBuddyContentMessageToAllAsync(ctx)

    def _send_linkAndSendBuddyContentMessageToAllAsync(self, ctx, requestId, msg, sourceContentId):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('linkAndSendBuddyContentMessageToAllAsync', TMessageType.CALL, 0)
            args = linkAndSendBuddyContentMessageToAllAsync_args()
            args.requestId = requestId
            args.msg = msg
            args.sourceContentId = sourceContentId
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_linkAndSendBuddyContentMessageToAllAsync(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = linkAndSendBuddyContentMessageToAllAsync_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "linkAndSendBuddyContentMessageToAllAsync failed: unknown result")
        raise x

    def linkAndSendBuddyContentMessageToMids(self, ctx, requestId, msg, sourceContentId, mids):
        """
        Args:
            ctx: FContext
            requestId: string
            msg: Message
            sourceContentId: string
            mids: list of string
        """
        return self._methods['linkAndSendBuddyContentMessageToMids']([ctx, requestId, msg, sourceContentId, mids])

    def _linkAndSendBuddyContentMessageToMids(self, ctx, requestId, msg, sourceContentId, mids):
        self._send_linkAndSendBuddyContentMessageToMids(ctx, requestId, msg, sourceContentId, mids)
        return self._recv_linkAndSendBuddyContentMessageToMids(ctx)

    def _send_linkAndSendBuddyContentMessageToMids(self, ctx, requestId, msg, sourceContentId, mids):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('linkAndSendBuddyContentMessageToMids', TMessageType.CALL, 0)
            args = linkAndSendBuddyContentMessageToMids_args()
            args.requestId = requestId
            args.msg = msg
            args.sourceContentId = sourceContentId
            args.mids = mids
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_linkAndSendBuddyContentMessageToMids(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = linkAndSendBuddyContentMessageToMids_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "linkAndSendBuddyContentMessageToMids failed: unknown result")
        raise x

    def notifyBuddyBlocked(self, ctx, buddyMid, blockerMid):
        """
        Args:
            ctx: FContext
            buddyMid: string
            blockerMid: string
        """
        return self._methods['notifyBuddyBlocked']([ctx, buddyMid, blockerMid])

    def _notifyBuddyBlocked(self, ctx, buddyMid, blockerMid):
        self._send_notifyBuddyBlocked(ctx, buddyMid, blockerMid)
        self._recv_notifyBuddyBlocked(ctx)

    def _send_notifyBuddyBlocked(self, ctx, buddyMid, blockerMid):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('notifyBuddyBlocked', TMessageType.CALL, 0)
            args = notifyBuddyBlocked_args()
            args.buddyMid = buddyMid
            args.blockerMid = blockerMid
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_notifyBuddyBlocked(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = notifyBuddyBlocked_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def notifyBuddyUnblocked(self, ctx, buddyMid, blockerMid):
        """
        Args:
            ctx: FContext
            buddyMid: string
            blockerMid: string
        """
        return self._methods['notifyBuddyUnblocked']([ctx, buddyMid, blockerMid])

    def _notifyBuddyUnblocked(self, ctx, buddyMid, blockerMid):
        self._send_notifyBuddyUnblocked(ctx, buddyMid, blockerMid)
        self._recv_notifyBuddyUnblocked(ctx)

    def _send_notifyBuddyUnblocked(self, ctx, buddyMid, blockerMid):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('notifyBuddyUnblocked', TMessageType.CALL, 0)
            args = notifyBuddyUnblocked_args()
            args.buddyMid = buddyMid
            args.blockerMid = blockerMid
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_notifyBuddyUnblocked(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = notifyBuddyUnblocked_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def registerBuddy(self, ctx, buddyId, searchId, displayName, statusMeessage, picture, settings):
        """
        Args:
            ctx: FContext
            buddyId: string
            searchId: string
            displayName: string
            statusMeessage: string
            picture: binary string
            settings: dict of <string, string>
        """
        return self._methods['registerBuddy']([ctx, buddyId, searchId, displayName, statusMeessage, picture, settings])

    def _registerBuddy(self, ctx, buddyId, searchId, displayName, statusMeessage, picture, settings):
        self._send_registerBuddy(ctx, buddyId, searchId, displayName, statusMeessage, picture, settings)
        return self._recv_registerBuddy(ctx)

    def _send_registerBuddy(self, ctx, buddyId, searchId, displayName, statusMeessage, picture, settings):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('registerBuddy', TMessageType.CALL, 0)
            args = registerBuddy_args()
            args.buddyId = buddyId
            args.searchId = searchId
            args.displayName = displayName
            args.statusMeessage = statusMeessage
            args.picture = picture
            args.settings = settings
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_registerBuddy(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = registerBuddy_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "registerBuddy failed: unknown result")
        raise x

    def registerBuddyAdmin(self, ctx, buddyId, searchId, displayName, statusMessage, picture):
        """
        Args:
            ctx: FContext
            buddyId: string
            searchId: string
            displayName: string
            statusMessage: string
            picture: binary string
        """
        return self._methods['registerBuddyAdmin']([ctx, buddyId, searchId, displayName, statusMessage, picture])

    def _registerBuddyAdmin(self, ctx, buddyId, searchId, displayName, statusMessage, picture):
        self._send_registerBuddyAdmin(ctx, buddyId, searchId, displayName, statusMessage, picture)
        return self._recv_registerBuddyAdmin(ctx)

    def _send_registerBuddyAdmin(self, ctx, buddyId, searchId, displayName, statusMessage, picture):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('registerBuddyAdmin', TMessageType.CALL, 0)
            args = registerBuddyAdmin_args()
            args.buddyId = buddyId
            args.searchId = searchId
            args.displayName = displayName
            args.statusMessage = statusMessage
            args.picture = picture
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_registerBuddyAdmin(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = registerBuddyAdmin_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "registerBuddyAdmin failed: unknown result")
        raise x

    def reissueContactTicket(self, ctx, expirationTime, maxUseCount):
        """
        Args:
            ctx: FContext
            expirationTime: int (signed 64 bits)
            maxUseCount: int (signed 32 bits)
        """
        return self._methods['reissueContactTicket']([ctx, expirationTime, maxUseCount])

    def _reissueContactTicket(self, ctx, expirationTime, maxUseCount):
        self._send_reissueContactTicket(ctx, expirationTime, maxUseCount)
        return self._recv_reissueContactTicket(ctx)

    def _send_reissueContactTicket(self, ctx, expirationTime, maxUseCount):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('reissueContactTicket', TMessageType.CALL, 0)
            args = reissueContactTicket_args()
            args.expirationTime = expirationTime
            args.maxUseCount = maxUseCount
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_reissueContactTicket(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = reissueContactTicket_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "reissueContactTicket failed: unknown result")
        raise x

    def removeBuddyMember(self, ctx, requestId, userMid):
        """
        Args:
            ctx: FContext
            requestId: string
            userMid: string
        """
        return self._methods['removeBuddyMember']([ctx, requestId, userMid])

    def _removeBuddyMember(self, ctx, requestId, userMid):
        self._send_removeBuddyMember(ctx, requestId, userMid)
        self._recv_removeBuddyMember(ctx)

    def _send_removeBuddyMember(self, ctx, requestId, userMid):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('removeBuddyMember', TMessageType.CALL, 0)
            args = removeBuddyMember_args()
            args.requestId = requestId
            args.userMid = userMid
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_removeBuddyMember(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = removeBuddyMember_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def removeBuddyMembers(self, ctx, requestId, userMids):
        """
        Args:
            ctx: FContext
            requestId: string
            userMids: list of string
        """
        return self._methods['removeBuddyMembers']([ctx, requestId, userMids])

    def _removeBuddyMembers(self, ctx, requestId, userMids):
        self._send_removeBuddyMembers(ctx, requestId, userMids)
        self._recv_removeBuddyMembers(ctx)

    def _send_removeBuddyMembers(self, ctx, requestId, userMids):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('removeBuddyMembers', TMessageType.CALL, 0)
            args = removeBuddyMembers_args()
            args.requestId = requestId
            args.userMids = userMids
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_removeBuddyMembers(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = removeBuddyMembers_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sendBuddyContentMessageToAll(self, ctx, requestId, msg, content):
        """
        Args:
            ctx: FContext
            requestId: string
            msg: Message
            content: binary string
        """
        return self._methods['sendBuddyContentMessageToAll']([ctx, requestId, msg, content])

    def _sendBuddyContentMessageToAll(self, ctx, requestId, msg, content):
        self._send_sendBuddyContentMessageToAll(ctx, requestId, msg, content)
        return self._recv_sendBuddyContentMessageToAll(ctx)

    def _send_sendBuddyContentMessageToAll(self, ctx, requestId, msg, content):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('sendBuddyContentMessageToAll', TMessageType.CALL, 0)
            args = sendBuddyContentMessageToAll_args()
            args.requestId = requestId
            args.msg = msg
            args.content = content
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_sendBuddyContentMessageToAll(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = sendBuddyContentMessageToAll_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "sendBuddyContentMessageToAll failed: unknown result")
        raise x

    def sendBuddyContentMessageToAllAsync(self, ctx, requestId, msg, content):
        """
        Args:
            ctx: FContext
            requestId: string
            msg: Message
            content: binary string
        """
        return self._methods['sendBuddyContentMessageToAllAsync']([ctx, requestId, msg, content])

    def _sendBuddyContentMessageToAllAsync(self, ctx, requestId, msg, content):
        self._send_sendBuddyContentMessageToAllAsync(ctx, requestId, msg, content)
        return self._recv_sendBuddyContentMessageToAllAsync(ctx)

    def _send_sendBuddyContentMessageToAllAsync(self, ctx, requestId, msg, content):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('sendBuddyContentMessageToAllAsync', TMessageType.CALL, 0)
            args = sendBuddyContentMessageToAllAsync_args()
            args.requestId = requestId
            args.msg = msg
            args.content = content
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_sendBuddyContentMessageToAllAsync(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = sendBuddyContentMessageToAllAsync_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "sendBuddyContentMessageToAllAsync failed: unknown result")
        raise x

    def sendBuddyContentMessageToMids(self, ctx, requestId, msg, content, mids):
        """
        Args:
            ctx: FContext
            requestId: string
            msg: Message
            content: binary string
            mids: list of string
        """
        return self._methods['sendBuddyContentMessageToMids']([ctx, requestId, msg, content, mids])

    def _sendBuddyContentMessageToMids(self, ctx, requestId, msg, content, mids):
        self._send_sendBuddyContentMessageToMids(ctx, requestId, msg, content, mids)
        return self._recv_sendBuddyContentMessageToMids(ctx)

    def _send_sendBuddyContentMessageToMids(self, ctx, requestId, msg, content, mids):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('sendBuddyContentMessageToMids', TMessageType.CALL, 0)
            args = sendBuddyContentMessageToMids_args()
            args.requestId = requestId
            args.msg = msg
            args.content = content
            args.mids = mids
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_sendBuddyContentMessageToMids(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = sendBuddyContentMessageToMids_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "sendBuddyContentMessageToMids failed: unknown result")
        raise x

    def sendBuddyContentMessageToMidsAsync(self, ctx, requestId, msg, content, mids):
        """
        Args:
            ctx: FContext
            requestId: string
            msg: Message
            content: binary string
            mids: list of string
        """
        return self._methods['sendBuddyContentMessageToMidsAsync']([ctx, requestId, msg, content, mids])

    def _sendBuddyContentMessageToMidsAsync(self, ctx, requestId, msg, content, mids):
        self._send_sendBuddyContentMessageToMidsAsync(ctx, requestId, msg, content, mids)
        return self._recv_sendBuddyContentMessageToMidsAsync(ctx)

    def _send_sendBuddyContentMessageToMidsAsync(self, ctx, requestId, msg, content, mids):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('sendBuddyContentMessageToMidsAsync', TMessageType.CALL, 0)
            args = sendBuddyContentMessageToMidsAsync_args()
            args.requestId = requestId
            args.msg = msg
            args.content = content
            args.mids = mids
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_sendBuddyContentMessageToMidsAsync(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = sendBuddyContentMessageToMidsAsync_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "sendBuddyContentMessageToMidsAsync failed: unknown result")
        raise x

    def sendBuddyMessageToAll(self, ctx, requestId, msg):
        """
        Args:
            ctx: FContext
            requestId: string
            msg: Message
        """
        return self._methods['sendBuddyMessageToAll']([ctx, requestId, msg])

    def _sendBuddyMessageToAll(self, ctx, requestId, msg):
        self._send_sendBuddyMessageToAll(ctx, requestId, msg)
        return self._recv_sendBuddyMessageToAll(ctx)

    def _send_sendBuddyMessageToAll(self, ctx, requestId, msg):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('sendBuddyMessageToAll', TMessageType.CALL, 0)
            args = sendBuddyMessageToAll_args()
            args.requestId = requestId
            args.msg = msg
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_sendBuddyMessageToAll(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = sendBuddyMessageToAll_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "sendBuddyMessageToAll failed: unknown result")
        raise x

    def sendBuddyMessageToAllAsync(self, ctx, requestId, msg):
        """
        Args:
            ctx: FContext
            requestId: string
            msg: Message
        """
        return self._methods['sendBuddyMessageToAllAsync']([ctx, requestId, msg])

    def _sendBuddyMessageToAllAsync(self, ctx, requestId, msg):
        self._send_sendBuddyMessageToAllAsync(ctx, requestId, msg)
        return self._recv_sendBuddyMessageToAllAsync(ctx)

    def _send_sendBuddyMessageToAllAsync(self, ctx, requestId, msg):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('sendBuddyMessageToAllAsync', TMessageType.CALL, 0)
            args = sendBuddyMessageToAllAsync_args()
            args.requestId = requestId
            args.msg = msg
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_sendBuddyMessageToAllAsync(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = sendBuddyMessageToAllAsync_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "sendBuddyMessageToAllAsync failed: unknown result")
        raise x

    def sendBuddyMessageToMids(self, ctx, requestId, msg, mids):
        """
        Args:
            ctx: FContext
            requestId: string
            msg: Message
            mids: list of string
        """
        return self._methods['sendBuddyMessageToMids']([ctx, requestId, msg, mids])

    def _sendBuddyMessageToMids(self, ctx, requestId, msg, mids):
        self._send_sendBuddyMessageToMids(ctx, requestId, msg, mids)
        return self._recv_sendBuddyMessageToMids(ctx)

    def _send_sendBuddyMessageToMids(self, ctx, requestId, msg, mids):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('sendBuddyMessageToMids', TMessageType.CALL, 0)
            args = sendBuddyMessageToMids_args()
            args.requestId = requestId
            args.msg = msg
            args.mids = mids
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_sendBuddyMessageToMids(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = sendBuddyMessageToMids_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "sendBuddyMessageToMids failed: unknown result")
        raise x

    def sendBuddyMessageToMidsAsync(self, ctx, requestId, msg, mids):
        """
        Args:
            ctx: FContext
            requestId: string
            msg: Message
            mids: list of string
        """
        return self._methods['sendBuddyMessageToMidsAsync']([ctx, requestId, msg, mids])

    def _sendBuddyMessageToMidsAsync(self, ctx, requestId, msg, mids):
        self._send_sendBuddyMessageToMidsAsync(ctx, requestId, msg, mids)
        return self._recv_sendBuddyMessageToMidsAsync(ctx)

    def _send_sendBuddyMessageToMidsAsync(self, ctx, requestId, msg, mids):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('sendBuddyMessageToMidsAsync', TMessageType.CALL, 0)
            args = sendBuddyMessageToMidsAsync_args()
            args.requestId = requestId
            args.msg = msg
            args.mids = mids
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_sendBuddyMessageToMidsAsync(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = sendBuddyMessageToMidsAsync_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "sendBuddyMessageToMidsAsync failed: unknown result")
        raise x

    def sendIndividualEventToAllAsync(self, ctx, requestId, buddyMid, notificationStatus):
        """
        Args:
            ctx: FContext
            requestId: string
            buddyMid: string
            notificationStatus: NotificationStatus
        """
        return self._methods['sendIndividualEventToAllAsync']([ctx, requestId, buddyMid, notificationStatus])

    def _sendIndividualEventToAllAsync(self, ctx, requestId, buddyMid, notificationStatus):
        self._send_sendIndividualEventToAllAsync(ctx, requestId, buddyMid, notificationStatus)
        self._recv_sendIndividualEventToAllAsync(ctx)

    def _send_sendIndividualEventToAllAsync(self, ctx, requestId, buddyMid, notificationStatus):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('sendIndividualEventToAllAsync', TMessageType.CALL, 0)
            args = sendIndividualEventToAllAsync_args()
            args.requestId = requestId
            args.buddyMid = buddyMid
            args.notificationStatus = notificationStatus
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_sendIndividualEventToAllAsync(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = sendIndividualEventToAllAsync_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def setBuddyOnAir(self, ctx, requestId, onAir):
        """
        Args:
            ctx: FContext
            requestId: string
            onAir: boolean
        """
        return self._methods['setBuddyOnAir']([ctx, requestId, onAir])

    def _setBuddyOnAir(self, ctx, requestId, onAir):
        self._send_setBuddyOnAir(ctx, requestId, onAir)
        return self._recv_setBuddyOnAir(ctx)

    def _send_setBuddyOnAir(self, ctx, requestId, onAir):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('setBuddyOnAir', TMessageType.CALL, 0)
            args = setBuddyOnAir_args()
            args.requestId = requestId
            args.onAir = onAir
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_setBuddyOnAir(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = setBuddyOnAir_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "setBuddyOnAir failed: unknown result")
        raise x

    def setBuddyOnAirAsync(self, ctx, requestId, onAir):
        """
        Args:
            ctx: FContext
            requestId: string
            onAir: boolean
        """
        return self._methods['setBuddyOnAirAsync']([ctx, requestId, onAir])

    def _setBuddyOnAirAsync(self, ctx, requestId, onAir):
        self._send_setBuddyOnAirAsync(ctx, requestId, onAir)
        return self._recv_setBuddyOnAirAsync(ctx)

    def _send_setBuddyOnAirAsync(self, ctx, requestId, onAir):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('setBuddyOnAirAsync', TMessageType.CALL, 0)
            args = setBuddyOnAirAsync_args()
            args.requestId = requestId
            args.onAir = onAir
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_setBuddyOnAirAsync(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = setBuddyOnAirAsync_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "setBuddyOnAirAsync failed: unknown result")
        raise x

    def storeMessage(self, ctx, requestId, messageRequest):
        """
        Args:
            ctx: FContext
            requestId: string
            messageRequest: BuddyMessageRequest
        """
        return self._methods['storeMessage']([ctx, requestId, messageRequest])

    def _storeMessage(self, ctx, requestId, messageRequest):
        self._send_storeMessage(ctx, requestId, messageRequest)
        return self._recv_storeMessage(ctx)

    def _send_storeMessage(self, ctx, requestId, messageRequest):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('storeMessage', TMessageType.CALL, 0)
            args = storeMessage_args()
            args.requestId = requestId
            args.messageRequest = messageRequest
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_storeMessage(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = storeMessage_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "storeMessage failed: unknown result")
        raise x

    def unblockBuddyMember(self, ctx, requestId, mid):
        """
        Args:
            ctx: FContext
            requestId: string
            mid: string
        """
        return self._methods['unblockBuddyMember']([ctx, requestId, mid])

    def _unblockBuddyMember(self, ctx, requestId, mid):
        self._send_unblockBuddyMember(ctx, requestId, mid)
        self._recv_unblockBuddyMember(ctx)

    def _send_unblockBuddyMember(self, ctx, requestId, mid):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('unblockBuddyMember', TMessageType.CALL, 0)
            args = unblockBuddyMember_args()
            args.requestId = requestId
            args.mid = mid
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_unblockBuddyMember(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = unblockBuddyMember_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def unregisterBuddy(self, ctx, requestId):
        """
        Args:
            ctx: FContext
            requestId: string
        """
        return self._methods['unregisterBuddy']([ctx, requestId])

    def _unregisterBuddy(self, ctx, requestId):
        self._send_unregisterBuddy(ctx, requestId)
        self._recv_unregisterBuddy(ctx)

    def _send_unregisterBuddy(self, ctx, requestId):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('unregisterBuddy', TMessageType.CALL, 0)
            args = unregisterBuddy_args()
            args.requestId = requestId
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_unregisterBuddy(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = unregisterBuddy_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def unregisterBuddyAdmin(self, ctx, requestId):
        """
        Args:
            ctx: FContext
            requestId: string
        """
        return self._methods['unregisterBuddyAdmin']([ctx, requestId])

    def _unregisterBuddyAdmin(self, ctx, requestId):
        self._send_unregisterBuddyAdmin(ctx, requestId)
        self._recv_unregisterBuddyAdmin(ctx)

    def _send_unregisterBuddyAdmin(self, ctx, requestId):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('unregisterBuddyAdmin', TMessageType.CALL, 0)
            args = unregisterBuddyAdmin_args()
            args.requestId = requestId
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_unregisterBuddyAdmin(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = unregisterBuddyAdmin_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def updateBuddyAdminProfileAttribute(self, ctx, requestId, attributes):
        """
        Args:
            ctx: FContext
            requestId: string
            attributes: dict of <string, string>
        """
        return self._methods['updateBuddyAdminProfileAttribute']([ctx, requestId, attributes])

    def _updateBuddyAdminProfileAttribute(self, ctx, requestId, attributes):
        self._send_updateBuddyAdminProfileAttribute(ctx, requestId, attributes)
        self._recv_updateBuddyAdminProfileAttribute(ctx)

    def _send_updateBuddyAdminProfileAttribute(self, ctx, requestId, attributes):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('updateBuddyAdminProfileAttribute', TMessageType.CALL, 0)
            args = updateBuddyAdminProfileAttribute_args()
            args.requestId = requestId
            args.attributes = attributes
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_updateBuddyAdminProfileAttribute(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = updateBuddyAdminProfileAttribute_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def updateBuddyAdminProfileImage(self, ctx, requestId, picture):
        """
        Args:
            ctx: FContext
            requestId: string
            picture: binary string
        """
        return self._methods['updateBuddyAdminProfileImage']([ctx, requestId, picture])

    def _updateBuddyAdminProfileImage(self, ctx, requestId, picture):
        self._send_updateBuddyAdminProfileImage(ctx, requestId, picture)
        self._recv_updateBuddyAdminProfileImage(ctx)

    def _send_updateBuddyAdminProfileImage(self, ctx, requestId, picture):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('updateBuddyAdminProfileImage', TMessageType.CALL, 0)
            args = updateBuddyAdminProfileImage_args()
            args.requestId = requestId
            args.picture = picture
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_updateBuddyAdminProfileImage(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = updateBuddyAdminProfileImage_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def updateBuddyProfileAttributes(self, ctx, requestId, attributes):
        """
        Args:
            ctx: FContext
            requestId: string
            attributes: dict of <string, string>
        """
        return self._methods['updateBuddyProfileAttributes']([ctx, requestId, attributes])

    def _updateBuddyProfileAttributes(self, ctx, requestId, attributes):
        self._send_updateBuddyProfileAttributes(ctx, requestId, attributes)
        return self._recv_updateBuddyProfileAttributes(ctx)

    def _send_updateBuddyProfileAttributes(self, ctx, requestId, attributes):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('updateBuddyProfileAttributes', TMessageType.CALL, 0)
            args = updateBuddyProfileAttributes_args()
            args.requestId = requestId
            args.attributes = attributes
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_updateBuddyProfileAttributes(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = updateBuddyProfileAttributes_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "updateBuddyProfileAttributes failed: unknown result")
        raise x

    def updateBuddyProfileAttributesAsync(self, ctx, requestId, attributes):
        """
        Args:
            ctx: FContext
            requestId: string
            attributes: dict of <string, string>
        """
        return self._methods['updateBuddyProfileAttributesAsync']([ctx, requestId, attributes])

    def _updateBuddyProfileAttributesAsync(self, ctx, requestId, attributes):
        self._send_updateBuddyProfileAttributesAsync(ctx, requestId, attributes)
        return self._recv_updateBuddyProfileAttributesAsync(ctx)

    def _send_updateBuddyProfileAttributesAsync(self, ctx, requestId, attributes):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('updateBuddyProfileAttributesAsync', TMessageType.CALL, 0)
            args = updateBuddyProfileAttributesAsync_args()
            args.requestId = requestId
            args.attributes = attributes
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_updateBuddyProfileAttributesAsync(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = updateBuddyProfileAttributesAsync_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "updateBuddyProfileAttributesAsync failed: unknown result")
        raise x

    def updateBuddyProfileImage(self, ctx, requestId, image):
        """
        Args:
            ctx: FContext
            requestId: string
            image: binary string
        """
        return self._methods['updateBuddyProfileImage']([ctx, requestId, image])

    def _updateBuddyProfileImage(self, ctx, requestId, image):
        self._send_updateBuddyProfileImage(ctx, requestId, image)
        return self._recv_updateBuddyProfileImage(ctx)

    def _send_updateBuddyProfileImage(self, ctx, requestId, image):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('updateBuddyProfileImage', TMessageType.CALL, 0)
            args = updateBuddyProfileImage_args()
            args.requestId = requestId
            args.image = image
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_updateBuddyProfileImage(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = updateBuddyProfileImage_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "updateBuddyProfileImage failed: unknown result")
        raise x

    def updateBuddyProfileImageAsync(self, ctx, requestId, image):
        """
        Args:
            ctx: FContext
            requestId: string
            image: binary string
        """
        return self._methods['updateBuddyProfileImageAsync']([ctx, requestId, image])

    def _updateBuddyProfileImageAsync(self, ctx, requestId, image):
        self._send_updateBuddyProfileImageAsync(ctx, requestId, image)
        return self._recv_updateBuddyProfileImageAsync(ctx)

    def _send_updateBuddyProfileImageAsync(self, ctx, requestId, image):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('updateBuddyProfileImageAsync', TMessageType.CALL, 0)
            args = updateBuddyProfileImageAsync_args()
            args.requestId = requestId
            args.image = image
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_updateBuddyProfileImageAsync(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = updateBuddyProfileImageAsync_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "updateBuddyProfileImageAsync failed: unknown result")
        raise x

    def updateBuddySearchId(self, ctx, requestId, searchId):
        """
        Args:
            ctx: FContext
            requestId: string
            searchId: string
        """
        return self._methods['updateBuddySearchId']([ctx, requestId, searchId])

    def _updateBuddySearchId(self, ctx, requestId, searchId):
        self._send_updateBuddySearchId(ctx, requestId, searchId)
        self._recv_updateBuddySearchId(ctx)

    def _send_updateBuddySearchId(self, ctx, requestId, searchId):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('updateBuddySearchId', TMessageType.CALL, 0)
            args = updateBuddySearchId_args()
            args.requestId = requestId
            args.searchId = searchId
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_updateBuddySearchId(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = updateBuddySearchId_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def updateBuddySettings(self, ctx, settings):
        """
        Args:
            ctx: FContext
            settings: dict of <string, string>
        """
        return self._methods['updateBuddySettings']([ctx, settings])

    def _updateBuddySettings(self, ctx, settings):
        self._send_updateBuddySettings(ctx, settings)
        self._recv_updateBuddySettings(ctx)

    def _send_updateBuddySettings(self, ctx, settings):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('updateBuddySettings', TMessageType.CALL, 0)
            args = updateBuddySettings_args()
            args.settings = settings
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_updateBuddySettings(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = updateBuddySettings_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def uploadBuddyContent(self, ctx, contentType, content):
        """
        Args:
            ctx: FContext
            contentType: ContentType
            content: binary string
        """
        return self._methods['uploadBuddyContent']([ctx, contentType, content])

    def _uploadBuddyContent(self, ctx, contentType, content):
        self._send_uploadBuddyContent(ctx, contentType, content)
        return self._recv_uploadBuddyContent(ctx)

    def _send_uploadBuddyContent(self, ctx, contentType, content):
        oprot = self._oprot
        with self._write_lock:
            oprot.get_transport().set_timeout(ctx.timeout)
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('uploadBuddyContent', TMessageType.CALL, 0)
            args = uploadBuddyContent_args()
            args.contentType = contentType
            args.content = content
            args.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()

    def _recv_uploadBuddyContent(self, ctx):
        self._iprot.read_response_headers(ctx)
        _, mtype, _ = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            if x.type == TApplicationExceptionType.RESPONSE_TOO_LARGE:
                raise TTransportException(type=TTransportExceptionType.RESPONSE_TOO_LARGE, message=x.message)
            raise x
        result = uploadBuddyContent_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        if result.success is not None:
            return result.success
        x = TApplicationException(TApplicationExceptionType.MISSING_RESULT, "uploadBuddyContent failed: unknown result")
        raise x

class Processor(FBaseProcessor):

    def __init__(self, handler, middleware=None):
        """
        Create a new Processor.

        Args:
            handler: Iface
        """
        if middleware and not isinstance(middleware, list):
            middleware = [middleware]

        super(Processor, self).__init__()
        self.add_to_processor_map('addBuddyMember', _addBuddyMember(Method(handler.addBuddyMember, middleware), self.get_write_lock()))
        self.add_to_processor_map('addBuddyMembers', _addBuddyMembers(Method(handler.addBuddyMembers, middleware), self.get_write_lock()))
        self.add_to_processor_map('blockBuddyMember', _blockBuddyMember(Method(handler.blockBuddyMember, middleware), self.get_write_lock()))
        self.add_to_processor_map('commitSendMessagesToAll', _commitSendMessagesToAll(Method(handler.commitSendMessagesToAll, middleware), self.get_write_lock()))
        self.add_to_processor_map('commitSendMessagesToMids', _commitSendMessagesToMids(Method(handler.commitSendMessagesToMids, middleware), self.get_write_lock()))
        self.add_to_processor_map('containsBuddyMember', _containsBuddyMember(Method(handler.containsBuddyMember, middleware), self.get_write_lock()))
        self.add_to_processor_map('downloadMessageContent', _downloadMessageContent(Method(handler.downloadMessageContent, middleware), self.get_write_lock()))
        self.add_to_processor_map('downloadMessageContentPreview', _downloadMessageContentPreview(Method(handler.downloadMessageContentPreview, middleware), self.get_write_lock()))
        self.add_to_processor_map('downloadProfileImage', _downloadProfileImage(Method(handler.downloadProfileImage, middleware), self.get_write_lock()))
        self.add_to_processor_map('downloadProfileImagePreview', _downloadProfileImagePreview(Method(handler.downloadProfileImagePreview, middleware), self.get_write_lock()))
        self.add_to_processor_map('getActiveMemberCountByBuddyMid', _getActiveMemberCountByBuddyMid(Method(handler.getActiveMemberCountByBuddyMid, middleware), self.get_write_lock()))
        self.add_to_processor_map('getActiveMemberMidsByBuddyMid', _getActiveMemberMidsByBuddyMid(Method(handler.getActiveMemberMidsByBuddyMid, middleware), self.get_write_lock()))
        self.add_to_processor_map('getAllBuddyMembers', _getAllBuddyMembers(Method(handler.getAllBuddyMembers, middleware), self.get_write_lock()))
        self.add_to_processor_map('getBlockedBuddyMembers', _getBlockedBuddyMembers(Method(handler.getBlockedBuddyMembers, middleware), self.get_write_lock()))
        self.add_to_processor_map('getBlockerCountByBuddyMid', _getBlockerCountByBuddyMid(Method(handler.getBlockerCountByBuddyMid, middleware), self.get_write_lock()))
        self.add_to_processor_map('getBuddyDetailByMid', _getBuddyDetailByMid(Method(handler.getBuddyDetailByMid, middleware), self.get_write_lock()))
        self.add_to_processor_map('getBuddyProfile', _getBuddyProfile(Method(handler.getBuddyProfile, middleware), self.get_write_lock()))
        self.add_to_processor_map('getContactTicket', _getContactTicket(Method(handler.getContactTicket, middleware), self.get_write_lock()))
        self.add_to_processor_map('getMemberCountByBuddyMid', _getMemberCountByBuddyMid(Method(handler.getMemberCountByBuddyMid, middleware), self.get_write_lock()))
        self.add_to_processor_map('getSendBuddyMessageResult', _getSendBuddyMessageResult(Method(handler.getSendBuddyMessageResult, middleware), self.get_write_lock()))
        self.add_to_processor_map('getSetBuddyOnAirResult', _getSetBuddyOnAirResult(Method(handler.getSetBuddyOnAirResult, middleware), self.get_write_lock()))
        self.add_to_processor_map('getUpdateBuddyProfileResult', _getUpdateBuddyProfileResult(Method(handler.getUpdateBuddyProfileResult, middleware), self.get_write_lock()))
        self.add_to_processor_map('isBuddyOnAirByMid', _isBuddyOnAirByMid(Method(handler.isBuddyOnAirByMid, middleware), self.get_write_lock()))
        self.add_to_processor_map('linkAndSendBuddyContentMessageToAllAsync', _linkAndSendBuddyContentMessageToAllAsync(Method(handler.linkAndSendBuddyContentMessageToAllAsync, middleware), self.get_write_lock()))
        self.add_to_processor_map('linkAndSendBuddyContentMessageToMids', _linkAndSendBuddyContentMessageToMids(Method(handler.linkAndSendBuddyContentMessageToMids, middleware), self.get_write_lock()))
        self.add_to_processor_map('notifyBuddyBlocked', _notifyBuddyBlocked(Method(handler.notifyBuddyBlocked, middleware), self.get_write_lock()))
        self.add_to_processor_map('notifyBuddyUnblocked', _notifyBuddyUnblocked(Method(handler.notifyBuddyUnblocked, middleware), self.get_write_lock()))
        self.add_to_processor_map('registerBuddy', _registerBuddy(Method(handler.registerBuddy, middleware), self.get_write_lock()))
        self.add_to_processor_map('registerBuddyAdmin', _registerBuddyAdmin(Method(handler.registerBuddyAdmin, middleware), self.get_write_lock()))
        self.add_to_processor_map('reissueContactTicket', _reissueContactTicket(Method(handler.reissueContactTicket, middleware), self.get_write_lock()))
        self.add_to_processor_map('removeBuddyMember', _removeBuddyMember(Method(handler.removeBuddyMember, middleware), self.get_write_lock()))
        self.add_to_processor_map('removeBuddyMembers', _removeBuddyMembers(Method(handler.removeBuddyMembers, middleware), self.get_write_lock()))
        self.add_to_processor_map('sendBuddyContentMessageToAll', _sendBuddyContentMessageToAll(Method(handler.sendBuddyContentMessageToAll, middleware), self.get_write_lock()))
        self.add_to_processor_map('sendBuddyContentMessageToAllAsync', _sendBuddyContentMessageToAllAsync(Method(handler.sendBuddyContentMessageToAllAsync, middleware), self.get_write_lock()))
        self.add_to_processor_map('sendBuddyContentMessageToMids', _sendBuddyContentMessageToMids(Method(handler.sendBuddyContentMessageToMids, middleware), self.get_write_lock()))
        self.add_to_processor_map('sendBuddyContentMessageToMidsAsync', _sendBuddyContentMessageToMidsAsync(Method(handler.sendBuddyContentMessageToMidsAsync, middleware), self.get_write_lock()))
        self.add_to_processor_map('sendBuddyMessageToAll', _sendBuddyMessageToAll(Method(handler.sendBuddyMessageToAll, middleware), self.get_write_lock()))
        self.add_to_processor_map('sendBuddyMessageToAllAsync', _sendBuddyMessageToAllAsync(Method(handler.sendBuddyMessageToAllAsync, middleware), self.get_write_lock()))
        self.add_to_processor_map('sendBuddyMessageToMids', _sendBuddyMessageToMids(Method(handler.sendBuddyMessageToMids, middleware), self.get_write_lock()))
        self.add_to_processor_map('sendBuddyMessageToMidsAsync', _sendBuddyMessageToMidsAsync(Method(handler.sendBuddyMessageToMidsAsync, middleware), self.get_write_lock()))
        self.add_to_processor_map('sendIndividualEventToAllAsync', _sendIndividualEventToAllAsync(Method(handler.sendIndividualEventToAllAsync, middleware), self.get_write_lock()))
        self.add_to_processor_map('setBuddyOnAir', _setBuddyOnAir(Method(handler.setBuddyOnAir, middleware), self.get_write_lock()))
        self.add_to_processor_map('setBuddyOnAirAsync', _setBuddyOnAirAsync(Method(handler.setBuddyOnAirAsync, middleware), self.get_write_lock()))
        self.add_to_processor_map('storeMessage', _storeMessage(Method(handler.storeMessage, middleware), self.get_write_lock()))
        self.add_to_processor_map('unblockBuddyMember', _unblockBuddyMember(Method(handler.unblockBuddyMember, middleware), self.get_write_lock()))
        self.add_to_processor_map('unregisterBuddy', _unregisterBuddy(Method(handler.unregisterBuddy, middleware), self.get_write_lock()))
        self.add_to_processor_map('unregisterBuddyAdmin', _unregisterBuddyAdmin(Method(handler.unregisterBuddyAdmin, middleware), self.get_write_lock()))
        self.add_to_processor_map('updateBuddyAdminProfileAttribute', _updateBuddyAdminProfileAttribute(Method(handler.updateBuddyAdminProfileAttribute, middleware), self.get_write_lock()))
        self.add_to_processor_map('updateBuddyAdminProfileImage', _updateBuddyAdminProfileImage(Method(handler.updateBuddyAdminProfileImage, middleware), self.get_write_lock()))
        self.add_to_processor_map('updateBuddyProfileAttributes', _updateBuddyProfileAttributes(Method(handler.updateBuddyProfileAttributes, middleware), self.get_write_lock()))
        self.add_to_processor_map('updateBuddyProfileAttributesAsync', _updateBuddyProfileAttributesAsync(Method(handler.updateBuddyProfileAttributesAsync, middleware), self.get_write_lock()))
        self.add_to_processor_map('updateBuddyProfileImage', _updateBuddyProfileImage(Method(handler.updateBuddyProfileImage, middleware), self.get_write_lock()))
        self.add_to_processor_map('updateBuddyProfileImageAsync', _updateBuddyProfileImageAsync(Method(handler.updateBuddyProfileImageAsync, middleware), self.get_write_lock()))
        self.add_to_processor_map('updateBuddySearchId', _updateBuddySearchId(Method(handler.updateBuddySearchId, middleware), self.get_write_lock()))
        self.add_to_processor_map('updateBuddySettings', _updateBuddySettings(Method(handler.updateBuddySettings, middleware), self.get_write_lock()))
        self.add_to_processor_map('uploadBuddyContent', _uploadBuddyContent(Method(handler.uploadBuddyContent, middleware), self.get_write_lock()))


class _addBuddyMember(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_addBuddyMember, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = addBuddyMember_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = addBuddyMember_result()
        try:
            self._handler([ctx, args.requestId, args.userMid])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "addBuddyMember", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "addBuddyMember", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('addBuddyMember', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "addBuddyMember", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _addBuddyMembers(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_addBuddyMembers, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = addBuddyMembers_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = addBuddyMembers_result()
        try:
            self._handler([ctx, args.requestId, args.userMids])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "addBuddyMembers", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "addBuddyMembers", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('addBuddyMembers', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "addBuddyMembers", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _blockBuddyMember(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_blockBuddyMember, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = blockBuddyMember_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = blockBuddyMember_result()
        try:
            self._handler([ctx, args.requestId, args.mid])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "blockBuddyMember", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "blockBuddyMember", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('blockBuddyMember', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "blockBuddyMember", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _commitSendMessagesToAll(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_commitSendMessagesToAll, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = commitSendMessagesToAll_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = commitSendMessagesToAll_result()
        try:
            result.success = self._handler([ctx, args.requestIdList])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "commitSendMessagesToAll", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "commitSendMessagesToAll", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('commitSendMessagesToAll', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "commitSendMessagesToAll", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _commitSendMessagesToMids(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_commitSendMessagesToMids, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = commitSendMessagesToMids_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = commitSendMessagesToMids_result()
        try:
            result.success = self._handler([ctx, args.requestIdList, args.mids])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "commitSendMessagesToMids", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "commitSendMessagesToMids", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('commitSendMessagesToMids', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "commitSendMessagesToMids", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _containsBuddyMember(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_containsBuddyMember, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = containsBuddyMember_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = containsBuddyMember_result()
        try:
            result.success = self._handler([ctx, args.requestId, args.userMid])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "containsBuddyMember", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "containsBuddyMember", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('containsBuddyMember', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "containsBuddyMember", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _downloadMessageContent(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_downloadMessageContent, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = downloadMessageContent_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = downloadMessageContent_result()
        try:
            result.success = self._handler([ctx, args.requestId, args.messageId])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "downloadMessageContent", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "downloadMessageContent", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('downloadMessageContent', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "downloadMessageContent", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _downloadMessageContentPreview(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_downloadMessageContentPreview, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = downloadMessageContentPreview_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = downloadMessageContentPreview_result()
        try:
            result.success = self._handler([ctx, args.requestId, args.messageId])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "downloadMessageContentPreview", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "downloadMessageContentPreview", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('downloadMessageContentPreview', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "downloadMessageContentPreview", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _downloadProfileImage(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_downloadProfileImage, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = downloadProfileImage_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = downloadProfileImage_result()
        try:
            result.success = self._handler([ctx, args.requestId])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "downloadProfileImage", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "downloadProfileImage", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('downloadProfileImage', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "downloadProfileImage", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _downloadProfileImagePreview(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_downloadProfileImagePreview, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = downloadProfileImagePreview_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = downloadProfileImagePreview_result()
        try:
            result.success = self._handler([ctx, args.requestId])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "downloadProfileImagePreview", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "downloadProfileImagePreview", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('downloadProfileImagePreview', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "downloadProfileImagePreview", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _getActiveMemberCountByBuddyMid(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_getActiveMemberCountByBuddyMid, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = getActiveMemberCountByBuddyMid_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getActiveMemberCountByBuddyMid_result()
        try:
            result.success = self._handler([ctx, args.buddyMid])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "getActiveMemberCountByBuddyMid", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "getActiveMemberCountByBuddyMid", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('getActiveMemberCountByBuddyMid', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "getActiveMemberCountByBuddyMid", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _getActiveMemberMidsByBuddyMid(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_getActiveMemberMidsByBuddyMid, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = getActiveMemberMidsByBuddyMid_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getActiveMemberMidsByBuddyMid_result()
        try:
            result.success = self._handler([ctx, args.buddyMid])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "getActiveMemberMidsByBuddyMid", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "getActiveMemberMidsByBuddyMid", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('getActiveMemberMidsByBuddyMid', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "getActiveMemberMidsByBuddyMid", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _getAllBuddyMembers(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_getAllBuddyMembers, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = getAllBuddyMembers_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getAllBuddyMembers_result()
        try:
            result.success = self._handler([ctx])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "getAllBuddyMembers", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "getAllBuddyMembers", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('getAllBuddyMembers', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "getAllBuddyMembers", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _getBlockedBuddyMembers(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_getBlockedBuddyMembers, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = getBlockedBuddyMembers_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getBlockedBuddyMembers_result()
        try:
            result.success = self._handler([ctx])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "getBlockedBuddyMembers", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "getBlockedBuddyMembers", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('getBlockedBuddyMembers', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "getBlockedBuddyMembers", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _getBlockerCountByBuddyMid(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_getBlockerCountByBuddyMid, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = getBlockerCountByBuddyMid_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getBlockerCountByBuddyMid_result()
        try:
            result.success = self._handler([ctx, args.buddyMid])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "getBlockerCountByBuddyMid", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "getBlockerCountByBuddyMid", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('getBlockerCountByBuddyMid', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "getBlockerCountByBuddyMid", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _getBuddyDetailByMid(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_getBuddyDetailByMid, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = getBuddyDetailByMid_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getBuddyDetailByMid_result()
        try:
            result.success = self._handler([ctx, args.buddyMid])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "getBuddyDetailByMid", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "getBuddyDetailByMid", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('getBuddyDetailByMid', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "getBuddyDetailByMid", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _getBuddyProfile(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_getBuddyProfile, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = getBuddyProfile_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getBuddyProfile_result()
        try:
            result.success = self._handler([ctx])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "getBuddyProfile", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "getBuddyProfile", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('getBuddyProfile', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "getBuddyProfile", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _getContactTicket(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_getContactTicket, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = getContactTicket_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getContactTicket_result()
        try:
            result.success = self._handler([ctx])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "getContactTicket", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "getContactTicket", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('getContactTicket', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "getContactTicket", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _getMemberCountByBuddyMid(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_getMemberCountByBuddyMid, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = getMemberCountByBuddyMid_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getMemberCountByBuddyMid_result()
        try:
            result.success = self._handler([ctx, args.buddyMid])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "getMemberCountByBuddyMid", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "getMemberCountByBuddyMid", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('getMemberCountByBuddyMid', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "getMemberCountByBuddyMid", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _getSendBuddyMessageResult(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_getSendBuddyMessageResult, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = getSendBuddyMessageResult_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getSendBuddyMessageResult_result()
        try:
            result.success = self._handler([ctx, args.sendBuddyMessageRequestId])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "getSendBuddyMessageResult", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "getSendBuddyMessageResult", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('getSendBuddyMessageResult', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "getSendBuddyMessageResult", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _getSetBuddyOnAirResult(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_getSetBuddyOnAirResult, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = getSetBuddyOnAirResult_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getSetBuddyOnAirResult_result()
        try:
            result.success = self._handler([ctx, args.setBuddyOnAirRequestId])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "getSetBuddyOnAirResult", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "getSetBuddyOnAirResult", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('getSetBuddyOnAirResult', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "getSetBuddyOnAirResult", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _getUpdateBuddyProfileResult(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_getUpdateBuddyProfileResult, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = getUpdateBuddyProfileResult_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getUpdateBuddyProfileResult_result()
        try:
            result.success = self._handler([ctx, args.updateBuddyProfileRequestId])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "getUpdateBuddyProfileResult", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "getUpdateBuddyProfileResult", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('getUpdateBuddyProfileResult', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "getUpdateBuddyProfileResult", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _isBuddyOnAirByMid(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_isBuddyOnAirByMid, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = isBuddyOnAirByMid_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = isBuddyOnAirByMid_result()
        try:
            result.success = self._handler([ctx, args.buddyMid])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "isBuddyOnAirByMid", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "isBuddyOnAirByMid", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('isBuddyOnAirByMid', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "isBuddyOnAirByMid", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _linkAndSendBuddyContentMessageToAllAsync(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_linkAndSendBuddyContentMessageToAllAsync, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = linkAndSendBuddyContentMessageToAllAsync_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = linkAndSendBuddyContentMessageToAllAsync_result()
        try:
            result.success = self._handler([ctx, args.requestId, args.msg, args.sourceContentId])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "linkAndSendBuddyContentMessageToAllAsync", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "linkAndSendBuddyContentMessageToAllAsync", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('linkAndSendBuddyContentMessageToAllAsync', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "linkAndSendBuddyContentMessageToAllAsync", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _linkAndSendBuddyContentMessageToMids(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_linkAndSendBuddyContentMessageToMids, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = linkAndSendBuddyContentMessageToMids_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = linkAndSendBuddyContentMessageToMids_result()
        try:
            result.success = self._handler([ctx, args.requestId, args.msg, args.sourceContentId, args.mids])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "linkAndSendBuddyContentMessageToMids", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "linkAndSendBuddyContentMessageToMids", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('linkAndSendBuddyContentMessageToMids', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "linkAndSendBuddyContentMessageToMids", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _notifyBuddyBlocked(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_notifyBuddyBlocked, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = notifyBuddyBlocked_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = notifyBuddyBlocked_result()
        try:
            self._handler([ctx, args.buddyMid, args.blockerMid])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "notifyBuddyBlocked", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "notifyBuddyBlocked", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('notifyBuddyBlocked', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "notifyBuddyBlocked", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _notifyBuddyUnblocked(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_notifyBuddyUnblocked, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = notifyBuddyUnblocked_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = notifyBuddyUnblocked_result()
        try:
            self._handler([ctx, args.buddyMid, args.blockerMid])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "notifyBuddyUnblocked", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "notifyBuddyUnblocked", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('notifyBuddyUnblocked', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "notifyBuddyUnblocked", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _registerBuddy(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_registerBuddy, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = registerBuddy_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = registerBuddy_result()
        try:
            result.success = self._handler([ctx, args.buddyId, args.searchId, args.displayName, args.statusMeessage, args.picture, args.settings])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "registerBuddy", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "registerBuddy", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('registerBuddy', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "registerBuddy", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _registerBuddyAdmin(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_registerBuddyAdmin, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = registerBuddyAdmin_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = registerBuddyAdmin_result()
        try:
            result.success = self._handler([ctx, args.buddyId, args.searchId, args.displayName, args.statusMessage, args.picture])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "registerBuddyAdmin", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "registerBuddyAdmin", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('registerBuddyAdmin', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "registerBuddyAdmin", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _reissueContactTicket(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_reissueContactTicket, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = reissueContactTicket_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = reissueContactTicket_result()
        try:
            result.success = self._handler([ctx, args.expirationTime, args.maxUseCount])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "reissueContactTicket", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "reissueContactTicket", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('reissueContactTicket', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "reissueContactTicket", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _removeBuddyMember(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_removeBuddyMember, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = removeBuddyMember_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = removeBuddyMember_result()
        try:
            self._handler([ctx, args.requestId, args.userMid])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "removeBuddyMember", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "removeBuddyMember", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('removeBuddyMember', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "removeBuddyMember", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _removeBuddyMembers(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_removeBuddyMembers, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = removeBuddyMembers_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = removeBuddyMembers_result()
        try:
            self._handler([ctx, args.requestId, args.userMids])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "removeBuddyMembers", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "removeBuddyMembers", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('removeBuddyMembers', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "removeBuddyMembers", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _sendBuddyContentMessageToAll(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_sendBuddyContentMessageToAll, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = sendBuddyContentMessageToAll_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sendBuddyContentMessageToAll_result()
        try:
            result.success = self._handler([ctx, args.requestId, args.msg, args.content])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "sendBuddyContentMessageToAll", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "sendBuddyContentMessageToAll", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('sendBuddyContentMessageToAll', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "sendBuddyContentMessageToAll", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _sendBuddyContentMessageToAllAsync(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_sendBuddyContentMessageToAllAsync, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = sendBuddyContentMessageToAllAsync_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sendBuddyContentMessageToAllAsync_result()
        try:
            result.success = self._handler([ctx, args.requestId, args.msg, args.content])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "sendBuddyContentMessageToAllAsync", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "sendBuddyContentMessageToAllAsync", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('sendBuddyContentMessageToAllAsync', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "sendBuddyContentMessageToAllAsync", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _sendBuddyContentMessageToMids(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_sendBuddyContentMessageToMids, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = sendBuddyContentMessageToMids_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sendBuddyContentMessageToMids_result()
        try:
            result.success = self._handler([ctx, args.requestId, args.msg, args.content, args.mids])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "sendBuddyContentMessageToMids", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "sendBuddyContentMessageToMids", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('sendBuddyContentMessageToMids', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "sendBuddyContentMessageToMids", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _sendBuddyContentMessageToMidsAsync(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_sendBuddyContentMessageToMidsAsync, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = sendBuddyContentMessageToMidsAsync_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sendBuddyContentMessageToMidsAsync_result()
        try:
            result.success = self._handler([ctx, args.requestId, args.msg, args.content, args.mids])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "sendBuddyContentMessageToMidsAsync", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "sendBuddyContentMessageToMidsAsync", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('sendBuddyContentMessageToMidsAsync', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "sendBuddyContentMessageToMidsAsync", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _sendBuddyMessageToAll(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_sendBuddyMessageToAll, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = sendBuddyMessageToAll_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sendBuddyMessageToAll_result()
        try:
            result.success = self._handler([ctx, args.requestId, args.msg])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "sendBuddyMessageToAll", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "sendBuddyMessageToAll", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('sendBuddyMessageToAll', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "sendBuddyMessageToAll", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _sendBuddyMessageToAllAsync(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_sendBuddyMessageToAllAsync, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = sendBuddyMessageToAllAsync_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sendBuddyMessageToAllAsync_result()
        try:
            result.success = self._handler([ctx, args.requestId, args.msg])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "sendBuddyMessageToAllAsync", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "sendBuddyMessageToAllAsync", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('sendBuddyMessageToAllAsync', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "sendBuddyMessageToAllAsync", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _sendBuddyMessageToMids(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_sendBuddyMessageToMids, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = sendBuddyMessageToMids_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sendBuddyMessageToMids_result()
        try:
            result.success = self._handler([ctx, args.requestId, args.msg, args.mids])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "sendBuddyMessageToMids", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "sendBuddyMessageToMids", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('sendBuddyMessageToMids', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "sendBuddyMessageToMids", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _sendBuddyMessageToMidsAsync(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_sendBuddyMessageToMidsAsync, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = sendBuddyMessageToMidsAsync_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sendBuddyMessageToMidsAsync_result()
        try:
            result.success = self._handler([ctx, args.requestId, args.msg, args.mids])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "sendBuddyMessageToMidsAsync", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "sendBuddyMessageToMidsAsync", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('sendBuddyMessageToMidsAsync', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "sendBuddyMessageToMidsAsync", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _sendIndividualEventToAllAsync(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_sendIndividualEventToAllAsync, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = sendIndividualEventToAllAsync_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sendIndividualEventToAllAsync_result()
        try:
            self._handler([ctx, args.requestId, args.buddyMid, args.notificationStatus])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "sendIndividualEventToAllAsync", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "sendIndividualEventToAllAsync", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('sendIndividualEventToAllAsync', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "sendIndividualEventToAllAsync", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _setBuddyOnAir(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_setBuddyOnAir, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = setBuddyOnAir_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = setBuddyOnAir_result()
        try:
            result.success = self._handler([ctx, args.requestId, args.onAir])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "setBuddyOnAir", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "setBuddyOnAir", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('setBuddyOnAir', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "setBuddyOnAir", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _setBuddyOnAirAsync(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_setBuddyOnAirAsync, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = setBuddyOnAirAsync_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = setBuddyOnAirAsync_result()
        try:
            result.success = self._handler([ctx, args.requestId, args.onAir])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "setBuddyOnAirAsync", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "setBuddyOnAirAsync", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('setBuddyOnAirAsync', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "setBuddyOnAirAsync", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _storeMessage(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_storeMessage, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = storeMessage_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = storeMessage_result()
        try:
            result.success = self._handler([ctx, args.requestId, args.messageRequest])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "storeMessage", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "storeMessage", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('storeMessage', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "storeMessage", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _unblockBuddyMember(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_unblockBuddyMember, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = unblockBuddyMember_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = unblockBuddyMember_result()
        try:
            self._handler([ctx, args.requestId, args.mid])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "unblockBuddyMember", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "unblockBuddyMember", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('unblockBuddyMember', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "unblockBuddyMember", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _unregisterBuddy(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_unregisterBuddy, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = unregisterBuddy_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = unregisterBuddy_result()
        try:
            self._handler([ctx, args.requestId])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "unregisterBuddy", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "unregisterBuddy", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('unregisterBuddy', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "unregisterBuddy", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _unregisterBuddyAdmin(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_unregisterBuddyAdmin, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = unregisterBuddyAdmin_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = unregisterBuddyAdmin_result()
        try:
            self._handler([ctx, args.requestId])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "unregisterBuddyAdmin", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "unregisterBuddyAdmin", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('unregisterBuddyAdmin', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "unregisterBuddyAdmin", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _updateBuddyAdminProfileAttribute(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_updateBuddyAdminProfileAttribute, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = updateBuddyAdminProfileAttribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateBuddyAdminProfileAttribute_result()
        try:
            self._handler([ctx, args.requestId, args.attributes])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "updateBuddyAdminProfileAttribute", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "updateBuddyAdminProfileAttribute", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('updateBuddyAdminProfileAttribute', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "updateBuddyAdminProfileAttribute", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _updateBuddyAdminProfileImage(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_updateBuddyAdminProfileImage, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = updateBuddyAdminProfileImage_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateBuddyAdminProfileImage_result()
        try:
            self._handler([ctx, args.requestId, args.picture])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "updateBuddyAdminProfileImage", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "updateBuddyAdminProfileImage", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('updateBuddyAdminProfileImage', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "updateBuddyAdminProfileImage", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _updateBuddyProfileAttributes(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_updateBuddyProfileAttributes, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = updateBuddyProfileAttributes_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateBuddyProfileAttributes_result()
        try:
            result.success = self._handler([ctx, args.requestId, args.attributes])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "updateBuddyProfileAttributes", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "updateBuddyProfileAttributes", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('updateBuddyProfileAttributes', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "updateBuddyProfileAttributes", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _updateBuddyProfileAttributesAsync(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_updateBuddyProfileAttributesAsync, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = updateBuddyProfileAttributesAsync_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateBuddyProfileAttributesAsync_result()
        try:
            result.success = self._handler([ctx, args.requestId, args.attributes])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "updateBuddyProfileAttributesAsync", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "updateBuddyProfileAttributesAsync", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('updateBuddyProfileAttributesAsync', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "updateBuddyProfileAttributesAsync", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _updateBuddyProfileImage(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_updateBuddyProfileImage, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = updateBuddyProfileImage_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateBuddyProfileImage_result()
        try:
            result.success = self._handler([ctx, args.requestId, args.image])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "updateBuddyProfileImage", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "updateBuddyProfileImage", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('updateBuddyProfileImage', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "updateBuddyProfileImage", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _updateBuddyProfileImageAsync(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_updateBuddyProfileImageAsync, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = updateBuddyProfileImageAsync_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateBuddyProfileImageAsync_result()
        try:
            result.success = self._handler([ctx, args.requestId, args.image])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "updateBuddyProfileImageAsync", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "updateBuddyProfileImageAsync", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('updateBuddyProfileImageAsync', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "updateBuddyProfileImageAsync", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _updateBuddySearchId(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_updateBuddySearchId, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = updateBuddySearchId_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateBuddySearchId_result()
        try:
            self._handler([ctx, args.requestId, args.searchId])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "updateBuddySearchId", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "updateBuddySearchId", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('updateBuddySearchId', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "updateBuddySearchId", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _updateBuddySettings(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_updateBuddySettings, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = updateBuddySettings_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateBuddySettings_result()
        try:
            self._handler([ctx, args.settings])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "updateBuddySettings", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "updateBuddySettings", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('updateBuddySettings', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "updateBuddySettings", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


class _uploadBuddyContent(FProcessorFunction):

    def __init__(self, handler, lock):
        super(_uploadBuddyContent, self).__init__(handler, lock)

    def process(self, ctx, iprot, oprot):
        args = uploadBuddyContent_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = uploadBuddyContent_result()
        try:
            result.success = self._handler([ctx, args.contentType, args.content])
        except TalkException as e:
            result.e = e
        except TApplicationException as ex:
            with self._lock:
                _write_application_exception(ctx, oprot, "uploadBuddyContent", exception=ex)
                return
        except Exception as e:
            with self._lock:
                _write_application_exception(ctx, oprot, "uploadBuddyContent", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)
            raise
        with self._lock:
            try:
                oprot.write_response_headers(ctx)
                oprot.writeMessageBegin('uploadBuddyContent', TMessageType.REPLY, 0)
                result.write(oprot)
                oprot.writeMessageEnd()
                oprot.get_transport().flush()
            except TTransportException as e:
                # catch a request too large error because the TMemoryOutputBuffer always throws that if too much data is written
                if e.type == TTransportExceptionType.REQUEST_TOO_LARGE:
                    raise _write_application_exception(ctx, oprot, "uploadBuddyContent", ex_code=TApplicationExceptionType.RESPONSE_TOO_LARGE, message=e.args[0])
                else:
                    raise e


def _write_application_exception(ctx, oprot, method, ex_code=None, message=None, exception=None):
    if exception is not None:
        x = exception
    else:
        x = TApplicationException(type=ex_code, message=message)
    oprot.write_response_headers(ctx)
    oprot.writeMessageBegin(method, TMessageType.EXCEPTION, 0)
    x.write(oprot)
    oprot.writeMessageEnd()
    oprot.get_transport().flush()
    return x

class addBuddyMember_args(object):
    """
    Attributes:
     - requestId
     - userMid
    """
    def __init__(self, requestId=None, userMid=None):
        self.requestId = requestId
        self.userMid = userMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('addBuddyMember_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.userMid is not None:
            oprot.writeFieldBegin('userMid', TType.STRING, 2)
            oprot.writeString(self.userMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.userMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class addBuddyMember_result(object):
    """
    Attributes:
     - e
    """
    def __init__(self, e=None):
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('addBuddyMember_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class addBuddyMembers_args(object):
    """
    Attributes:
     - requestId
     - userMids
    """
    def __init__(self, requestId=None, userMids=None):
        self.requestId = requestId
        self.userMids = userMids

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.userMids = []
                    (_, elem453) = iprot.readListBegin()
                    for _ in range(elem453):
                        elem454 = iprot.readString()
                        self.userMids.append(elem454)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('addBuddyMembers_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.userMids is not None:
            oprot.writeFieldBegin('userMids', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.userMids))
            for elem455 in self.userMids:
                oprot.writeString(elem455)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.userMids))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class addBuddyMembers_result(object):
    """
    Attributes:
     - e
    """
    def __init__(self, e=None):
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('addBuddyMembers_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class blockBuddyMember_args(object):
    """
    Attributes:
     - requestId
     - mid
    """
    def __init__(self, requestId=None, mid=None):
        self.requestId = requestId
        self.mid = mid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('blockBuddyMember_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 2)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.mid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class blockBuddyMember_result(object):
    """
    Attributes:
     - e
    """
    def __init__(self, e=None):
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('blockBuddyMember_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class commitSendMessagesToAll_args(object):
    """
    Attributes:
     - requestIdList
    """
    def __init__(self, requestIdList=None):
        self.requestIdList = requestIdList

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.requestIdList = []
                    (_, elem456) = iprot.readListBegin()
                    for _ in range(elem456):
                        elem457 = iprot.readString()
                        self.requestIdList.append(elem457)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('commitSendMessagesToAll_args')
        if self.requestIdList is not None:
            oprot.writeFieldBegin('requestIdList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.requestIdList))
            for elem458 in self.requestIdList:
                oprot.writeString(elem458)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestIdList))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class commitSendMessagesToAll_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_, elem459) = iprot.readListBegin()
                    for _ in range(elem459):
                        elem460 = SendBuddyMessageResult()
                        elem460.read(iprot)
                        self.success.append(elem460)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('commitSendMessagesToAll_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for elem461 in self.success:
                elem461.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class commitSendMessagesToMids_args(object):
    """
    Attributes:
     - requestIdList
     - mids
    """
    def __init__(self, requestIdList=None, mids=None):
        self.requestIdList = requestIdList
        self.mids = mids

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.requestIdList = []
                    (_, elem462) = iprot.readListBegin()
                    for _ in range(elem462):
                        elem463 = iprot.readString()
                        self.requestIdList.append(elem463)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.mids = []
                    (_, elem464) = iprot.readListBegin()
                    for _ in range(elem464):
                        elem465 = iprot.readString()
                        self.mids.append(elem465)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('commitSendMessagesToMids_args')
        if self.requestIdList is not None:
            oprot.writeFieldBegin('requestIdList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.requestIdList))
            for elem466 in self.requestIdList:
                oprot.writeString(elem466)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mids is not None:
            oprot.writeFieldBegin('mids', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.mids))
            for elem467 in self.mids:
                oprot.writeString(elem467)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestIdList))
        value = (value * 31) ^ hash(make_hashable(self.mids))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class commitSendMessagesToMids_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_, elem468) = iprot.readListBegin()
                    for _ in range(elem468):
                        elem469 = SendBuddyMessageResult()
                        elem469.read(iprot)
                        self.success.append(elem469)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('commitSendMessagesToMids_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for elem470 in self.success:
                elem470.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class containsBuddyMember_args(object):
    """
    Attributes:
     - requestId
     - userMid
    """
    def __init__(self, requestId=None, userMid=None):
        self.requestId = requestId
        self.userMid = userMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('containsBuddyMember_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.userMid is not None:
            oprot.writeFieldBegin('userMid', TType.STRING, 2)
            oprot.writeString(self.userMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.userMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class containsBuddyMember_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('containsBuddyMember_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class downloadMessageContent_args(object):
    """
    Attributes:
     - requestId
     - messageId
    """
    def __init__(self, requestId=None, messageId=None):
        self.requestId = requestId
        self.messageId = messageId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.messageId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('downloadMessageContent_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.messageId is not None:
            oprot.writeFieldBegin('messageId', TType.STRING, 2)
            oprot.writeString(self.messageId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.messageId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class downloadMessageContent_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('downloadMessageContent_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeBinary(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class downloadMessageContentPreview_args(object):
    """
    Attributes:
     - requestId
     - messageId
    """
    def __init__(self, requestId=None, messageId=None):
        self.requestId = requestId
        self.messageId = messageId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.messageId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('downloadMessageContentPreview_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.messageId is not None:
            oprot.writeFieldBegin('messageId', TType.STRING, 2)
            oprot.writeString(self.messageId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.messageId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class downloadMessageContentPreview_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('downloadMessageContentPreview_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeBinary(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class downloadProfileImage_args(object):
    """
    Attributes:
     - requestId
    """
    def __init__(self, requestId=None):
        self.requestId = requestId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('downloadProfileImage_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class downloadProfileImage_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('downloadProfileImage_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeBinary(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class downloadProfileImagePreview_args(object):
    """
    Attributes:
     - requestId
    """
    def __init__(self, requestId=None):
        self.requestId = requestId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('downloadProfileImagePreview_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class downloadProfileImagePreview_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('downloadProfileImagePreview_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeBinary(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class getActiveMemberCountByBuddyMid_args(object):
    """
    Attributes:
     - buddyMid
    """
    def __init__(self, buddyMid=None):
        self.buddyMid = buddyMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.buddyMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('getActiveMemberCountByBuddyMid_args')
        if self.buddyMid is not None:
            oprot.writeFieldBegin('buddyMid', TType.STRING, 2)
            oprot.writeString(self.buddyMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.buddyMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class getActiveMemberCountByBuddyMid_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('getActiveMemberCountByBuddyMid_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class getActiveMemberMidsByBuddyMid_args(object):
    """
    Attributes:
     - buddyMid
    """
    def __init__(self, buddyMid=None):
        self.buddyMid = buddyMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.buddyMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('getActiveMemberMidsByBuddyMid_args')
        if self.buddyMid is not None:
            oprot.writeFieldBegin('buddyMid', TType.STRING, 2)
            oprot.writeString(self.buddyMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.buddyMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class getActiveMemberMidsByBuddyMid_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_, elem471) = iprot.readListBegin()
                    for _ in range(elem471):
                        elem472 = iprot.readString()
                        self.success.append(elem472)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('getActiveMemberMidsByBuddyMid_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRING, len(self.success))
            for elem473 in self.success:
                oprot.writeString(elem473)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class getAllBuddyMembers_args(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('getAllBuddyMembers_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class getAllBuddyMembers_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_, elem474) = iprot.readListBegin()
                    for _ in range(elem474):
                        elem475 = iprot.readString()
                        self.success.append(elem475)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('getAllBuddyMembers_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRING, len(self.success))
            for elem476 in self.success:
                oprot.writeString(elem476)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class getBlockedBuddyMembers_args(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('getBlockedBuddyMembers_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class getBlockedBuddyMembers_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_, elem477) = iprot.readListBegin()
                    for _ in range(elem477):
                        elem478 = iprot.readString()
                        self.success.append(elem478)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('getBlockedBuddyMembers_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRING, len(self.success))
            for elem479 in self.success:
                oprot.writeString(elem479)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class getBlockerCountByBuddyMid_args(object):
    """
    Attributes:
     - buddyMid
    """
    def __init__(self, buddyMid=None):
        self.buddyMid = buddyMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.buddyMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('getBlockerCountByBuddyMid_args')
        if self.buddyMid is not None:
            oprot.writeFieldBegin('buddyMid', TType.STRING, 2)
            oprot.writeString(self.buddyMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.buddyMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class getBlockerCountByBuddyMid_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('getBlockerCountByBuddyMid_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class getBuddyDetailByMid_args(object):
    """
    Attributes:
     - buddyMid
    """
    def __init__(self, buddyMid=None):
        self.buddyMid = buddyMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.buddyMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('getBuddyDetailByMid_args')
        if self.buddyMid is not None:
            oprot.writeFieldBegin('buddyMid', TType.STRING, 2)
            oprot.writeString(self.buddyMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.buddyMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class getBuddyDetailByMid_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = BuddyDetail()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('getBuddyDetailByMid_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class getBuddyProfile_args(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('getBuddyProfile_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class getBuddyProfile_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = BuddyProfile()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('getBuddyProfile_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class getContactTicket_args(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('getContactTicket_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class getContactTicket_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Ticket()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('getContactTicket_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class getMemberCountByBuddyMid_args(object):
    """
    Attributes:
     - buddyMid
    """
    def __init__(self, buddyMid=None):
        self.buddyMid = buddyMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.buddyMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('getMemberCountByBuddyMid_args')
        if self.buddyMid is not None:
            oprot.writeFieldBegin('buddyMid', TType.STRING, 2)
            oprot.writeString(self.buddyMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.buddyMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class getMemberCountByBuddyMid_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('getMemberCountByBuddyMid_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class getSendBuddyMessageResult_args(object):
    """
    Attributes:
     - sendBuddyMessageRequestId
    """
    def __init__(self, sendBuddyMessageRequestId=None):
        self.sendBuddyMessageRequestId = sendBuddyMessageRequestId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sendBuddyMessageRequestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('getSendBuddyMessageResult_args')
        if self.sendBuddyMessageRequestId is not None:
            oprot.writeFieldBegin('sendBuddyMessageRequestId', TType.STRING, 1)
            oprot.writeString(self.sendBuddyMessageRequestId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.sendBuddyMessageRequestId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class getSendBuddyMessageResult_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SendBuddyMessageResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('getSendBuddyMessageResult_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class getSetBuddyOnAirResult_args(object):
    """
    Attributes:
     - setBuddyOnAirRequestId
    """
    def __init__(self, setBuddyOnAirRequestId=None):
        self.setBuddyOnAirRequestId = setBuddyOnAirRequestId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.setBuddyOnAirRequestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('getSetBuddyOnAirResult_args')
        if self.setBuddyOnAirRequestId is not None:
            oprot.writeFieldBegin('setBuddyOnAirRequestId', TType.STRING, 1)
            oprot.writeString(self.setBuddyOnAirRequestId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.setBuddyOnAirRequestId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class getSetBuddyOnAirResult_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SetBuddyOnAirResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('getSetBuddyOnAirResult_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class getUpdateBuddyProfileResult_args(object):
    """
    Attributes:
     - updateBuddyProfileRequestId
    """
    def __init__(self, updateBuddyProfileRequestId=None):
        self.updateBuddyProfileRequestId = updateBuddyProfileRequestId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.updateBuddyProfileRequestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('getUpdateBuddyProfileResult_args')
        if self.updateBuddyProfileRequestId is not None:
            oprot.writeFieldBegin('updateBuddyProfileRequestId', TType.STRING, 1)
            oprot.writeString(self.updateBuddyProfileRequestId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.updateBuddyProfileRequestId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class getUpdateBuddyProfileResult_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = UpdateBuddyProfileResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('getUpdateBuddyProfileResult_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class isBuddyOnAirByMid_args(object):
    """
    Attributes:
     - buddyMid
    """
    def __init__(self, buddyMid=None):
        self.buddyMid = buddyMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.buddyMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('isBuddyOnAirByMid_args')
        if self.buddyMid is not None:
            oprot.writeFieldBegin('buddyMid', TType.STRING, 2)
            oprot.writeString(self.buddyMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.buddyMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class isBuddyOnAirByMid_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('isBuddyOnAirByMid_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class linkAndSendBuddyContentMessageToAllAsync_args(object):
    """
    Attributes:
     - requestId
     - msg
     - sourceContentId
    """
    def __init__(self, requestId=None, msg=None, sourceContentId=None):
        self.requestId = requestId
        self.msg = msg
        self.sourceContentId = sourceContentId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.msg = Message()
                    self.msg.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.sourceContentId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('linkAndSendBuddyContentMessageToAllAsync_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRUCT, 2)
            self.msg.write(oprot)
            oprot.writeFieldEnd()
        if self.sourceContentId is not None:
            oprot.writeFieldBegin('sourceContentId', TType.STRING, 3)
            oprot.writeString(self.sourceContentId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.msg))
        value = (value * 31) ^ hash(make_hashable(self.sourceContentId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class linkAndSendBuddyContentMessageToAllAsync_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('linkAndSendBuddyContentMessageToAllAsync_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class linkAndSendBuddyContentMessageToMids_args(object):
    """
    Attributes:
     - requestId
     - msg
     - sourceContentId
     - mids
    """
    def __init__(self, requestId=None, msg=None, sourceContentId=None, mids=None):
        self.requestId = requestId
        self.msg = msg
        self.sourceContentId = sourceContentId
        self.mids = mids

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.msg = Message()
                    self.msg.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.sourceContentId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.mids = []
                    (_, elem480) = iprot.readListBegin()
                    for _ in range(elem480):
                        elem481 = iprot.readString()
                        self.mids.append(elem481)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('linkAndSendBuddyContentMessageToMids_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRUCT, 2)
            self.msg.write(oprot)
            oprot.writeFieldEnd()
        if self.sourceContentId is not None:
            oprot.writeFieldBegin('sourceContentId', TType.STRING, 3)
            oprot.writeString(self.sourceContentId)
            oprot.writeFieldEnd()
        if self.mids is not None:
            oprot.writeFieldBegin('mids', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.mids))
            for elem482 in self.mids:
                oprot.writeString(elem482)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.msg))
        value = (value * 31) ^ hash(make_hashable(self.sourceContentId))
        value = (value * 31) ^ hash(make_hashable(self.mids))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class linkAndSendBuddyContentMessageToMids_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SendBuddyMessageResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('linkAndSendBuddyContentMessageToMids_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class notifyBuddyBlocked_args(object):
    """
    Attributes:
     - buddyMid
     - blockerMid
    """
    def __init__(self, buddyMid=None, blockerMid=None):
        self.buddyMid = buddyMid
        self.blockerMid = blockerMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.buddyMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.blockerMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('notifyBuddyBlocked_args')
        if self.buddyMid is not None:
            oprot.writeFieldBegin('buddyMid', TType.STRING, 1)
            oprot.writeString(self.buddyMid)
            oprot.writeFieldEnd()
        if self.blockerMid is not None:
            oprot.writeFieldBegin('blockerMid', TType.STRING, 2)
            oprot.writeString(self.blockerMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.buddyMid))
        value = (value * 31) ^ hash(make_hashable(self.blockerMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class notifyBuddyBlocked_result(object):
    """
    Attributes:
     - e
    """
    def __init__(self, e=None):
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('notifyBuddyBlocked_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class notifyBuddyUnblocked_args(object):
    """
    Attributes:
     - buddyMid
     - blockerMid
    """
    def __init__(self, buddyMid=None, blockerMid=None):
        self.buddyMid = buddyMid
        self.blockerMid = blockerMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.buddyMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.blockerMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('notifyBuddyUnblocked_args')
        if self.buddyMid is not None:
            oprot.writeFieldBegin('buddyMid', TType.STRING, 1)
            oprot.writeString(self.buddyMid)
            oprot.writeFieldEnd()
        if self.blockerMid is not None:
            oprot.writeFieldBegin('blockerMid', TType.STRING, 2)
            oprot.writeString(self.blockerMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.buddyMid))
        value = (value * 31) ^ hash(make_hashable(self.blockerMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class notifyBuddyUnblocked_result(object):
    """
    Attributes:
     - e
    """
    def __init__(self, e=None):
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('notifyBuddyUnblocked_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class registerBuddy_args(object):
    """
    Attributes:
     - buddyId
     - searchId
     - displayName
     - statusMeessage
     - picture
     - settings
    """
    def __init__(self, buddyId=None, searchId=None, displayName=None, statusMeessage=None, picture=None, settings=None):
        self.buddyId = buddyId
        self.searchId = searchId
        self.displayName = displayName
        self.statusMeessage = statusMeessage
        self.picture = picture
        self.settings = settings

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.buddyId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.searchId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.statusMeessage = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.picture = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.MAP:
                    self.settings = {}
                    (_, _, elem483) = iprot.readMapBegin()
                    for _ in range(elem483):
                        elem485 = iprot.readString()
                        elem484 = iprot.readString()
                        self.settings[elem485] = elem484
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('registerBuddy_args')
        if self.buddyId is not None:
            oprot.writeFieldBegin('buddyId', TType.STRING, 2)
            oprot.writeString(self.buddyId)
            oprot.writeFieldEnd()
        if self.searchId is not None:
            oprot.writeFieldBegin('searchId', TType.STRING, 3)
            oprot.writeString(self.searchId)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 4)
            oprot.writeString(self.displayName)
            oprot.writeFieldEnd()
        if self.statusMeessage is not None:
            oprot.writeFieldBegin('statusMeessage', TType.STRING, 5)
            oprot.writeString(self.statusMeessage)
            oprot.writeFieldEnd()
        if self.picture is not None:
            oprot.writeFieldBegin('picture', TType.STRING, 6)
            oprot.writeBinary(self.picture)
            oprot.writeFieldEnd()
        if self.settings is not None:
            oprot.writeFieldBegin('settings', TType.MAP, 7)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.settings))
            for elem487, elem486 in self.settings.items():
                oprot.writeString(elem487)
                oprot.writeString(elem486)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.buddyId))
        value = (value * 31) ^ hash(make_hashable(self.searchId))
        value = (value * 31) ^ hash(make_hashable(self.displayName))
        value = (value * 31) ^ hash(make_hashable(self.statusMeessage))
        value = (value * 31) ^ hash(make_hashable(self.picture))
        value = (value * 31) ^ hash(make_hashable(self.settings))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class registerBuddy_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('registerBuddy_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class registerBuddyAdmin_args(object):
    """
    Attributes:
     - buddyId
     - searchId
     - displayName
     - statusMessage
     - picture
    """
    def __init__(self, buddyId=None, searchId=None, displayName=None, statusMessage=None, picture=None):
        self.buddyId = buddyId
        self.searchId = searchId
        self.displayName = displayName
        self.statusMessage = statusMessage
        self.picture = picture

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.buddyId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.searchId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.statusMessage = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.picture = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('registerBuddyAdmin_args')
        if self.buddyId is not None:
            oprot.writeFieldBegin('buddyId', TType.STRING, 2)
            oprot.writeString(self.buddyId)
            oprot.writeFieldEnd()
        if self.searchId is not None:
            oprot.writeFieldBegin('searchId', TType.STRING, 3)
            oprot.writeString(self.searchId)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 4)
            oprot.writeString(self.displayName)
            oprot.writeFieldEnd()
        if self.statusMessage is not None:
            oprot.writeFieldBegin('statusMessage', TType.STRING, 5)
            oprot.writeString(self.statusMessage)
            oprot.writeFieldEnd()
        if self.picture is not None:
            oprot.writeFieldBegin('picture', TType.STRING, 6)
            oprot.writeBinary(self.picture)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.buddyId))
        value = (value * 31) ^ hash(make_hashable(self.searchId))
        value = (value * 31) ^ hash(make_hashable(self.displayName))
        value = (value * 31) ^ hash(make_hashable(self.statusMessage))
        value = (value * 31) ^ hash(make_hashable(self.picture))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class registerBuddyAdmin_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('registerBuddyAdmin_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class reissueContactTicket_args(object):
    """
    Attributes:
     - expirationTime
     - maxUseCount
    """
    def __init__(self, expirationTime=None, maxUseCount=None):
        self.expirationTime = expirationTime
        self.maxUseCount = maxUseCount

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 3:
                if ftype == TType.I64:
                    self.expirationTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.maxUseCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('reissueContactTicket_args')
        if self.expirationTime is not None:
            oprot.writeFieldBegin('expirationTime', TType.I64, 3)
            oprot.writeI64(self.expirationTime)
            oprot.writeFieldEnd()
        if self.maxUseCount is not None:
            oprot.writeFieldBegin('maxUseCount', TType.I32, 4)
            oprot.writeI32(self.maxUseCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.expirationTime))
        value = (value * 31) ^ hash(make_hashable(self.maxUseCount))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class reissueContactTicket_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('reissueContactTicket_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class removeBuddyMember_args(object):
    """
    Attributes:
     - requestId
     - userMid
    """
    def __init__(self, requestId=None, userMid=None):
        self.requestId = requestId
        self.userMid = userMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('removeBuddyMember_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.userMid is not None:
            oprot.writeFieldBegin('userMid', TType.STRING, 2)
            oprot.writeString(self.userMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.userMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class removeBuddyMember_result(object):
    """
    Attributes:
     - e
    """
    def __init__(self, e=None):
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('removeBuddyMember_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class removeBuddyMembers_args(object):
    """
    Attributes:
     - requestId
     - userMids
    """
    def __init__(self, requestId=None, userMids=None):
        self.requestId = requestId
        self.userMids = userMids

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.userMids = []
                    (_, elem488) = iprot.readListBegin()
                    for _ in range(elem488):
                        elem489 = iprot.readString()
                        self.userMids.append(elem489)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('removeBuddyMembers_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.userMids is not None:
            oprot.writeFieldBegin('userMids', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.userMids))
            for elem490 in self.userMids:
                oprot.writeString(elem490)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.userMids))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class removeBuddyMembers_result(object):
    """
    Attributes:
     - e
    """
    def __init__(self, e=None):
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('removeBuddyMembers_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class sendBuddyContentMessageToAll_args(object):
    """
    Attributes:
     - requestId
     - msg
     - content
    """
    def __init__(self, requestId=None, msg=None, content=None):
        self.requestId = requestId
        self.msg = msg
        self.content = content

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.msg = Message()
                    self.msg.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.content = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('sendBuddyContentMessageToAll_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRUCT, 2)
            self.msg.write(oprot)
            oprot.writeFieldEnd()
        if self.content is not None:
            oprot.writeFieldBegin('content', TType.STRING, 3)
            oprot.writeBinary(self.content)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.msg))
        value = (value * 31) ^ hash(make_hashable(self.content))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class sendBuddyContentMessageToAll_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SendBuddyMessageResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('sendBuddyContentMessageToAll_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class sendBuddyContentMessageToAllAsync_args(object):
    """
    Attributes:
     - requestId
     - msg
     - content
    """
    def __init__(self, requestId=None, msg=None, content=None):
        self.requestId = requestId
        self.msg = msg
        self.content = content

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.msg = Message()
                    self.msg.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.content = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('sendBuddyContentMessageToAllAsync_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRUCT, 2)
            self.msg.write(oprot)
            oprot.writeFieldEnd()
        if self.content is not None:
            oprot.writeFieldBegin('content', TType.STRING, 3)
            oprot.writeBinary(self.content)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.msg))
        value = (value * 31) ^ hash(make_hashable(self.content))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class sendBuddyContentMessageToAllAsync_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('sendBuddyContentMessageToAllAsync_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class sendBuddyContentMessageToMids_args(object):
    """
    Attributes:
     - requestId
     - msg
     - content
     - mids
    """
    def __init__(self, requestId=None, msg=None, content=None, mids=None):
        self.requestId = requestId
        self.msg = msg
        self.content = content
        self.mids = mids

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.msg = Message()
                    self.msg.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.content = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.mids = []
                    (_, elem491) = iprot.readListBegin()
                    for _ in range(elem491):
                        elem492 = iprot.readString()
                        self.mids.append(elem492)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('sendBuddyContentMessageToMids_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRUCT, 2)
            self.msg.write(oprot)
            oprot.writeFieldEnd()
        if self.content is not None:
            oprot.writeFieldBegin('content', TType.STRING, 3)
            oprot.writeBinary(self.content)
            oprot.writeFieldEnd()
        if self.mids is not None:
            oprot.writeFieldBegin('mids', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.mids))
            for elem493 in self.mids:
                oprot.writeString(elem493)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.msg))
        value = (value * 31) ^ hash(make_hashable(self.content))
        value = (value * 31) ^ hash(make_hashable(self.mids))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class sendBuddyContentMessageToMids_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SendBuddyMessageResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('sendBuddyContentMessageToMids_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class sendBuddyContentMessageToMidsAsync_args(object):
    """
    Attributes:
     - requestId
     - msg
     - content
     - mids
    """
    def __init__(self, requestId=None, msg=None, content=None, mids=None):
        self.requestId = requestId
        self.msg = msg
        self.content = content
        self.mids = mids

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.msg = Message()
                    self.msg.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.content = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.mids = []
                    (_, elem494) = iprot.readListBegin()
                    for _ in range(elem494):
                        elem495 = iprot.readString()
                        self.mids.append(elem495)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('sendBuddyContentMessageToMidsAsync_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRUCT, 2)
            self.msg.write(oprot)
            oprot.writeFieldEnd()
        if self.content is not None:
            oprot.writeFieldBegin('content', TType.STRING, 3)
            oprot.writeBinary(self.content)
            oprot.writeFieldEnd()
        if self.mids is not None:
            oprot.writeFieldBegin('mids', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.mids))
            for elem496 in self.mids:
                oprot.writeString(elem496)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.msg))
        value = (value * 31) ^ hash(make_hashable(self.content))
        value = (value * 31) ^ hash(make_hashable(self.mids))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class sendBuddyContentMessageToMidsAsync_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('sendBuddyContentMessageToMidsAsync_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class sendBuddyMessageToAll_args(object):
    """
    Attributes:
     - requestId
     - msg
    """
    def __init__(self, requestId=None, msg=None):
        self.requestId = requestId
        self.msg = msg

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.msg = Message()
                    self.msg.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('sendBuddyMessageToAll_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRUCT, 2)
            self.msg.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.msg))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class sendBuddyMessageToAll_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SendBuddyMessageResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('sendBuddyMessageToAll_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class sendBuddyMessageToAllAsync_args(object):
    """
    Attributes:
     - requestId
     - msg
    """
    def __init__(self, requestId=None, msg=None):
        self.requestId = requestId
        self.msg = msg

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.msg = Message()
                    self.msg.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('sendBuddyMessageToAllAsync_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRUCT, 2)
            self.msg.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.msg))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class sendBuddyMessageToAllAsync_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('sendBuddyMessageToAllAsync_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class sendBuddyMessageToMids_args(object):
    """
    Attributes:
     - requestId
     - msg
     - mids
    """
    def __init__(self, requestId=None, msg=None, mids=None):
        self.requestId = requestId
        self.msg = msg
        self.mids = mids

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.msg = Message()
                    self.msg.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.mids = []
                    (_, elem497) = iprot.readListBegin()
                    for _ in range(elem497):
                        elem498 = iprot.readString()
                        self.mids.append(elem498)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('sendBuddyMessageToMids_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRUCT, 2)
            self.msg.write(oprot)
            oprot.writeFieldEnd()
        if self.mids is not None:
            oprot.writeFieldBegin('mids', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.mids))
            for elem499 in self.mids:
                oprot.writeString(elem499)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.msg))
        value = (value * 31) ^ hash(make_hashable(self.mids))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class sendBuddyMessageToMids_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SendBuddyMessageResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('sendBuddyMessageToMids_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class sendBuddyMessageToMidsAsync_args(object):
    """
    Attributes:
     - requestId
     - msg
     - mids
    """
    def __init__(self, requestId=None, msg=None, mids=None):
        self.requestId = requestId
        self.msg = msg
        self.mids = mids

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.msg = Message()
                    self.msg.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.mids = []
                    (_, elem500) = iprot.readListBegin()
                    for _ in range(elem500):
                        elem501 = iprot.readString()
                        self.mids.append(elem501)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('sendBuddyMessageToMidsAsync_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRUCT, 2)
            self.msg.write(oprot)
            oprot.writeFieldEnd()
        if self.mids is not None:
            oprot.writeFieldBegin('mids', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.mids))
            for elem502 in self.mids:
                oprot.writeString(elem502)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.msg))
        value = (value * 31) ^ hash(make_hashable(self.mids))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class sendBuddyMessageToMidsAsync_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('sendBuddyMessageToMidsAsync_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class sendIndividualEventToAllAsync_args(object):
    """
    Attributes:
     - requestId
     - buddyMid
     - notificationStatus
    """
    def __init__(self, requestId=None, buddyMid=None, notificationStatus=None):
        self.requestId = requestId
        self.buddyMid = buddyMid
        self.notificationStatus = notificationStatus

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.buddyMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.notificationStatus = NotificationStatus(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('sendIndividualEventToAllAsync_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.buddyMid is not None:
            oprot.writeFieldBegin('buddyMid', TType.STRING, 2)
            oprot.writeString(self.buddyMid)
            oprot.writeFieldEnd()
        if self.notificationStatus is not None:
            oprot.writeFieldBegin('notificationStatus', TType.I32, 3)
            oprot.writeI32(self.notificationStatus)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.buddyMid))
        value = (value * 31) ^ hash(make_hashable(self.notificationStatus))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class sendIndividualEventToAllAsync_result(object):
    """
    Attributes:
     - e
    """
    def __init__(self, e=None):
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('sendIndividualEventToAllAsync_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class setBuddyOnAir_args(object):
    """
    Attributes:
     - requestId
     - onAir
    """
    def __init__(self, requestId=None, onAir=None):
        self.requestId = requestId
        self.onAir = onAir

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.onAir = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('setBuddyOnAir_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.onAir is not None:
            oprot.writeFieldBegin('onAir', TType.BOOL, 2)
            oprot.writeBool(self.onAir)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.onAir))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class setBuddyOnAir_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SetBuddyOnAirResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('setBuddyOnAir_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class setBuddyOnAirAsync_args(object):
    """
    Attributes:
     - requestId
     - onAir
    """
    def __init__(self, requestId=None, onAir=None):
        self.requestId = requestId
        self.onAir = onAir

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.onAir = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('setBuddyOnAirAsync_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.onAir is not None:
            oprot.writeFieldBegin('onAir', TType.BOOL, 2)
            oprot.writeBool(self.onAir)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.onAir))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class setBuddyOnAirAsync_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('setBuddyOnAirAsync_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class storeMessage_args(object):
    """
    Attributes:
     - requestId
     - messageRequest
    """
    def __init__(self, requestId=None, messageRequest=None):
        self.requestId = requestId
        self.messageRequest = messageRequest

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.messageRequest = BuddyMessageRequest()
                    self.messageRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('storeMessage_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.messageRequest is not None:
            oprot.writeFieldBegin('messageRequest', TType.STRUCT, 2)
            self.messageRequest.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.messageRequest))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class storeMessage_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SendBuddyMessageResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('storeMessage_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class unblockBuddyMember_args(object):
    """
    Attributes:
     - requestId
     - mid
    """
    def __init__(self, requestId=None, mid=None):
        self.requestId = requestId
        self.mid = mid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('unblockBuddyMember_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 2)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.mid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class unblockBuddyMember_result(object):
    """
    Attributes:
     - e
    """
    def __init__(self, e=None):
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('unblockBuddyMember_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class unregisterBuddy_args(object):
    """
    Attributes:
     - requestId
    """
    def __init__(self, requestId=None):
        self.requestId = requestId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('unregisterBuddy_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class unregisterBuddy_result(object):
    """
    Attributes:
     - e
    """
    def __init__(self, e=None):
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('unregisterBuddy_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class unregisterBuddyAdmin_args(object):
    """
    Attributes:
     - requestId
    """
    def __init__(self, requestId=None):
        self.requestId = requestId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('unregisterBuddyAdmin_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class unregisterBuddyAdmin_result(object):
    """
    Attributes:
     - e
    """
    def __init__(self, e=None):
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('unregisterBuddyAdmin_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class updateBuddyAdminProfileAttribute_args(object):
    """
    Attributes:
     - requestId
     - attributes
    """
    def __init__(self, requestId=None, attributes=None):
        self.requestId = requestId
        self.attributes = attributes

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.attributes = {}
                    (_, _, elem503) = iprot.readMapBegin()
                    for _ in range(elem503):
                        elem505 = iprot.readString()
                        elem504 = iprot.readString()
                        self.attributes[elem505] = elem504
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('updateBuddyAdminProfileAttribute_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.attributes is not None:
            oprot.writeFieldBegin('attributes', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.attributes))
            for elem507, elem506 in self.attributes.items():
                oprot.writeString(elem507)
                oprot.writeString(elem506)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.attributes))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class updateBuddyAdminProfileAttribute_result(object):
    """
    Attributes:
     - e
    """
    def __init__(self, e=None):
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('updateBuddyAdminProfileAttribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class updateBuddyAdminProfileImage_args(object):
    """
    Attributes:
     - requestId
     - picture
    """
    def __init__(self, requestId=None, picture=None):
        self.requestId = requestId
        self.picture = picture

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.picture = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('updateBuddyAdminProfileImage_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.picture is not None:
            oprot.writeFieldBegin('picture', TType.STRING, 2)
            oprot.writeBinary(self.picture)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.picture))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class updateBuddyAdminProfileImage_result(object):
    """
    Attributes:
     - e
    """
    def __init__(self, e=None):
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('updateBuddyAdminProfileImage_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class updateBuddyProfileAttributes_args(object):
    """
    Attributes:
     - requestId
     - attributes
    """
    def __init__(self, requestId=None, attributes=None):
        self.requestId = requestId
        self.attributes = attributes

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.attributes = {}
                    (_, _, elem508) = iprot.readMapBegin()
                    for _ in range(elem508):
                        elem510 = iprot.readString()
                        elem509 = iprot.readString()
                        self.attributes[elem510] = elem509
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('updateBuddyProfileAttributes_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.attributes is not None:
            oprot.writeFieldBegin('attributes', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.attributes))
            for elem512, elem511 in self.attributes.items():
                oprot.writeString(elem512)
                oprot.writeString(elem511)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.attributes))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class updateBuddyProfileAttributes_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = UpdateBuddyProfileResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('updateBuddyProfileAttributes_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class updateBuddyProfileAttributesAsync_args(object):
    """
    Attributes:
     - requestId
     - attributes
    """
    def __init__(self, requestId=None, attributes=None):
        self.requestId = requestId
        self.attributes = attributes

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.attributes = {}
                    (_, _, elem513) = iprot.readMapBegin()
                    for _ in range(elem513):
                        elem515 = iprot.readString()
                        elem514 = iprot.readString()
                        self.attributes[elem515] = elem514
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('updateBuddyProfileAttributesAsync_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.attributes is not None:
            oprot.writeFieldBegin('attributes', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.attributes))
            for elem517, elem516 in self.attributes.items():
                oprot.writeString(elem517)
                oprot.writeString(elem516)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.attributes))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class updateBuddyProfileAttributesAsync_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('updateBuddyProfileAttributesAsync_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class updateBuddyProfileImage_args(object):
    """
    Attributes:
     - requestId
     - image
    """
    def __init__(self, requestId=None, image=None):
        self.requestId = requestId
        self.image = image

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.image = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('updateBuddyProfileImage_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.image is not None:
            oprot.writeFieldBegin('image', TType.STRING, 2)
            oprot.writeBinary(self.image)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.image))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class updateBuddyProfileImage_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = UpdateBuddyProfileResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('updateBuddyProfileImage_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class updateBuddyProfileImageAsync_args(object):
    """
    Attributes:
     - requestId
     - image
    """
    def __init__(self, requestId=None, image=None):
        self.requestId = requestId
        self.image = image

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.image = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('updateBuddyProfileImageAsync_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.image is not None:
            oprot.writeFieldBegin('image', TType.STRING, 2)
            oprot.writeBinary(self.image)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.image))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class updateBuddyProfileImageAsync_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('updateBuddyProfileImageAsync_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class updateBuddySearchId_args(object):
    """
    Attributes:
     - requestId
     - searchId
    """
    def __init__(self, requestId=None, searchId=None):
        self.requestId = requestId
        self.searchId = searchId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.searchId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('updateBuddySearchId_args')
        if self.requestId is not None:
            oprot.writeFieldBegin('requestId', TType.STRING, 1)
            oprot.writeString(self.requestId)
            oprot.writeFieldEnd()
        if self.searchId is not None:
            oprot.writeFieldBegin('searchId', TType.STRING, 2)
            oprot.writeString(self.searchId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.requestId))
        value = (value * 31) ^ hash(make_hashable(self.searchId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class updateBuddySearchId_result(object):
    """
    Attributes:
     - e
    """
    def __init__(self, e=None):
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('updateBuddySearchId_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class updateBuddySettings_args(object):
    """
    Attributes:
     - settings
    """
    def __init__(self, settings=None):
        self.settings = settings

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.MAP:
                    self.settings = {}
                    (_, _, elem518) = iprot.readMapBegin()
                    for _ in range(elem518):
                        elem520 = iprot.readString()
                        elem519 = iprot.readString()
                        self.settings[elem520] = elem519
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('updateBuddySettings_args')
        if self.settings is not None:
            oprot.writeFieldBegin('settings', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.settings))
            for elem522, elem521 in self.settings.items():
                oprot.writeString(elem522)
                oprot.writeString(elem521)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.settings))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class updateBuddySettings_result(object):
    """
    Attributes:
     - e
    """
    def __init__(self, e=None):
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('updateBuddySettings_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class uploadBuddyContent_args(object):
    """
    Attributes:
     - contentType
     - content
    """
    def __init__(self, contentType=None, content=None):
        self.contentType = contentType
        self.content = content

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.I32:
                    self.contentType = ContentType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.content = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('uploadBuddyContent_args')
        if self.contentType is not None:
            oprot.writeFieldBegin('contentType', TType.I32, 2)
            oprot.writeI32(self.contentType)
            oprot.writeFieldEnd()
        if self.content is not None:
            oprot.writeFieldBegin('content', TType.STRING, 3)
            oprot.writeBinary(self.content)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.contentType))
        value = (value * 31) ^ hash(make_hashable(self.content))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class uploadBuddyContent_result(object):
    """
    Attributes:
     - success
     - e
    """
    def __init__(self, success=None, e=None):
        self.success = success
        self.e = e

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('uploadBuddyContent_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.success))
        value = (value * 31) ^ hash(make_hashable(self.e))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

